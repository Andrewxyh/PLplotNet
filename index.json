{
  "api/PLplot.Side.BottomPerpendicular.html": {
    "href": "api/PLplot.Side.BottomPerpendicular.html",
    "title": "Field BottomPerpendicular | PLplot for .NET",
    "keywords": "Field BottomPerpendicular Bottom of viewport, text written at right angles to edge. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string BottomPerpendicular = null Returns Type Description System.String"
  },
  "api/PLplot.Side.LeftParallel.html": {
    "href": "api/PLplot.Side.LeftParallel.html",
    "title": "Field LeftParallel | PLplot for .NET",
    "keywords": "Field LeftParallel Left of viewport, text written parallel to edge. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string LeftParallel = null Returns Type Description System.String"
  },
  "api/PLplot.Side.LeftPerpendicular.html": {
    "href": "api/PLplot.Side.LeftPerpendicular.html",
    "title": "Field LeftPerpendicular | PLplot for .NET",
    "keywords": "Field LeftPerpendicular Left of viewport, text written at right angles to edge. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string LeftPerpendicular = null Returns Type Description System.String"
  },
  "api/PLplot.Side.RightParallel.html": {
    "href": "api/PLplot.Side.RightParallel.html",
    "title": "Field RightParallel | PLplot for .NET",
    "keywords": "Field RightParallel Right of viewport, text written parallel to edge. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string RightParallel = null Returns Type Description System.String"
  },
  "api/PLplot.Side.RightPerpendicular.html": {
    "href": "api/PLplot.Side.RightPerpendicular.html",
    "title": "Field RightPerpendicular | PLplot for .NET",
    "keywords": "Field RightPerpendicular Right of viewport, text written at right angles to edge. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string RightPerpendicular = null Returns Type Description System.String"
  },
  "api/PLplot.Side.TopParallel.html": {
    "href": "api/PLplot.Side.TopParallel.html",
    "title": "Field TopParallel | PLplot for .NET",
    "keywords": "Field TopParallel Top of viewport, text written parallel to edge. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string TopParallel = null Returns Type Description System.String"
  },
  "api/PLplot.Side.TopPerpendicular.html": {
    "href": "api/PLplot.Side.TopPerpendicular.html",
    "title": "Field TopPerpendicular | PLplot for .NET",
    "keywords": "Field TopPerpendicular Top of viewport, text written at right angles to edge. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string TopPerpendicular = null Returns Type Description System.String"
  },
  "api/PLplot.Color.Black.html": {
    "href": "api/PLplot.Color.Black.html",
    "title": "Field Black | PLplot for .NET",
    "keywords": "Field Black Black Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Black = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Red.html": {
    "href": "api/PLplot.Color.Red.html",
    "title": "Field Red | PLplot for .NET",
    "keywords": "Field Red Red Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Red = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Yellow.html": {
    "href": "api/PLplot.Color.Yellow.html",
    "title": "Field Yellow | PLplot for .NET",
    "keywords": "Field Yellow Yellow Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Yellow = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Green.html": {
    "href": "api/PLplot.Color.Green.html",
    "title": "Field Green | PLplot for .NET",
    "keywords": "Field Green Green Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Green = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Aquamarine.html": {
    "href": "api/PLplot.Color.Aquamarine.html",
    "title": "Field Aquamarine | PLplot for .NET",
    "keywords": "Field Aquamarine Aquamarine Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Aquamarine = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Pink.html": {
    "href": "api/PLplot.Color.Pink.html",
    "title": "Field Pink | PLplot for .NET",
    "keywords": "Field Pink Pink Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Pink = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Wheat.html": {
    "href": "api/PLplot.Color.Wheat.html",
    "title": "Field Wheat | PLplot for .NET",
    "keywords": "Field Wheat Wheat Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Wheat = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Grey.html": {
    "href": "api/PLplot.Color.Grey.html",
    "title": "Field Grey | PLplot for .NET",
    "keywords": "Field Grey Grey Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Grey = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Brown.html": {
    "href": "api/PLplot.Color.Brown.html",
    "title": "Field Brown | PLplot for .NET",
    "keywords": "Field Brown Brown Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Brown = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Blue.html": {
    "href": "api/PLplot.Color.Blue.html",
    "title": "Field Blue | PLplot for .NET",
    "keywords": "Field Blue Blue Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Blue = null Returns Type Description Int32"
  },
  "api/PLplot.Color.BlueViolet.html": {
    "href": "api/PLplot.Color.BlueViolet.html",
    "title": "Field BlueViolet | PLplot for .NET",
    "keywords": "Field BlueViolet BlueViolet Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 BlueViolet = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Cyan.html": {
    "href": "api/PLplot.Color.Cyan.html",
    "title": "Field Cyan | PLplot for .NET",
    "keywords": "Field Cyan Cyan Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Cyan = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Turquoise.html": {
    "href": "api/PLplot.Color.Turquoise.html",
    "title": "Field Turquoise | PLplot for .NET",
    "keywords": "Field Turquoise Turquoise Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Turquoise = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Magenta.html": {
    "href": "api/PLplot.Color.Magenta.html",
    "title": "Field Magenta | PLplot for .NET",
    "keywords": "Field Magenta Magenta Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Magenta = null Returns Type Description Int32"
  },
  "api/PLplot.Color.Salmon.html": {
    "href": "api/PLplot.Color.Salmon.html",
    "title": "Field Salmon | PLplot for .NET",
    "keywords": "Field Salmon Salmon Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 Salmon = null Returns Type Description Int32"
  },
  "api/PLplot.Color.White.html": {
    "href": "api/PLplot.Color.White.html",
    "title": "Field White | PLplot for .NET",
    "keywords": "Field White White Namespace : PLplot Assembly : PLplotNet.dll Syntax public const Int32 White = null Returns Type Description Int32"
  },
  "api/PLplot.PLStream.sdiplt.html": {
    "href": "api/PLplot.PLStream.sdiplt.html",
    "title": "Method sdiplt | PLplot for .NET",
    "keywords": "Method sdiplt | Improve this Doc View Source sdiplt(Double, Double, Double, Double) plsdiplt: Set parameters that define current plot-space window Declaration public void sdiplt(Double xmin, Double ymin, Double xmax, Double ymax) Parameters Type Name Description Double xmin Relative minimum in x. Double ymin Relative minimum in y. Double xmax Relative maximum in x. Double ymax Relative maximum in y. Remarks Set relative minima and maxima that define the current plot-space window. If plsdiplt is not called the default values of xmin, ymin, xmax, and ymax are 0., 0., 1., and 1."
  },
  "api/PLplot.PLStream.sdiplz.html": {
    "href": "api/PLplot.PLStream.sdiplz.html",
    "title": "Method sdiplz | PLplot for .NET",
    "keywords": "Method sdiplz | Improve this Doc View Source sdiplz(Double, Double, Double, Double) plsdiplz: Set parameters incrementally (zoom mode) that define current plot-space window Declaration public void sdiplz(Double xmin, Double ymin, Double xmax, Double ymax) Parameters Type Name Description Double xmin Relative (incremental) minimum in x. Double ymin Relative (incremental) minimum in y. Double xmax Relative (incremental) maximum in x. Double ymax Relative (incremental) maximum in y. Remarks Set relative minima and maxima incrementally (zoom mode) that define the current plot-space window. This function has the same effect as plsdiplt if that function has not been previously called. Otherwise, this function implements zoom mode using the transformation min_used = old_min + old_length min and max_used = old_min + old_length max for each axis. For example, if min = 0.05 and max = 0.95 for each axis, repeated calls to plsdiplz will zoom in by 10 per cent for each call."
  },
  "api/PLplot.PLStream.seed.html": {
    "href": "api/PLplot.PLStream.seed.html",
    "title": "Method seed | PLplot for .NET",
    "keywords": "Method seed | Improve this Doc View Source seed(UInt32) plseed: Set seed for internal random number generator. Declaration public void seed(uint seed) Parameters Type Name Description System.UInt32 seed Seed for random number generator. Remarks Set the seed for the internal random number generator. See plrandd for further details."
  },
  "api/PLplot.PLStream.sesc.html": {
    "href": "api/PLplot.PLStream.sesc.html",
    "title": "Method sesc | PLplot for .NET",
    "keywords": "Method sesc | Improve this Doc View Source sesc(Char) plsesc: Set the escape character for text strings Declaration public void sesc(char esc) Parameters Type Name Description System.Char esc Escape character. Remarks Set the escape character for text strings. From C (in contrast to Fortran, see plsescfortran) you pass esc as a character. Only selected characters are allowed to prevent the user from shooting himself in the foot (For example, a \\ isn't allowed since it conflicts with C's use of backslash as a character escape). Here are the allowed escape characters and their corresponding decimal ASCII values: !, ASCII 33 #, ASCII 35 $, ASCII 36 %, ASCII 37 amp, ASCII 38 *, ASCII 42 @, ASCII 64 ^, ASCII 94 ~, ASCII 126"
  },
  "api/PLplot.PLStream.sfam.html": {
    "href": "api/PLplot.PLStream.sfam.html",
    "title": "Method sfam | PLplot for .NET",
    "keywords": "Method sfam | Improve this Doc View Source sfam(Int32, Int32, Int32) plsfam: Set family file parameters Declaration public void sfam(Int32 fam, Int32 num, Int32 bmax) Parameters Type Name Description Int32 fam Family flag (Boolean). If nonzero, familying is enabled. Int32 num Current family file number. Int32 bmax Maximum file size (in bytes) for a family file. Remarks Sets variables dealing with output file familying. Does nothing if familying not supported by the driver. This routine, if used, must be called before initializing PLplot. See for more information."
  },
  "api/PLplot.PLStream.sfci.html": {
    "href": "api/PLplot.PLStream.sfci.html",
    "title": "Method sfci | PLplot for .NET",
    "keywords": "Method sfci | Improve this Doc View Source sfci(FCI) plsfci: Set FCI (font characterization integer) Declaration public void sfci(FCI fci) Parameters Type Name Description FCI fci PLUNICODE (unsigned 32-bit integer) value of FCI. Remarks Sets font characteristics to be used at the start of the next string using the FCI approach. See for more information. Note, plsfont (which calls plsfci internally) provides a more user-friendly API for setting the font characterisitics."
  },
  "api/PLplot.PLStream.sfnam.html": {
    "href": "api/PLplot.PLStream.sfnam.html",
    "title": "Method sfnam | PLplot for .NET",
    "keywords": "Method sfnam | Improve this Doc View Source sfnam(String) plsfnam: Set output file name Declaration public void sfnam(string fnam) Parameters Type Name Description System.String fnam An ascii character string containing the file name. Remarks Sets the current output file name, if applicable. If the file name has not been specified and is required by the driver, the user will be prompted for it. If using the X-windows output driver, this sets the display name. This routine, if used, must be called before initializing PLplot."
  },
  "api/PLplot.PLStream.sfont.html": {
    "href": "api/PLplot.PLStream.sfont.html",
    "title": "Method sfont | PLplot for .NET",
    "keywords": "Method sfont | Improve this Doc View Source sfont(FontFamily, FontStyle, FontWeight) plsfont: Set family, style and weight of the current font Declaration public void sfont(FontFamily family, FontStyle style, FontWeight weight) Parameters Type Name Description FontFamily family Font family to select for the current font. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_SANS, PL_FCI_SERIF, PL_FCI_MONO, PL_FCI_SCRIPT and PL_FCI_SYMBOL. A negative value signifies that the font family should not be altered. FontStyle style Font style to select for the current font. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_UPRIGHT, PL_FCI_ITALIC and PL_FCI_OBLIQUE. A negative value signifies that the font style should not be altered. FontWeight weight Font weight to select for the current font. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_MEDIUM and PL_FCI_BOLD. A negative value signifies that the font weight should not be altered. Remarks Sets the current font. See for more information on font selection."
  },
  "api/PLplot.PLStream.shade.html": {
    "href": "api/PLplot.PLStream.shade.html",
    "title": "Method shade | PLplot for .NET",
    "keywords": "Method shade | Improve this Doc View Source shade(Double[,], DefinedFunc, Double, Double, Double, Double, Double, Double, Int32, Double, Double, Int32, Double, Int32, Double, Boolean, TransformFunc) plshade: Shade individual region on the basis of value Declaration public void shade(Double[, ] a, DefinedFunc defined, Double xmin, Double xmax, Double ymin, Double ymax, Double shade_min, Double shade_max, Int32 sh_cmap, Double sh_color, Double sh_width, Int32 min_color, Double min_width, Int32 max_color, Double max_width, Boolean rectangular, TransformFunc pltr) Parameters Type Name Description Double [,] a A matrix containing function values to plot. Should have dimensions of nx by ny. DefinedFunc defined Callback function specifying the region that should be plotted in the shade plot. This function accepts x and y coordinates as input arguments and must return 1 if the point is to be included in the shade plot and 0 otherwise. If you want to plot the entire shade plot (the usual case), this argument should be set to NULL. Double xmin Double xmax Double ymin Double ymax Double shade_min Defines the lower end of the interval to be shaded. If shade_max leq shade_min, plshade does nothing. Double shade_max Defines the upper end of the interval to be shaded. If shade_max leq shade_min, plshade does nothing. Int32 sh_cmap Defines color map. If sh_cmap=0, then sh_color is interpreted as a cmap0 (integer) index. If sh_cmap=1, then sh_color is interpreted as a cmap1 argument in the range (0.0-1.0). Double sh_color Defines color map index with integer value if cmap0 or value in range (0.0-1.0) if cmap1. Double sh_width Defines width used by the fill pattern. Int32 min_color Defines pen color, width used by the boundary of shaded region. The min values are used for the shade_min boundary, and the max values are used on the shade_max boundary. Set color and width to zero for no plotted boundaries. Double min_width Defines pen color, width used by the boundary of shaded region. The min values are used for the shade_min boundary, and the max values are used on the shade_max boundary. Set color and width to zero for no plotted boundaries. Int32 max_color Defines pen color, width used by the boundary of shaded region. The min values are used for the shade_min boundary, and the max values are used on the shade_max boundary. Set color and width to zero for no plotted boundaries. Double max_width Defines pen color, width used by the boundary of shaded region. The min values are used for the shade_min boundary, and the max values are used on the shade_max boundary. Set color and width to zero for no plotted boundaries. Boolean rectangular Set rectangular to true if rectangles map to rectangles after coordinate transformation with pltrl. Otherwise, set rectangular to false. If rectangular is set to true, plshade tries to save time by filling large rectangles. This optimization fails if the coordinate transformation distorts the shape of rectangles. For example a plot in polar coordinates has to have rectangular set to false. TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrix a and world coordinates. If pltr is not supplied (e.g., is set to NULL in the C case), then the x indices of a are mapped to the range xmin through xmax and the y indices of a are mapped to the range ymin through ymax.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Shade individual region on the basis of value. Use plshades if you want to shade a number of contiguous regions using continuous colors. In particular the edge contours are treated properly in plshades. If you attempt to do contiguous regions with plshade the contours at the edge of the shade are partially obliterated by subsequent plots of contiguous shaded regions."
  },
  "api/PLplot.PLStream.shades.html": {
    "href": "api/PLplot.PLStream.shades.html",
    "title": "Method shades | PLplot for .NET",
    "keywords": "Method shades | Improve this Doc View Source shades(Double[,], DefinedFunc, Double, Double, Double, Double, Double[], Double, Int32, Double, Boolean, TransformFunc) plshades: Shade regions on the basis of value Declaration public void shades(Double[, ] a, DefinedFunc defined, Double xmin, Double xmax, Double ymin, Double ymax, Double[] clevel, Double fill_width, Int32 cont_color, Double cont_width, Boolean rectangular, TransformFunc pltr) Parameters Type Name Description Double [,] a A matrix containing function values to plot. Should have dimensions of nx by ny. DefinedFunc defined Callback function specifying the region that should be plotted in the shade plot. This function accepts x and y coordinates as input arguments and must return 1 if the point is to be included in the shade plot and 0 otherwise. If you want to plot the entire shade plot (the usual case), this argument should be set to NULL. Double xmin Double xmax Double ymin Double ymax Double [] clevel A vector containing the data levels corresponding to the edges of each shaded region that will be plotted by this function. To work properly the levels should be monotonic. Double fill_width Defines the line width used by the fill pattern. Int32 cont_color Defines cmap0 pen color used for contours defining edges of shaded regions. The pen color is only temporary set for the contour drawing. Set this value to zero or less if no shade edge contours are wanted. Double cont_width Defines line width used for contours defining edges of shaded regions. This value may not be honored by all drivers. The pen width is only temporary set for the contour drawing. Set this value to zero or less if no shade edge contours are wanted. Boolean rectangular Set rectangular to true if rectangles map to rectangles after coordinate transformation with pltrl. Otherwise, set rectangular to false. If rectangular is set to true, plshade tries to save time by filling large rectangles. This optimization fails if the coordinate transformation distorts the shape of rectangles. For example a plot in polar coordinates has to have rectangular set to false. TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrix a and world coordinates. If pltr is not supplied (e.g., is set to NULL in the C case), then the x indices of a are mapped to the range xmin through xmax and the y indices of a are mapped to the range ymin through ymax.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Shade regions on the basis of value. This is the high-level routine for making continuous color shaded plots with cmap1 while plshade should be used to plot individual shaded regions using either cmap0 or cmap1. examples/;ltlanguagegt/x16* shows how to use plshades for each of our supported languages."
  },
  "api/PLplot.PLStream.slabelfunc.html": {
    "href": "api/PLplot.PLStream.slabelfunc.html",
    "title": "Method slabelfunc | PLplot for .NET",
    "keywords": "Method slabelfunc | Improve this Doc View Source slabelfunc(LabelFunc, IntPtr) plslabelfunc: Assign a function to use for generating custom axis labels Declaration public void slabelfunc(LabelFunc label_func, IntPtr label_data) Parameters Type Name Description LabelFunc label_func This is the custom label function. In order to reset to the default labelling, set this to NULL. The labelling function parameters are, in order: axis This indicates which axis a label is being requested for. The value will be one of PL_X_AXIS, PL_Y_AXIS or PL_Z_AXIS. value This is the value along the axis which is being labelled. label_text The string representation of the label value. length The maximum length in characters allowed for label_text. IntPtr label_data This parameter may be used to pass data to the label_func function. Remarks This function allows a user to provide their own function to provide axis label text. The user function is given the numeric value for a point on an axis and returns a string label to correspond with that value. Custom axis labels can be enabled by passing appropriate arguments to plenv, plbox, plbox3 and similar functions."
  },
  "api/PLplot.PLStream.smaj.html": {
    "href": "api/PLplot.PLStream.smaj.html",
    "title": "Method smaj | PLplot for .NET",
    "keywords": "Method smaj | Improve this Doc View Source smaj(Double, Double) plsmaj: Set length of major ticks Declaration public void smaj(Double def, Double scale) Parameters Type Name Description Double def The default length of a major tick in millimeters, should be set to zero if the default length is to remain unchanged. Double scale Scale factor to be applied to default to get actual tick length. Remarks This sets up the length of the major ticks. The actual length is the product of the default length and a scaling factor as for character height."
  },
  "api/PLplot.PLStream.smem.html": {
    "href": "api/PLplot.PLStream.smem.html",
    "title": "Method smem | PLplot for .NET",
    "keywords": "Method smem | Improve this Doc View Source smem(Int32, Int32, IntPtr) plsmem: Set the memory area to be plotted (RGB) Declaration public void smem(Int32 maxx, Int32 maxy, IntPtr plotmem) Parameters Type Name Description Int32 maxx Size of memory area in the X coordinate. Int32 maxy Size of memory area in the Y coordinate. IntPtr plotmem Pointer to the beginning of a user-supplied writeable memory area. Remarks Set the memory area to be plotted (with the mem or memcairo driver) as the dev member of the stream structure. Also set the number of pixels in the memory passed in plotmem, which is a block of memory maxy by maxx by 3 bytes long, say: 480 x 640 x 3 (Y, X, RGB)"
  },
  "api/PLplot.PLStream.smema.html": {
    "href": "api/PLplot.PLStream.smema.html",
    "title": "Method smema | PLplot for .NET",
    "keywords": "Method smema | Improve this Doc View Source smema(Int32, Int32, IntPtr) plsmema: Set the memory area to be plotted (RGBA) Declaration public void smema(Int32 maxx, Int32 maxy, IntPtr plotmem) Parameters Type Name Description Int32 maxx Size of memory area in the X coordinate. Int32 maxy Size of memory area in the Y coordinate. IntPtr plotmem Pointer to the beginning of a user-supplied writeable memory area. Remarks Set the memory area to be plotted (with the memcairo driver) as the dev member of the stream structure. Also set the number of pixels in the memory passed in plotmem, which is a block of memory maxy by maxx by 4 bytes long, say: 480 x 640 x 4 (Y, X, RGBA)"
  },
  "api/PLplot.PLStream.smin.html": {
    "href": "api/PLplot.PLStream.smin.html",
    "title": "Method smin | PLplot for .NET",
    "keywords": "Method smin | Improve this Doc View Source smin(Double, Double) plsmin: Set length of minor ticks Declaration public void smin(Double def, Double scale) Parameters Type Name Description Double def The default length of a minor tick in millimeters, should be set to zero if the default length is to remain unchanged. Double scale Scale factor to be applied to default to get actual tick length. Remarks This sets up the length of the minor ticks and the length of the terminals on error bars. The actual length is the product of the default length and a scaling factor as for character height."
  },
  "api/PLplot.PLStream.sdrawmode.html": {
    "href": "api/PLplot.PLStream.sdrawmode.html",
    "title": "Method sdrawmode | PLplot for .NET",
    "keywords": "Method sdrawmode | Improve this Doc View Source sdrawmode(DrawMode) plsdrawmode: Set drawing mode (depends on device support!) Declaration public void sdrawmode(DrawMode mode) Parameters Type Name Description DrawMode mode Control variable which species the drawing mode (one of PL_DRAWMODE_DEFAULT, PL_DRAWMODE_REPLACE, or PL_DRAWMODE_XOR) to use. Remarks Set drawing mode. Note only one device driver (cairo) currently supports this at the moment. See also plgdrawmode."
  },
  "api/PLplot.PLStream.image.html": {
    "href": "api/PLplot.PLStream.image.html",
    "title": "Method image | PLplot for .NET",
    "keywords": "Method image | Improve this Doc View Source image(Double[,], Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) plimage: Plot a 2D matrix using cmap1 with automatic color adjustment Declaration public void image(Double[, ] idata, Double xmin, Double xmax, Double ymin, Double ymax, Double zmin, Double zmax, Double Dxmin, Double Dxmax, Double Dymin, Double Dymax) Parameters Type Name Description Double [,] idata A matrix containing function values to plot. Should have dimensions of nx by ny. Double xmin Double xmax Double ymin Double ymax Double zmin Double zmax Double Dxmin Double Dxmax Double Dymin Double Dymax Remarks Plot a 2D matrix using the cmap1 palette. The color scale is automatically adjusted to use the maximum and minimum values in idata as valuemin and valuemax in a call to plimagefr."
  },
  "api/PLplot.PLStream.styl.html": {
    "href": "api/PLplot.PLStream.styl.html",
    "title": "Method styl | PLplot for .NET",
    "keywords": "Method styl | Improve this Doc View Source styl(Int32[], Int32[]) plstyl: Set line style Declaration public void styl(Int32[] mark, Int32[] space) Parameters Type Name Description Int32 [] mark A vector containing the lengths of the segments during which the pen is down, measured in micrometers. Int32 [] space A vector containing the lengths of the segments during which the pen is up, measured in micrometers. Remarks This sets up the line style for all lines subsequently drawn. A line consists of segments in which the pen is alternately down and up. The lengths of these segments are passed in the vectors mark and space respectively. The number of mark-space pairs is specified by nms. In order to return the line style to the default continuous line, plstyl should be called with nms =0 .(see also pllsty)"
  },
  "api/PLplot.PLStream.surf3d.html": {
    "href": "api/PLplot.PLStream.surf3d.html",
    "title": "Method surf3d | PLplot for .NET",
    "keywords": "Method surf3d | Improve this Doc View Source surf3d(Double[], Double[], Double[,], Surf, Double[]) plsurf3d: Plot shaded 3-d surface plot Declaration public void surf3d(Double[] x, Double[] y, Double[, ] z, Surf opt, Double[] clevel) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. Surf opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. FACETED + SURF_CONT opt=FACETED : Network of lines is drawn connecting points at which function is defined. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=SURF_CONT : A contour plot is drawn at the surface plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. opt=MAG_COLOR : the surface is colored according to the value of Z; if MAG_COLOR is not used, then the surface is colored according to the intensity of the reflected light in the surface from a light source whose position is set using pllightsource. Double [] clevel A vector containing the contour levels. Remarks Plots a three-dimensional shaded surface plot within the environment set up by plw3d. The surface is defined by the two-dimensional matrix z[nx][ny], the point z[i][j] being the value of the function at (x[i],y[j]). Note that the points in vectors x and y do not need to be equally spaced, but must be stored in ascending order. For further details see ."
  },
  "api/PLplot.PLStream.surf3dl.html": {
    "href": "api/PLplot.PLStream.surf3dl.html",
    "title": "Method surf3dl | PLplot for .NET",
    "keywords": "Method surf3dl | Improve this Doc View Source surf3dl(Double[], Double[], Double[,], Surf, Double[], Int32, Int32[], Int32[]) plsurf3dl: Plot shaded 3-d surface plot for z[x][y] with y index limits Declaration public void surf3dl(Double[] x, Double[] y, Double[, ] z, Surf opt, Double[] clevel, Int32 indexxmin, Int32[] indexymin, Int32[] indexymax) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. Surf opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. FACETED + SURF_CONT opt=FACETED : Network of lines is drawn connecting points at which function is defined. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=SURF_CONT : A contour plot is drawn at the surface plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. opt=MAG_COLOR : the surface is colored according to the value of Z; if MAG_COLOR is not used, then the surface is colored according to the intensity of the reflected light in the surface from a light source whose position is set using pllightsource. Double [] clevel A vector containing the contour levels. Int32 indexxmin The index value (which must be ≥ 0) that corresponds to the first x index where z is defined. Int32 [] indexymin A vector containing the y index values which all must be ≥ 0. These values are the first y index where z is defined for a particular x index in the range from indexxmin to indexxmax - 1. The dimension of indexymin is indexxmax. Int32 [] indexymax A vector containing the y index values which all must be ≤ ny. These values correspond (by convention) to one more than the last y index where z is defined for a particular x index in the range from indexxmin to indexxmax - 1. The dimension of indexymax is indexxmax. Remarks This variant of plsurf3d (see that function's documentation for more details) should be suitable for the case where the area of the x, y coordinate grid where z is defined can be non-rectangular. The limits of that grid are provided by the parameters indexxmin, indexxmax, indexymin, and indexymax."
  },
  "api/PLplot.PLStream.svect.html": {
    "href": "api/PLplot.PLStream.svect.html",
    "title": "Method svect | PLplot for .NET",
    "keywords": "Method svect | Improve this Doc View Source svect(Double[], Double[], Boolean) plsvect: Set arrow style for vector plots Declaration public void svect(Double[] arrowx, Double[] arrowy, Boolean fill) Parameters Type Name Description Double [] arrowx Double [] arrowy Boolean fill If fill is true then the arrow is closed, if fill is false then the arrow is open. Remarks Set the style for the arrow used by plvect to plot vectors."
  },
  "api/PLplot.PLStream.svpa.html": {
    "href": "api/PLplot.PLStream.svpa.html",
    "title": "Method svpa | PLplot for .NET",
    "keywords": "Method svpa | Improve this Doc View Source svpa(Double, Double, Double, Double) plsvpa: Specify viewport in absolute coordinates Declaration public void svpa(Double xmin, Double xmax, Double ymin, Double ymax) Parameters Type Name Description Double xmin The distance of the left-hand edge of the viewport from the left-hand edge of the subpage in millimeters. Double xmax The distance of the right-hand edge of the viewport from the left-hand edge of the subpage in millimeters. Double ymin The distance of the bottom edge of the viewport from the bottom edge of the subpage in millimeters. Double ymax The distance of the top edge of the viewport from the bottom edge of the subpage in millimeters. Remarks Alternate routine to plvpor for setting up the viewport. This routine should be used only if the viewport is required to have a definite size in millimeters. The routine plgspa is useful for finding out the size of the current subpage."
  },
  "api/PLplot.PLStream.sxax.html": {
    "href": "api/PLplot.PLStream.sxax.html",
    "title": "Method sxax | PLplot for .NET",
    "keywords": "Method sxax | Improve this Doc View Source sxax(Int32, Int32) plsxax: Set x axis parameters Declaration public void sxax(Int32 digmax, Int32 digits) Parameters Type Name Description Int32 digmax Variable to set the maximum number of digits for the x axis. If nonzero, the printed label will be switched to a floating-point representation when the number of digits exceeds digmax. Int32 digits Field digits value. Currently, changing its value here has no effect since it is set only by plbox or plbox3. However, the user may obtain its value after a call to either of these functions by calling plgxax. Remarks Sets values of the digmax and digits flags for the x axis. See for more information."
  },
  "api/PLplot.PLStream.sxwin.html": {
    "href": "api/PLplot.PLStream.sxwin.html",
    "title": "Method sxwin | PLplot for .NET",
    "keywords": "Method sxwin | Improve this Doc View Source sxwin(Int32) Set inferior X window Declaration public void sxwin(Int32 window_id) Parameters Type Name Description Int32 window_id"
  },
  "api/PLplot.PLStream.syax.html": {
    "href": "api/PLplot.PLStream.syax.html",
    "title": "Method syax | PLplot for .NET",
    "keywords": "Method syax | Improve this Doc View Source syax(Int32, Int32) plsyax: Set y axis parameters Declaration public void syax(Int32 digmax, Int32 digits) Parameters Type Name Description Int32 digmax Variable to set the maximum number of digits for the y axis. If nonzero, the printed label will be switched to a floating-point representation when the number of digits exceeds digmax. Int32 digits Field digits value. Currently, changing its value here has no effect since it is set only by plbox or plbox3. However, the user may obtain its value after a call to either of these functions by calling plgyax. Remarks Identical to plsxax, except that arguments are flags for y axis. See the description of plsxax for more detail."
  },
  "api/PLplot.PLStream.sym.html": {
    "href": "api/PLplot.PLStream.sym.html",
    "title": "Method sym | PLplot for .NET",
    "keywords": "Method sym | Improve this Doc View Source sym(Double[], Double[], Char) plsym: Plot a glyph at the specified points Declaration public void sym(Double[] x, Double[] y, char code) Parameters Type Name Description Double [] x A vector containing the x coordinates of the points. Double [] y A vector containing the y coordinates of the points. System.Char code Hershey symbol code corresponding to a glyph to be plotted at each of the n points. Remarks Plot a glyph at the specified points. (This function is largely superseded by plstring which gives access to many[!] more glyphs.)"
  },
  "api/PLplot.PLStream.szax.html": {
    "href": "api/PLplot.PLStream.szax.html",
    "title": "Method szax | PLplot for .NET",
    "keywords": "Method szax | Improve this Doc View Source szax(Int32, Int32) plszax: Set z axis parameters Declaration public void szax(Int32 digmax, Int32 digits) Parameters Type Name Description Int32 digmax Variable to set the maximum number of digits for the z axis. If nonzero, the printed label will be switched to a floating-point representation when the number of digits exceeds digmax. Int32 digits Field digits value. Currently, changing its value here has no effect since it is set only by plbox or plbox3. However, the user may obtain its value after a call to either of these functions by calling plgzax. Remarks Identical to plsxax, except that arguments are flags for z axis. See the description of plsxax for more detail."
  },
  "api/PLplot.PLStream.text.html": {
    "href": "api/PLplot.PLStream.text.html",
    "title": "Method text | PLplot for .NET",
    "keywords": "Method text | Improve this Doc View Source text() pltext: Switch to text screen Declaration public void text() Remarks Sets an interactive device to text mode, used in conjunction with plgra to allow graphics and text to be interspersed. On a device which supports separate text and graphics windows, this command causes control to be switched to the text window. This can be useful for printing diagnostic messages or getting user input, which would otherwise interfere with the plots. The program must switch back to the graphics window before issuing plot commands, as the text (or console) device will probably become quite confused otherwise. If already in text mode, this command is ignored. It is also ignored on devices which only support a single window or use a different method for shifting focus (see also plgra)."
  },
  "api/PLplot.PLStream.timefmt.html": {
    "href": "api/PLplot.PLStream.timefmt.html",
    "title": "Method timefmt | PLplot for .NET",
    "keywords": "Method timefmt | Improve this Doc View Source timefmt(String) pltimefmt: Set format for date / time labels Declaration public void timefmt(string fmt) Parameters Type Name Description System.String fmt An ascii character string which is interpreted similarly to the format specifier of typical system strftime routines except that PLplot ignores locale and also supplies some useful extensions in the context of plotting. All text in the string is printed as-is other than conversion specifications which take the form of a '%' character followed by further conversion specification character. The conversion specifications which are similar to those provided by system strftime routines are the following: %a: The abbreviated (English) weekday name. %A: The full (English) weekday name. %b: The abbreviated (English) month name. %B: The full (English) month name. %c: Equivalent to %a %b %d %T %Y (non-ISO). %C: The century number (year/100) as a 2-digit integer. %d: The day of the month as a decimal number (range 01 to 31). %D: Equivalent to %m/%d/%y (non-ISO). %e: Like %d, but a leading zero is replaced by a space. %F: Equivalent to %Y-%m-%d (the ISO 8601 date format). %h: Equivalent to %b. %H: The hour as a decimal number using a 24-hour clock (range 00 to 23). %I: The hour as a decimal number using a 12-hour clock (range 01 to 12). %j: The day of the year as a decimal number (range 001 to 366). %k: The hour (24-hour clock) as a decimal number (range 0 to 23); single digits are preceded by a blank. (See also %H.) %l: The hour (12-hour clock) as a decimal number (range 1 to 12); single digits are preceded by a blank. (See also %I.) %m: The month as a decimal number (range 01 to 12). %M: The minute as a decimal number (range 00 to 59). %n: A newline character. %p: Either \"AM\" or \"PM\" according to the given time value. Noon is treated as \"PM\" and midnight as \"AM\". %r: Equivalent to %I:%M:%S %p. %R: The time in 24-hour notation (%H:%M). For a version including the seconds, see %T below. %s: The number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC). %S: The second as a decimal number (range 00 to 60). (The range is up to 60 to allow for occasional leap seconds.) %t: A tab character. %T: The time in 24-hour notation (%H:%M:%S). %u: The day of the week as a decimal, range 1 to 7, Monday being 1. See also %w. %U: The week number of the current year as a decimal number, range 00 to 53, starting with the first Sunday as the first day of week 01. See also %V and %W. %v: Equivalent to %e-%b-%Y. %V: The ISO 8601 week number of the current year as a decimal number, range 01 to 53, where week 1 is the first week that has at least 4 days in the new year. See also %U and %W. %w: The day of the week as a decimal, range 0 to 6, Sunday being 0. See also %u. %W: The week number of the current year as a decimal number, range 00 to 53, starting with the first Monday as the first day of week 01. %x: Equivalent to %a %b %d %Y. %X: Equivalent to %T. %y: The year as a decimal number without a century (range 00 to 99). %Y: The year as a decimal number including a century. %z: The UTC time-zone string = \"+0000\". %Z: The UTC time-zone abbreviation = \"UTC\". %+: The UTC date and time in default format of the Unix date command which is equivalent to %a %b %d %T %Z %Y. %%: A literal \"%\" character. The conversion specifications which are extensions to those normally provided by system strftime routines are the following: %(0-9): The fractional part of the seconds field (including leading decimal point) to the specified accuracy. Thus %S%3 would give seconds to millisecond accuracy (00.000). %.: The fractional part of the seconds field (including leading decimal point) to the maximum available accuracy. Thus %S%. would give seconds with fractional part up to 9 decimal places if available. Remarks Sets the format for date / time labels. To enable date / time format labels see the options to plbox, plbox3, and plenv."
  },
  "api/PLplot.PLStream.vasp.html": {
    "href": "api/PLplot.PLStream.vasp.html",
    "title": "Method vasp | PLplot for .NET",
    "keywords": "Method vasp | Improve this Doc View Source vasp(Double) plvasp: Specify viewport using aspect ratio only Declaration public void vasp(Double aspect) Parameters Type Name Description Double aspect Ratio of length of y axis to length of x axis of resulting viewport. Remarks Selects the largest viewport with the given aspect ratio within the subpage that leaves a standard margin (left-hand margin of eight character heights, and a margin around the other three sides of five character heights)."
  },
  "api/PLplot.PLStream.vect.html": {
    "href": "api/PLplot.PLStream.vect.html",
    "title": "Method vect | PLplot for .NET",
    "keywords": "Method vect | Improve this Doc View Source vect(Double[,], Double[,], Double, TransformFunc) plvect: Vector plot Declaration public void vect(Double[, ] u, Double[, ] v, Double scale, TransformFunc pltr) Parameters Type Name Description Double [,] u Double [,] v Double scale Parameter to control the scaling factor of the vectors for plotting. If scale = 0 then the scaling factor is automatically calculated for the data. If scale lt 0 then the scaling factor is automatically calculated for the data and then multiplied by -scale. If scale gt 0 then the scaling factor is set to scale. TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrices u and v and world coordinates.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Draws a plot of vector data contained in the matrices (u[nx][ny],v[nx][ny]) . The scaling factor for the vectors is given by scale. A transformation routine pointed to by pltr with a pointer pltr_data for additional data required by the transformation routine to map indices within the matrices to the world coordinates. The style of the vector arrow may be set using plsvect."
  },
  "api/PLplot.PLStream.vpas.html": {
    "href": "api/PLplot.PLStream.vpas.html",
    "title": "Method vpas | PLplot for .NET",
    "keywords": "Method vpas | Improve this Doc View Source vpas(Double, Double, Double, Double, Double) plvpas: Specify viewport using coordinates and aspect ratio Declaration public void vpas(Double xmin, Double xmax, Double ymin, Double ymax, Double aspect) Parameters Type Name Description Double xmin The normalized subpage coordinate of the left-hand edge of the viewport. Double xmax The normalized subpage coordinate of the right-hand edge of the viewport. Double ymin The normalized subpage coordinate of the bottom edge of the viewport. Double ymax The normalized subpage coordinate of the top edge of the viewport. Double aspect Ratio of length of y axis to length of x axis. Remarks Device-independent routine for setting up the viewport. The viewport is chosen to be the largest with the given aspect ratio that fits within the specified region (in terms of normalized subpage coordinates). This routine is functionally equivalent to plvpor when a ``natural'' aspect ratio (0.0) is chosen. Unlike plvasp, this routine reserves no extra space at the edges for labels."
  },
  "api/PLplot.Native.bop.html": {
    "href": "api/PLplot.Native.bop.html",
    "title": "Method bop | PLplot for .NET",
    "keywords": "Method bop bop() plbop: Begin a new page Declaration public static void bop() Remarks Begins a new page. For a file driver, the output file is opened if necessary. Advancing the page via pleop and plbop is useful when a page break is desired at a particular point when plotting to subpages. Another use for pleop and plbop is when plotting pages to different files, since you can manually set the file name by calling plsfnam after the call to pleop. (In fact some drivers may only support a single page per file, making this a necessity.) One way to handle this case automatically is to page advance via pladv, but enable familying (see plsfam) with a small limit on the file size so that a new family member file will be created on each page break."
  },
  "api/PLplot.Native.box.html": {
    "href": "api/PLplot.Native.box.html",
    "title": "Method box | PLplot for .NET",
    "keywords": "Method box box(String, Double, Int32, String, Double, Int32) plbox: Draw a box with axes, etc Declaration public static void box(string xopt, Double xtick, Int32 nxsub, string yopt, Double ytick, Int32 nysub) Parameters Type Name Description System.String xopt One or more string concatenated from XYAxisOpt . Double xtick World coordinate interval between major ticks on the x axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nxsub Number of subintervals between major x axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. System.String yopt One or more string concatenated from XYAxisOpt . Double ytick World coordinate interval between major ticks on the y axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nysub Number of subintervals between major y axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. Remarks Draws a box around the currently defined viewport, and labels it with world coordinate values appropriate to the window. Thus plbox should only be called after defining both viewport and window. The ascii character strings xopt and yopt specify how the box should be drawn as described below. If ticks and/or subticks are to be drawn for a particular axis, the tick intervals and number of subintervals may be specified explicitly, or they may be defaulted by setting the appropriate arguments to zero."
  },
  "api/PLplot.Native.box3.html": {
    "href": "api/PLplot.Native.box3.html",
    "title": "Method box3 | PLplot for .NET",
    "keywords": "Method box3 box3(String, String, Double, Int32, String, String, Double, Int32, String, String, Double, Int32) plbox3: Draw a box with axes, etc, in 3-d Declaration public static void box3(string xopt, string xlabel, Double xtick, Int32 nxsub, string yopt, string ylabel, Double ytick, Int32 nysub, string zopt, string zlabel, Double ztick, Int32 nzsub) Parameters Type Name Description System.String xopt One or more string concatenated from XYAxisOpt . System.String xlabel A UTF-8 character string specifying the text label for the x axis. It is only drawn if u is in the xopt string. Double xtick World coordinate interval between major ticks on the x axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nxsub Number of subintervals between major x axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. System.String yopt One or more string concatenated from XYAxisOpt . System.String ylabel A UTF-8 character string specifying the text label for the y axis. It is only drawn if u is in the yopt string. Double ytick World coordinate interval between major ticks on the y axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nysub Number of subintervals between major y axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. System.String zopt One or more string concatenated from ZAxisOpt . System.String zlabel A UTF-8 character string specifying the text label for the z axis. It is only drawn if u or v are in the zopt string. Double ztick World coordinate interval between major ticks on the z axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nzsub Number of subintervals between major z axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. Remarks Draws axes, numeric and text labels for a three-dimensional surface plot. For a more complete description of three-dimensional plotting see ."
  },
  "api/PLplot.Native.calc_world.html": {
    "href": "api/PLplot.Native.calc_world.html",
    "title": "Method calc_world | PLplot for .NET",
    "keywords": "Method calc_world calc_world(Double, Double, out Double, out Double, out Int32) plcalc_world: Calculate world coordinates and corresponding window index from relative device coordinates Declaration public static void calc_world(Double rx, Double ry, out Double wx, out Double wy, out Int32 window) Parameters Type Name Description Double rx Input relative device coordinate (0.0-1.0) for the x coordinate. Double ry Input relative device coordinate (0.0-1.0) for the y coordinate. Double wx Returned value of the x world coordinate corresponding to the relative device coordinates rx and ry. Double wy Returned value of the y world coordinate corresponding to the relative device coordinates rx and ry. Int32 window Returned value of the last defined window index that corresponds to the input relative device coordinates (and the returned world coordinates). To give some background on the window index, for each page the initial window index is set to zero, and each time plwind is called within the page, world and device coordinates are stored for the window and the window index is incremented. Thus, for a simple page layout with non-overlapping viewports and one window per viewport, window corresponds to the viewport index (in the order which the viewport/windows were created) of the only viewport/window corresponding to rx and ry. However, for more complicated layouts with potentially overlapping viewports and possibly more than one window (set of world coordinates) per viewport, window and the corresponding output world coordinates corresponds to the last window created that fulfills the criterion that the relative device coordinates are inside it. Finally, in all cases where the input relative device coordinates are not inside any viewport/window, then the returned value of the last defined window index is set to -1. Remarks Calculate world coordinates, wx and wy, and corresponding window index from relative device coordinates, rx and ry."
  },
  "api/PLplot.Native.clear.html": {
    "href": "api/PLplot.Native.clear.html",
    "title": "Method clear | PLplot for .NET",
    "keywords": "Method clear clear() plclear: Clear current (sub)page Declaration public static void clear() Remarks Clears the current page, effectively erasing everything that have been drawn. This command only works with interactive drivers; if the driver does not support this, the page is filled with the background color in use. If the current page is divided into subpages, only the current subpage is erased. The nth subpage can be selected with pladv(n)."
  },
  "api/PLplot.Native.col0.html": {
    "href": "api/PLplot.Native.col0.html",
    "title": "Method col0 | PLplot for .NET",
    "keywords": "Method col0 col0(Int32) plcol0: Set color, cmap0 Declaration public static void col0(Int32 icol0) Parameters Type Name Description Int32 icol0 Integer representing the color. The defaults at present are (these may change): 0 black (default background) 1 red (default foreground) 2 yellow 3 green 4 aquamarine 5 pink 6 wheat 7 grey 8 brown 9 blue10 BlueViolet11 cyan12 turquoise13 magenta14 salmon15 white Use plscmap0 to change the entire cmap0 color palette and plscol0 to change an individual color in the cmap0 color palette. Remarks Sets the color index for cmap0 (see )."
  },
  "api/PLplot.Native.col1.html": {
    "href": "api/PLplot.Native.col1.html",
    "title": "Method col1 | PLplot for .NET",
    "keywords": "Method col1 col1(Double) plcol1: Set color, cmap1 Declaration public static void col1(Double col1) Parameters Type Name Description Double col1 This value must be in the range (0.0-1.0) and is mapped to color using the continuous cmap1 palette which by default ranges from blue to the background color to red. The cmap1 palette can also be straightforwardly changed by the user with plscmap1 or plscmap1l. Remarks Sets the color for cmap1 (see )."
  },
  "api/PLplot.Native.configtime.html": {
    "href": "api/PLplot.Native.configtime.html",
    "title": "Method configtime | PLplot for .NET",
    "keywords": "Method configtime configtime(Double, Double, Double, Int32, Boolean, Int32, Int32, Int32, Int32, Int32, Double) plconfigtime: Configure the transformation between continuous and broken-down time for the current stream Declaration public static void configtime(Double scale, Double offset1, Double offset2, Int32 ccontrol, Boolean ifbtime_offset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 min, Double sec) Parameters Type Name Description Double scale The number of days per continuous time unit. As a special case, if scale is 0., then all other arguments are ignored, and the result (the default used by PLplot) is the equivalent of a call to plconfigtime(1./86400., 0., 0., 0x0, 1, 1970, 0, 1, 0, 0, 0.). That is, for this special case broken-down time is calculated with the proleptic Gregorian calendar with no leap seconds inserted, and the continuous time is defined as the number of seconds since the Unix epoch of 1970-01-01T00:00:00Z. Double offset1 If ifbtime_offset is true, the parameters offset1 and offset2 are completely ignored. Otherwise, the sum of these parameters (with units in days) specify the epoch of the continuous time relative to the MJD epoch corresponding to the Gregorian calendar date of 1858-11-17T00:00:00Z or JD = 2400000.5. Two PLFLT numbers are used to specify the origin to allow users (by specifying offset1 as an integer that can be exactly represented by a floating-point variable and specifying offset2 as a number in the range from 0. to 1) the chance to minimize the numerical errors of the continuous time representation. Double offset2 See documentation of offset1. Int32 ccontrol ccontrol contains bits controlling the transformation. If the 0x1 bit is set, then the proleptic Julian calendar is used for broken-down time rather than the proleptic Gregorian calendar. If the 0x2 bit is set, then leap seconds that have been historically used to define UTC are inserted into the broken-down time. Other possibilities for additional control bits for ccontrol exist such as making the historical time corrections in the broken-down time corresponding to ET (ephemeris time) or making the (slightly non-constant) corrections from international atomic time (TAI) to what astronomers define as terrestrial time (TT). But those additional possibilities have not been implemented yet in the qsastime library (one of the PLplot utility libraries). Boolean ifbtime_offset ifbtime_offset controls how the epoch of the continuous time scale is specified by the user. If ifbtime_offset is false, then offset1 and offset2 are used to specify the epoch, and the following broken-down time parameters are completely ignored. If ifbtime_offset is true, then offset1 and offset2 are completely ignored, and the following broken-down time parameters are used to specify the epoch. Int32 year Year of epoch. Int32 month Month of epoch in range from 0 (January) to 11 (December). Int32 day Day of epoch in range from 1 to 31. Int32 hour Hour of epoch in range from 0 to 23 Int32 min Minute of epoch in range from 0 to 59. Double sec Second of epoch in range from 0. to 60. Remarks Configure the transformation between continuous and broken-down time for the current stream. This transformation is used by both plbtime and plctime."
  },
  "api/PLplot.Native.cpstrm.html": {
    "href": "api/PLplot.Native.cpstrm.html",
    "title": "Method cpstrm | PLplot for .NET",
    "keywords": "Method cpstrm cpstrm(Int32, Boolean) plcpstrm: Copy state parameters from the reference stream to the current stream Declaration public static void cpstrm(Int32 iplsr, Boolean flags) Parameters Type Name Description Int32 iplsr Number of reference stream. Boolean flags If flags is set to true the device coordinates are not copied from the reference to current stream. Remarks Copies state parameters from the reference stream to the current stream. Tell driver interface to map device coordinates unless flags == 1."
  },
  "api/PLplot.Native.ctime.html": {
    "href": "api/PLplot.Native.ctime.html",
    "title": "Method ctime | PLplot for .NET",
    "keywords": "Method ctime ctime(Int32, Int32, Int32, Int32, Int32, Double, out Double) plctime: Calculate continuous time from broken-down time for the current stream Declaration public static void ctime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 min, Double sec, out Double ctime) Parameters Type Name Description Int32 year Input year. Int32 month Input month in range from 0 (January) to 11 (December). Int32 day Input day in range from 1 to 31. Int32 hour Input hour in range from 0 to 23 Int32 min Input minute in range from 0 to 59. Double sec Input second in range from 0. to 60. Double ctime Returned value of the continuous time calculated from the broken-down time specified by the previous parameters. Remarks Calculate continuous time, ctime, from broken-down time for the current stream. The broken-down time is specified by the following parameters: year, month, day, hour, min, and sec. This function is the inverse of plbtime."
  },
  "api/PLplot.Native.did2pc.html": {
    "href": "api/PLplot.Native.did2pc.html",
    "title": "Method did2pc | PLplot for .NET",
    "keywords": "Method did2pc did2pc(out Double, out Double, out Double, out Double) Converts input values from relative device coordinates to relative plot coordinates. Declaration public static void did2pc(out Double xmin, out Double ymin, out Double xmax, out Double ymax) Parameters Type Name Description Double xmin Double ymin Double xmax Double ymax"
  },
  "api/PLplot.Native.dip2dc.html": {
    "href": "api/PLplot.Native.dip2dc.html",
    "title": "Method dip2dc | PLplot for .NET",
    "keywords": "Method dip2dc dip2dc(out Double, out Double, out Double, out Double) Converts input values from relative plot coordinates to relative device coordinates. Declaration public static void dip2dc(out Double xmin, out Double ymin, out Double xmax, out Double ymax) Parameters Type Name Description Double xmin Double ymin Double xmax Double ymax"
  },
  "api/PLplot.Native.end.html": {
    "href": "api/PLplot.Native.end.html",
    "title": "Method end | PLplot for .NET",
    "keywords": "Method end end() plend: End plotting session Declaration public static void end() Remarks Ends a plotting session, tidies up all the output files, switches interactive devices back into text mode and frees up any memory that was allocated. Must be called before end of program."
  },
  "api/PLplot.Native.end1.html": {
    "href": "api/PLplot.Native.end1.html",
    "title": "Method end1 | PLplot for .NET",
    "keywords": "Method end1 end1() plend1: End plotting session for current stream Declaration public static void end1() Remarks Ends a plotting session for the current output stream only. See plsstrm for more info."
  },
  "api/PLplot.Native.env.html": {
    "href": "api/PLplot.Native.env.html",
    "title": "Method env | PLplot for .NET",
    "keywords": "Method env env(Double, Double, Double, Double, AxesScale, AxisBox) plenv: Set up standard window and draw box Declaration public static void env(Double xmin, Double xmax, Double ymin, Double ymax, AxesScale just, AxisBox axis) Parameters Type Name Description Double xmin Value of x at left-hand edge of window (in world coordinates). Double xmax Value of x at right-hand edge of window (in world coordinates). Double ymin Value of y at bottom edge of window (in world coordinates). Double ymax Value of y at top edge of window (in world coordinates). AxesScale just Controls how the axes will be scaled: -1: the scales will not be set, the user must set up the scale before calling plenv using plsvpa, plvasp or other. 0: the x and y axes are scaled independently to use as much of the screen as possible. 1: the scales of the x and y axes are made equal. 2: the axis of the x and y axes are made equal, and the plot box will be square. AxisBox axis Controls drawing of the box around the plot: -2: draw no box, no tick marks, no numeric tick labels, no axes. -1: draw box only. 0: draw box, ticks, and numeric tick labels. 1: also draw coordinate axes at x=0 and y=0. 2: also draw a grid at major tick positions in both coordinates. 3: also draw a grid at minor tick positions in both coordinates. 10: same as 0 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 11: same as 1 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 12: same as 2 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 13: same as 3 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 20: same as 0 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 21: same as 1 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 22: same as 2 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 23: same as 3 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 30: same as 0 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 31: same as 1 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 32: same as 2 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 33: same as 3 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 40: same as 0 except date / time x labels. 41: same as 1 except date / time x labels. 42: same as 2 except date / time x labels. 43: same as 3 except date / time x labels. 50: same as 0 except date / time y labels. 51: same as 1 except date / time y labels. 52: same as 2 except date / time y labels. 53: same as 3 except date / time y labels. 60: same as 0 except date / time x and y labels. 61: same as 1 except date / time x and y labels. 62: same as 2 except date / time x and y labels. 63: same as 3 except date / time x and y labels. 70: same as 0 except custom x and y labels. 71: same as 1 except custom x and y labels. 72: same as 2 except custom x and y labels. 73: same as 3 except custom x and y labels. Remarks Sets up plotter environment for simple graphs by calling pladv and setting up viewport and window to sensible default values. plenv leaves a standard margin (left-hand margin of eight character heights, and a margin around the other three sides of five character heights) around most graphs for axis labels and a title. When these defaults are not suitable, use the individual routines plvpas, plvpor, or plvasp for setting up the viewport, plwind for defining the window, and plbox for drawing the box."
  },
  "api/PLplot.Native.env0.html": {
    "href": "api/PLplot.Native.env0.html",
    "title": "Method env0 | PLplot for .NET",
    "keywords": "Method env0 env0(Double, Double, Double, Double, AxesScale, AxisBox) plenv0: Same as plenv but if in multiplot mode does not advance the subpage, instead clears it Declaration public static void env0(Double xmin, Double xmax, Double ymin, Double ymax, AxesScale just, AxisBox axis) Parameters Type Name Description Double xmin Value of x at left-hand edge of window (in world coordinates). Double xmax Value of x at right-hand edge of window (in world coordinates). Double ymin Value of y at bottom edge of window (in world coordinates). Double ymax Value of y at top edge of window (in world coordinates). AxesScale just Controls how the axes will be scaled: -1: the scales will not be set, the user must set up the scale before calling plenv0 using plsvpa, plvasp or other. 0: the x and y axes are scaled independently to use as much of the screen as possible. 1: the scales of the x and y axes are made equal. 2: the axis of the x and y axes are made equal, and the plot box will be square. AxisBox axis Controls drawing of the box around the plot: -2: draw no box, no tick marks, no numeric tick labels, no axes. -1: draw box only. 0: draw box, ticks, and numeric tick labels. 1: also draw coordinate axes at x=0 and y=0. 2: also draw a grid at major tick positions in both coordinates. 3: also draw a grid at minor tick positions in both coordinates. 10: same as 0 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 11: same as 1 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 12: same as 2 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 13: same as 3 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 20: same as 0 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 21: same as 1 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 22: same as 2 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 23: same as 3 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 30: same as 0 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 31: same as 1 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 32: same as 2 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 33: same as 3 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 40: same as 0 except date / time x labels. 41: same as 1 except date / time x labels. 42: same as 2 except date / time x labels. 43: same as 3 except date / time x labels. 50: same as 0 except date / time y labels. 51: same as 1 except date / time y labels. 52: same as 2 except date / time y labels. 53: same as 3 except date / time y labels. 60: same as 0 except date / time x and y labels. 61: same as 1 except date / time x and y labels. 62: same as 2 except date / time x and y labels. 63: same as 3 except date / time x and y labels. 70: same as 0 except custom x and y labels. 71: same as 1 except custom x and y labels. 72: same as 2 except custom x and y labels. 73: same as 3 except custom x and y labels. Remarks Sets up plotter environment for simple graphs by calling pladv and setting up viewport and window to sensible default values. plenv0 leaves a standard margin (left-hand margin of eight character heights, and a margin around the other three sides of five character heights) around most graphs for axis labels and a title. When these defaults are not suitable, use the individual routines plvpas, plvpor, or plvasp for setting up the viewport, plwind for defining the window, and plbox for drawing the box."
  },
  "api/PLplot.Native.eop.html": {
    "href": "api/PLplot.Native.eop.html",
    "title": "Method eop | PLplot for .NET",
    "keywords": "Method eop eop() pleop: Eject current page Declaration public static void eop() Remarks Clears the graphics screen of an interactive device, or ejects a page on a plotter. See plbop for more information."
  },
  "api/PLplot.Native.errx.html": {
    "href": "api/PLplot.Native.errx.html",
    "title": "Method errx | PLplot for .NET",
    "keywords": "Method errx | Improve this Doc View Source errx(Double[], Double[], Double[]) plerrx: Draw error bars in x direction Declaration public static void errx(Double[] xmin, Double[] xmax, Double[] y) Parameters Type Name Description Double [] xmin A vector containing the x coordinates of the left-hand endpoints of the error bars. Double [] xmax A vector containing the x coordinates of the right-hand endpoints of the error bars. Double [] y A vector containing the y coordinates of the error bars. Remarks Draws a set of n error bars in x direction, the i'th error bar extending from xmin[i] to xmax[i] at y coordinate y[i]. The terminals of the error bars are of length equal to the minor tick length (settable using plsmin)."
  },
  "api/PLplot.Native.erry.html": {
    "href": "api/PLplot.Native.erry.html",
    "title": "Method erry | PLplot for .NET",
    "keywords": "Method erry | Improve this Doc View Source erry(Double[], Double[], Double[]) plerry: Draw error bars in the y direction Declaration public static void erry(Double[] x, Double[] ymin, Double[] ymax) Parameters Type Name Description Double [] x A vector containing the x coordinates of the error bars. Double [] ymin A vector containing the y coordinates of the lower endpoints of the error bars. Double [] ymax A vector containing the y coordinates of the upper endpoints of the error bars. Remarks Draws a set of n error bars in the y direction, the i'th error bar extending from ymin[i] to ymax[i] at x coordinate x[i]. The terminals of the error bars are of length equal to the minor tick length (settable using plsmin)."
  },
  "api/PLplot.Native.famadv.html": {
    "href": "api/PLplot.Native.famadv.html",
    "title": "Method famadv | PLplot for .NET",
    "keywords": "Method famadv famadv() plfamadv: Advance to the next family file on the next new page Declaration public static void famadv() Remarks Advance to the next family file on the next new page."
  },
  "api/PLplot.Native.fill.html": {
    "href": "api/PLplot.Native.fill.html",
    "title": "Method fill | PLplot for .NET",
    "keywords": "Method fill | Improve this Doc View Source fill(Double[], Double[]) plfill: Draw filled polygon Declaration public static void fill(Double[] x, Double[] y) Parameters Type Name Description Double [] x A vector containing the x coordinates of vertices. Double [] y A vector containing the y coordinates of vertices. Remarks Fills the polygon defined by the n points (x[i], y[i]) using the pattern defined by plpsty or plpat. The default fill style is a solid fill. The routine will automatically close the polygon between the last and first vertices. If multiple closed polygons are passed in x and y then plfill will fill in between them."
  },
  "api/PLplot.Native.fill3.html": {
    "href": "api/PLplot.Native.fill3.html",
    "title": "Method fill3 | PLplot for .NET",
    "keywords": "Method fill3 | Improve this Doc View Source fill3(Double[], Double[], Double[]) plfill3: Draw filled polygon in 3D Declaration public static void fill3(Double[] x, Double[] y, Double[] z) Parameters Type Name Description Double [] x A vector containing the x coordinates of vertices. Double [] y A vector containing the y coordinates of vertices. Double [] z A vector containing the z coordinates of vertices. Remarks Fills the 3D polygon defined by the n points in the x, y, and z vectors using the pattern defined by plpsty or plpat. The routine will automatically close the polygon between the last and first vertices. If multiple closed polygons are passed in x, y, and z then plfill3 will fill in between them."
  },
  "api/PLplot.Native.flush.html": {
    "href": "api/PLplot.Native.flush.html",
    "title": "Method flush | PLplot for .NET",
    "keywords": "Method flush flush() plflush: Flushes the output stream Declaration public static void flush() Remarks Flushes the output stream. Use sparingly, if at all."
  },
  "api/PLplot.Native.font.html": {
    "href": "api/PLplot.Native.font.html",
    "title": "Method font | PLplot for .NET",
    "keywords": "Method font font(FontFlag) plfont: Set font Declaration public static void font(FontFlag ifont) Parameters Type Name Description FontFlag ifont Specifies the font: 1: Sans serif font (simplest and fastest) 2: Serif font 3: Italic font 4: Script font Remarks Sets the font used for subsequent text and symbols. For devices that still use Hershey fonts this routine has no effect unless the Hershey fonts with extended character set are loaded (see plfontld). For unicode-aware devices that use system fonts instead of Hershey fonts, this routine calls the plsfci routine with argument set up appropriately for the various cases below. However, this method of specifying the font for unicode-aware devices is deprecated, and the much more flexible method of calling plsfont directly is recommended instead (where plsfont provides a user-friendly interface to plsfci),"
  },
  "api/PLplot.Native.fontld.html": {
    "href": "api/PLplot.Native.fontld.html",
    "title": "Method fontld | PLplot for .NET",
    "keywords": "Method fontld fontld(Int32) plfontld: Load Hershey fonts Declaration public static void fontld(Int32 fnt) Parameters Type Name Description Int32 fnt Specifies the type of Hershey fonts to load. A zero value specifies Hershey fonts with the standard character set and a non-zero value (the default assumed if plfontld is never called) specifies Hershey fonts with the extended character set. Remarks Loads the Hershey fonts used for text and symbols. This routine may be called before or after initializing PLplot. If not explicitly called before PLplot initialization, then by default that initialization loads Hershey fonts with the extended character set. This routine only has a practical effect for devices that still use Hershey fonts (as opposed to modern devices that use unicode-aware system fonts instead of Hershey fonts)."
  },
  "api/PLplot.Native.gchr.html": {
    "href": "api/PLplot.Native.gchr.html",
    "title": "Method gchr | PLplot for .NET",
    "keywords": "Method gchr gchr(out Double, out Double) plgchr: Get character default height and current (scaled) height Declaration public static void gchr(out Double p_def, out Double p_ht) Parameters Type Name Description Double p_def Returned value of the default character height (mm). Double p_ht Returned value of the scaled character height (mm). Remarks Get character default height and current (scaled) height."
  },
  "api/PLplot.Native.gcol0.html": {
    "href": "api/PLplot.Native.gcol0.html",
    "title": "Method gcol0 | PLplot for .NET",
    "keywords": "Method gcol0 gcol0(Int32, out Int32, out Int32, out Int32) plgcol0: Returns 8-bit RGB values for given color index from cmap0 Declaration public static void gcol0(Int32 icol0, out Int32 r, out Int32 g, out Int32 b) Parameters Type Name Description Int32 icol0 Index of desired cmap0 color. Int32 r Returned value of the 8-bit red value. Int32 g Returned value of the 8-bit green value. Int32 b Returned value of the 8-bit blue value. Remarks Returns 8-bit RGB values (0-255) for given color from cmap0 (see ). Values are negative if an invalid color id is given."
  },
  "api/PLplot.Native.gcol0a.html": {
    "href": "api/PLplot.Native.gcol0a.html",
    "title": "Method gcol0a | PLplot for .NET",
    "keywords": "Method gcol0a gcol0a(Int32, out Int32, out Int32, out Int32, out Double) plgcol0a: Returns 8-bit RGB values and PLFLT alpha transparency value for given color index from cmap0 Declaration public static void gcol0a(Int32 icol0, out Int32 r, out Int32 g, out Int32 b, out Double alpha) Parameters Type Name Description Int32 icol0 Index of desired cmap0 color. Int32 r Returned value of the red intensity in the range from 0 to 255. Int32 g Returned value of the green intensity in the range from 0 to 255. Int32 b Returned value of the blue intensity in the range from 0 to 255. Double alpha Returned value of the alpha transparency in the range from (0.0-1.0). Remarks Returns 8-bit RGB values (0-255) and PLFLT alpha transparency value (0.0-1.0) for given color from cmap0 (see ). Values are negative if an invalid color id is given."
  },
  "api/PLplot.Native.gcolbg.html": {
    "href": "api/PLplot.Native.gcolbg.html",
    "title": "Method gcolbg | PLplot for .NET",
    "keywords": "Method gcolbg gcolbg(out Int32, out Int32, out Int32) plgcolbg: Returns the background color (cmap0[0]) by 8-bit RGB value Declaration public static void gcolbg(out Int32 r, out Int32 g, out Int32 b) Parameters Type Name Description Int32 r Returned value of the red intensity in the range from 0 to 255. Int32 g Returned value of the green intensity in the range from 0 to 255. Int32 b Returned value of the blue intensity in the range from 0 to 255. Remarks Returns the background color (cmap0[0]) by 8-bit RGB value."
  },
  "api/PLplot.Native.gcolbga.html": {
    "href": "api/PLplot.Native.gcolbga.html",
    "title": "Method gcolbga | PLplot for .NET",
    "keywords": "Method gcolbga gcolbga(out Int32, out Int32, out Int32, out Double) plgcolbga: Returns the background color (cmap0[0]) by 8-bit RGB value and PLFLT alpha transparency value Declaration public static void gcolbga(out Int32 r, out Int32 g, out Int32 b, out Double alpha) Parameters Type Name Description Int32 r Returned value of the red intensity in the range from 0 to 255. Int32 g Returned value of the green intensity in the range from 0 to 255. Int32 b Returned value of the blue intensity in the range from 0 to 255. Double alpha Returned value of the alpha transparency in the range (0.0-1.0). Remarks Returns the background color (cmap0[0]) by 8-bit RGB value and PLFLT alpha transparency value."
  },
  "api/PLplot.Native.gcompression.html": {
    "href": "api/PLplot.Native.gcompression.html",
    "title": "Method gcompression | PLplot for .NET",
    "keywords": "Method gcompression gcompression(out Int32) plgcompression: Get the current device-compression setting Declaration public static void gcompression(out Int32 compression) Parameters Type Name Description Int32 compression Returned value of the compression setting for the current device. Remarks Get the current device-compression setting. This parameter is only used for drivers that provide compression."
  },
  "api/PLplot.Native.gdev.html": {
    "href": "api/PLplot.Native.gdev.html",
    "title": "Method gdev | PLplot for .NET",
    "keywords": "Method gdev | Improve this Doc View Source gdev(out String) plgdev: Get the current device (keyword) name Declaration public static void gdev(out string p_dev) Parameters Type Name Description System.String p_dev Returned ascii character string (with preallocated length of 80 characters or more) containing the device (keyword) name. Remarks Get the current device (keyword) name. Note: you must have allocated space for this (80 characters is safe)."
  },
  "api/PLplot.Native.gdidev.html": {
    "href": "api/PLplot.Native.gdidev.html",
    "title": "Method gdidev | PLplot for .NET",
    "keywords": "Method gdidev gdidev(out Double, out Double, out Double, out Double) plgdidev: Get parameters that define current device-space window Declaration public static void gdidev(out Double p_mar, out Double p_aspect, out Double p_jx, out Double p_jy) Parameters Type Name Description Double p_mar Returned value of the relative margin width. Double p_aspect Returned value of the aspect ratio. Double p_jx Returned value of the relative justification in x. Double p_jy Returned value of the relative justification in y. Remarks Get relative margin width, aspect ratio, and relative justification that define current device-space window. If plsdidev has not been called the default values pointed to by p_mar, p_aspect, p_jx, and p_jy will all be 0."
  },
  "api/PLplot.Native.gdiori.html": {
    "href": "api/PLplot.Native.gdiori.html",
    "title": "Method gdiori | PLplot for .NET",
    "keywords": "Method gdiori gdiori(out Double) plgdiori: Get plot orientation Declaration public static void gdiori(out Double p_rot) Parameters Type Name Description Double p_rot Returned value of the orientation parameter. Remarks Get plot orientation parameter which is multiplied by 90deg to obtain the angle of rotation. Note, arbitrary rotation parameters such as 0.2 (corresponding to 18deg) are possible, but the usual values for the rotation parameter are 0., 1., 2., and 3. corresponding to 0deg (landscape mode), 90deg (portrait mode), 180deg (seascape mode), and 270deg (upside-down mode). If plsdiori has not been called the default value pointed to by p_rot will be 0."
  },
  "api/PLplot.Native.gdiplt.html": {
    "href": "api/PLplot.Native.gdiplt.html",
    "title": "Method gdiplt | PLplot for .NET",
    "keywords": "Method gdiplt gdiplt(out Double, out Double, out Double, out Double) plgdiplt: Get parameters that define current plot-space window Declaration public static void gdiplt(out Double p_xmin, out Double p_ymin, out Double p_xmax, out Double p_ymax) Parameters Type Name Description Double p_xmin Returned value of the relative minimum in x. Double p_ymin Returned value of the relative minimum in y. Double p_xmax Returned value of the relative maximum in x. Double p_ymax Returned value of the relative maximum in y. Remarks Get relative minima and maxima that define current plot-space window. If plsdiplt has not been called the default values pointed to by p_xmin, p_ymin, p_xmax, and p_ymax will be 0., 0., 1., and 1."
  },
  "api/PLplot.Native.gdrawmode.html": {
    "href": "api/PLplot.Native.gdrawmode.html",
    "title": "Method gdrawmode | PLplot for .NET",
    "keywords": "Method gdrawmode gdrawmode() plgdrawmode: Get drawing mode (depends on device support!) Declaration public static DrawMode gdrawmode() Returns Type Description DrawMode Remarks Get drawing mode. Note only one device driver (cairo) currently supports this at the moment, and for that case the PLINT value returned by this function is one of PL_DRAWMODE_DEFAULT, PL_DRAWMODE_REPLACE, PL_DRAWMODE_XOR, or PL_DRAWMODE_UNKNOWN. This function returns PL_DRAWMODE_UNKNOWN for the rest of the device drivers. See also plsdrawmode."
  },
  "api/PLplot.Native.gfci.html": {
    "href": "api/PLplot.Native.gfci.html",
    "title": "Method gfci | PLplot for .NET",
    "keywords": "Method gfci gfci(out FCI) plgfci: Get FCI (font characterization integer) Declaration public static void gfci(out FCI p_fci) Parameters Type Name Description FCI p_fci Returned value of the current FCI value. Remarks Gets information about the current font using the FCI approach. See for more information."
  },
  "api/PLplot.Native.gfam.html": {
    "href": "api/PLplot.Native.gfam.html",
    "title": "Method gfam | PLplot for .NET",
    "keywords": "Method gfam gfam(out Int32, out Int32, out Int32) plgfam: Get family file parameters Declaration public static void gfam(out Int32 p_fam, out Int32 p_num, out Int32 p_bmax) Parameters Type Name Description Int32 p_fam Returned value of the current family flag value. If nonzero, familying is enabled for the current device. Int32 p_num Returned value of the current family file number. Int32 p_bmax Returned value of the maximum file size (in bytes) for a family file. Remarks Gets information about current family file, if familying is enabled. See for more information."
  },
  "api/PLplot.Native.gfnam.html": {
    "href": "api/PLplot.Native.gfnam.html",
    "title": "Method gfnam | PLplot for .NET",
    "keywords": "Method gfnam | Improve this Doc View Source gfnam(out String) plgfnam: Get output file name Declaration public static void gfnam(out string fnam) Parameters Type Name Description System.String fnam Returned ascii character string (with preallocated length of 80 characters or more) containing the file name. Remarks Gets the current output file name, if applicable."
  },
  "api/PLplot.Native.gfont.html": {
    "href": "api/PLplot.Native.gfont.html",
    "title": "Method gfont | PLplot for .NET",
    "keywords": "Method gfont gfont(out FontFamily, out FontStyle, out FontWeight) plgfont: Get family, style and weight of the current font Declaration public static void gfont(out FontFamily p_family, out FontStyle p_style, out FontWeight p_weight) Parameters Type Name Description FontFamily p_family Returned value of the current font family. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_SANS, PL_FCI_SERIF, PL_FCI_MONO, PL_FCI_SCRIPT and PL_FCI_SYMBOL. If p_family is NULL then the font family is not returned. FontStyle p_style Returned value of the current font style. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_UPRIGHT, PL_FCI_ITALIC and PL_FCI_OBLIQUE. If p_style is NULL then the font style is not returned. FontWeight p_weight Returned value of the current font weight. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_MEDIUM and PL_FCI_BOLD. If p_weight is NULL then the font weight is not returned. Remarks Gets information about current font. See for more information on font selection."
  },
  "api/PLplot.Native.glevel.html": {
    "href": "api/PLplot.Native.glevel.html",
    "title": "Method glevel | PLplot for .NET",
    "keywords": "Method glevel glevel(out RunLevel) plglevel: Get the (current) run level Declaration public static void glevel(out RunLevel p_level) Parameters Type Name Description RunLevel p_level Returned value of the run level. Remarks Get the (current) run level. Valid settings are: 0, uninitialized 1, initialized 2, viewport defined 3, world coordinates defined"
  },
  "api/PLplot.Native.gpage.html": {
    "href": "api/PLplot.Native.gpage.html",
    "title": "Method gpage | PLplot for .NET",
    "keywords": "Method gpage gpage(out Double, out Double, out Int32, out Int32, out Int32, out Int32) plgpage: Get page parameters Declaration public static void gpage(out Double p_xp, out Double p_yp, out Int32 p_xleng, out Int32 p_yleng, out Int32 p_xoff, out Int32 p_yoff) Parameters Type Name Description Double p_xp Returned value of the number of pixels/inch (DPI) in x. Double p_yp Returned value of the number of pixels/inch (DPI) in y. Int32 p_xleng Returned value of the x page length. Int32 p_yleng Returned value of the y page length. Int32 p_xoff Returned value of the x page offset. Int32 p_yoff Returned value of the y page offset. Remarks Gets the current page configuration. The length and offset values are expressed in units that are specific to the current driver. For instance: screen drivers will usually interpret them as number of pixels, whereas printer drivers will usually use mm."
  },
  "api/PLplot.Native.gra.html": {
    "href": "api/PLplot.Native.gra.html",
    "title": "Method gra | PLplot for .NET",
    "keywords": "Method gra gra() plgra: Switch to graphics screen Declaration public static void gra() Remarks Sets an interactive device to graphics mode, used in conjunction with pltext to allow graphics and text to be interspersed. On a device which supports separate text and graphics windows, this command causes control to be switched to the graphics window. If already in graphics mode, this command is ignored. It is also ignored on devices which only support a single window or use a different method for shifting focus. See also pltext."
  },
  "api/PLplot.Native.gradient.html": {
    "href": "api/PLplot.Native.gradient.html",
    "title": "Method gradient | PLplot for .NET",
    "keywords": "Method gradient | Improve this Doc View Source gradient(Double[], Double[], Double) plgradient: Draw linear gradient inside polygon Declaration public static void gradient(Double[] x, Double[] y, Double angle) Parameters Type Name Description Double [] x A vector containing the x coordinates of vertices. Double [] y A vector containing the y coordinates of vertices. Double angle Angle (degrees) of gradient vector from x axis. Remarks Draw a linear gradient using cmap1 inside the polygon defined by the n points (x[i], y[i]). Interpretation of the polygon is the same as for plfill. The polygon coordinates and the gradient angle are all expressed in world coordinates. The angle from the x axis for both the rotated coordinate system and the gradient vector is specified by angle. The magnitude of the gradient vector is the difference between the maximum and minimum values of x for the vertices in the rotated coordinate system. The origin of the gradient vector can be interpreted as being anywhere on the line corresponding to the minimum x value for the vertices in the rotated coordinate system. The distance along the gradient vector is linearly transformed to the independent variable of color map 1 which ranges from 0. at the tail of the gradient vector to 1. at the head of the gradient vector. What is drawn is the RGBA color corresponding to the independent variable of cmap1. For more information about cmap1 (see )."
  },
  "api/PLplot.Native.griddata.html": {
    "href": "api/PLplot.Native.griddata.html",
    "title": "Method griddata | PLplot for .NET",
    "keywords": "Method griddata | Improve this Doc View Source griddata(Double[], Double[], Double[], Double[], Double[], Double[,], Grid, Double) plgriddata: Grid data from irregularly sampled data Declaration public static void griddata(Double[] x, Double[] y, Double[] z, Double[] xg, Double[] yg, Double[, ] zg, Grid type, Double data) Parameters Type Name Description Double [] x The input x vector. Double [] y The input y vector. Double [] z The input z vector. Each triple x[i], y[i], z[i] represents one data sample coordinate. Double [] xg A vector that specifies the grid spacing in the x direction. Usually xg has nptsx equally spaced values from the minimum to the maximum values of the x input vector. Double [] yg A vector that specifies the grid spacing in the y direction. Similar to the xg parameter. Double [,] zg The matrix of interpolated results where data lies in the grid specified by xg and yg. Therefore the zg matrix must be dimensioned nptsx by nptsy. Grid type The type of grid interpolation algorithm to use, which can be: GRID_CSA: Bivariate Cubic Spline approximation GRID_DTLI: Delaunay Triangulation Linear Interpolation GRID_NNI: Natural Neighbors Interpolation GRID_NNIDW: Nearest Neighbors Inverse Distance Weighted GRID_NNLI: Nearest Neighbors Linear Interpolation GRID_NNAIDW: Nearest Neighbors Around Inverse Distance Weighted For details of the algorithms read the source file plgridd.c. Double data Some gridding algorithms require extra data, which can be specified through this argument. Currently, for algorithm: GRID_NNIDW, data specifies the number of neighbors to use, the lower the value, the noisier (more local) the approximation is. GRID_NNLI, data specifies what a thin triangle is, in the range [1. .. 2.]. High values enable the usage of very thin triangles for interpolation, possibly resulting in error in the approximation. GRID_NNI, only weights greater than data will be accepted. If 0, all weights will be accepted. Remarks Real world data is frequently irregularly sampled, but PLplot 3D plots require data organized as a grid, i.e., with x sample point values independent of y coordinate and vice versa. This function takes irregularly sampled data from the x[npts], y[npts], and z[npts] vectors; reads the desired grid location from the input vectors xg[nptsx] and yg[nptsy]; and returns the interpolated result on that grid using the output matrix zg[nptsx][nptsy]. The algorithm used to interpolate the data to the grid is specified with the argument type which can have one parameter specified in argument data."
  },
  "api/PLplot.Native.gspa.html": {
    "href": "api/PLplot.Native.gspa.html",
    "title": "Method gspa | PLplot for .NET",
    "keywords": "Method gspa gspa(out Double, out Double, out Double, out Double) plgspa: Get current subpage parameters Declaration public static void gspa(out Double xmin, out Double xmax, out Double ymin, out Double ymax) Parameters Type Name Description Double xmin Returned value of the position of the left hand edge of the subpage in millimeters. Double xmax Returned value of the position of the right hand edge of the subpage in millimeters. Double ymin Returned value of the position of the bottom edge of the subpage in millimeters. Double ymax Returned value of the position of the top edge of the subpage in millimeters. Remarks Gets the size of the current subpage in millimeters measured from the bottom left hand corner of the output device page or screen. Can be used in conjunction with plsvpa for setting the size of a viewport in absolute coordinates (millimeters)."
  },
  "api/PLplot.Native.gstrm.html": {
    "href": "api/PLplot.Native.gstrm.html",
    "title": "Method gstrm | PLplot for .NET",
    "keywords": "Method gstrm gstrm(out Int32) plgstrm: Get current stream number Declaration public static void gstrm(out Int32 p_strm) Parameters Type Name Description Int32 p_strm Returned value of the current stream value. Remarks Gets the number of the current output stream. See also plsstrm."
  },
  "api/PLplot.Native.gver.html": {
    "href": "api/PLplot.Native.gver.html",
    "title": "Method gver | PLplot for .NET",
    "keywords": "Method gver | Improve this Doc View Source gver(out String) plgver: Get the current library version number Declaration public static void gver(out string p_ver) Parameters Type Name Description System.String p_ver Returned ascii character string (with preallocated length of 80 characters or more) containing the PLplot version number. Remarks Get the current library version number. Note: you must have allocated space for this (80 characters is safe)."
  },
  "api/PLplot.Native.gvpd.html": {
    "href": "api/PLplot.Native.gvpd.html",
    "title": "Method gvpd | PLplot for .NET",
    "keywords": "Method gvpd gvpd(out Double, out Double, out Double, out Double) plgvpd: Get viewport limits in normalized device coordinates Declaration public static void gvpd(out Double p_xmin, out Double p_xmax, out Double p_ymin, out Double p_ymax) Parameters Type Name Description Double p_xmin Returned value of the lower viewport limit of the normalized device coordinate in x. Double p_xmax Returned value of the upper viewport limit of the normalized device coordinate in x. Double p_ymin Returned value of the lower viewport limit of the normalized device coordinate in y. Double p_ymax Returned value of the upper viewport limit of the normalized device coordinate in y. Remarks Get viewport limits in normalized device coordinates."
  },
  "api/PLplot.Native.gvpw.html": {
    "href": "api/PLplot.Native.gvpw.html",
    "title": "Method gvpw | PLplot for .NET",
    "keywords": "Method gvpw gvpw(out Double, out Double, out Double, out Double) plgvpw: Get viewport limits in world coordinates Declaration public static void gvpw(out Double p_xmin, out Double p_xmax, out Double p_ymin, out Double p_ymax) Parameters Type Name Description Double p_xmin Returned value of the lower viewport limit of the world coordinate in x. Double p_xmax Returned value of the upper viewport limit of the world coordinate in x. Double p_ymin Returned value of the lower viewport limit of the world coordinate in y. Double p_ymax Returned value of the upper viewport limit of the world coordinate in y. Remarks Get viewport limits in world coordinates."
  },
  "api/PLplot.Native.gxax.html": {
    "href": "api/PLplot.Native.gxax.html",
    "title": "Method gxax | PLplot for .NET",
    "keywords": "Method gxax gxax(out Int32, out Int32) plgxax: Get x axis parameters Declaration public static void gxax(out Int32 p_digmax, out Int32 p_digits) Parameters Type Name Description Int32 p_digmax Returned value of the maximum number of digits for the x axis. If nonzero, the printed label has been switched to a floating-point representation when the number of digits exceeds this value. Int32 p_digits Returned value of the actual number of digits for the numeric labels (x axis) from the last plot. Remarks Returns current values of the p_digmax and p_digits flags for the x axis. p_digits is updated after the plot is drawn, so this routine should only be called after the call to plbox (or plbox3) is complete. See for more information."
  },
  "api/PLplot.Native.gyax.html": {
    "href": "api/PLplot.Native.gyax.html",
    "title": "Method gyax | PLplot for .NET",
    "keywords": "Method gyax gyax(out Int32, out Int32) plgyax: Get y axis parameters Declaration public static void gyax(out Int32 p_digmax, out Int32 p_digits) Parameters Type Name Description Int32 p_digmax Returned value of the maximum number of digits for the y axis. If nonzero, the printed label has been switched to a floating-point representation when the number of digits exceeds this value. Int32 p_digits Returned value of the actual number of digits for the numeric labels (y axis) from the last plot. Remarks Identical to plgxax, except that arguments are flags for y axis. See the description of plgxax for more detail."
  },
  "api/PLplot.Native.gzax.html": {
    "href": "api/PLplot.Native.gzax.html",
    "title": "Method gzax | PLplot for .NET",
    "keywords": "Method gzax gzax(out Int32, out Int32) plgzax: Get z axis parameters Declaration public static void gzax(out Int32 p_digmax, out Int32 p_digits) Parameters Type Name Description Int32 p_digmax Returned value of the maximum number of digits for the z axis. If nonzero, the printed label has been switched to a floating-point representation when the number of digits exceeds this value. Int32 p_digits Returned value of the actual number of digits for the numeric labels (z axis) from the last plot. Remarks Identical to plgxax, except that arguments are flags for z axis. See the description of plgxax for more detail."
  },
  "api/PLplot.Native.hist.html": {
    "href": "api/PLplot.Native.hist.html",
    "title": "Method hist | PLplot for .NET",
    "keywords": "Method hist | Improve this Doc View Source hist(Double[], Double, Double, Int32, Hist) plhist: Plot a histogram from unbinned data Declaration public static void hist(Double[] data, Double datmin, Double datmax, Int32 nbin, Hist opt) Parameters Type Name Description Double [] data A vector containing the values of the n data points. Double datmin Left-hand edge of lowest-valued bin. Double datmax Right-hand edge of highest-valued bin. Int32 nbin Number of (equal-sized) bins into which to divide the interval xmin to xmax. Hist opt Is a combination of several flags: opt=PL_HIST_DEFAULT: The axes are automatically rescaled to fit the histogram data, the outer bins are expanded to fill up the entire x-axis, data outside the given extremes are assigned to the outer bins and bins of zero height are simply drawn. opt=PL_HIST_NOSCALING|...: The existing axes are not rescaled to fit the histogram data, without this flag, plenv is called to set the world coordinates. opt=PL_HIST_IGNORE_OUTLIERS|...: Data outside the given extremes are not taken into account. This option should probably be combined with opt=PL_HIST_NOEXPAND|..., so as to properly present the data. opt=PL_HIST_NOEXPAND|...: The outer bins are drawn with equal size as the ones inside. opt=PL_HIST_NOEMPTY|...: Bins with zero height are not drawn (there is a gap for such bins). Remarks Plots a histogram from n data points stored in the data vector. This routine bins the data into nbin bins equally spaced between datmin and datmax, and calls plbin to draw the resulting histogram. Parameter opt allows, among other things, the histogram either to be plotted in an existing window or causes plhist to call plenv with suitable limits before plotting the histogram."
  },
  "api/PLplot.Native.hlsrgb.html": {
    "href": "api/PLplot.Native.hlsrgb.html",
    "title": "Method hlsrgb | PLplot for .NET",
    "keywords": "Method hlsrgb hlsrgb(Double, Double, Double, out Double, out Double, out Double) plhlsrgb: Convert HLS color to RGB Declaration public static void hlsrgb(Double h, Double l, Double s, out Double p_r, out Double p_g, out Double p_b) Parameters Type Name Description Double h Hue in degrees (0.0-360.0) on the color cylinder. Double l Lightness expressed as a fraction (0.0-1.0) of the axis of the color cylinder. Double s Saturation expressed as a fraction (0.0-1.0) of the radius of the color cylinder. Double p_r Returned value of the red intensity (0.0-1.0) of the color. Double p_g Returned value of the green intensity (0.0-1.0) of the color. Double p_b Returned value of the blue intensity (0.0-1.0) of the color. Remarks Convert HLS color coordinates to RGB."
  },
  "api/PLplot.Native.init.html": {
    "href": "api/PLplot.Native.init.html",
    "title": "Method init | PLplot for .NET",
    "keywords": "Method init init() plinit: Initialize PLplot Declaration public static void init() Remarks Initializing the plotting package. The program prompts for the device keyword or number of the desired output device. Hitting a RETURN in response to the prompt is the same as selecting the first device. plinit will issue no prompt if either the device was specified previously (via command line flag, the plsetopt function, or the plsdev function), or if only one device is enabled when PLplot is installed. If subpages have been specified, the output device is divided into nx by ny subpages, each of which may be used independently. If plinit is called again during a program, the previously opened file will be closed. The subroutine pladv is used to advance from one subpage to the next."
  },
  "api/PLplot.Native.join.html": {
    "href": "api/PLplot.Native.join.html",
    "title": "Method join | PLplot for .NET",
    "keywords": "Method join join(Double, Double, Double, Double) pljoin: Draw a line between two points Declaration public static void join(Double x1, Double y1, Double x2, Double y2) Parameters Type Name Description Double x1 x coordinate of first point. Double y1 y coordinate of first point. Double x2 x coordinate of second point. Double y2 y coordinate of second point. Remarks Joins the point (x1, y1) to (x2, y2)."
  },
  "api/PLplot.Native.lab.html": {
    "href": "api/PLplot.Native.lab.html",
    "title": "Method lab | PLplot for .NET",
    "keywords": "Method lab lab(String, String, String) pllab: Simple routine to write labels Declaration public static void lab(string xlabel, string ylabel, string tlabel) Parameters Type Name Description System.String xlabel A UTF-8 character string specifying the label for the x axis. System.String ylabel A UTF-8 character string specifying the label for the y axis. System.String tlabel A UTF-8 character string specifying the title of the plot. Remarks Routine for writing simple labels. Use plmtex for more complex labels."
  },
  "api/PLplot.Native.legend.html": {
    "href": "api/PLplot.Native.legend.html",
    "title": "Method legend | PLplot for .NET",
    "keywords": "Method legend | Improve this Doc View Source legend(out Double, out Double, Legend, Position, Double, Double, Double, Int32, Int32, LineStyle, Int32, Int32, LegendEntry[], Double, Double, Double, Double, Int32[], String[], Int32[], Pattern[], Double[], Double[], Int32[], LineStyle[], Double[], Int32[], Double[], Int32[], String[]) pllegend: Plot legend using discretely annotated filled boxes, lines, and/or lines of symbols Declaration public static void legend(out Double p_legend_width, out Double p_legend_height, Legend opt, Position position, Double x, Double y, Double plot_width, Int32 bg_color, Int32 bb_color, LineStyle bb_style, Int32 nrow, Int32 ncolumn, LegendEntry[] opt_array, Double text_offset, Double text_scale, Double text_spacing, Double text_justification, Int32[] text_colors, String[] text, Int32[] box_colors, Pattern[] box_patterns, Double[] box_scales, Double[] box_line_widths, Int32[] line_colors, LineStyle[] line_styles, Double[] line_widths, Int32[] symbol_colors, Double[] symbol_scales, Int32[] symbol_numbers, String[] symbols) Parameters Type Name Description Double p_legend_width Returned value of the legend width in adopted coordinates. This quantity is calculated from plot_width, text_offset, ncolumn (possibly modified inside the routine depending on nlegend and nrow), and the length (calculated internally) of the longest text string. Double p_legend_height Returned value of the legend height in adopted coordinates. This quantity is calculated from text_scale, text_spacing, and nrow (possibly modified inside the routine depending on nlegend and nrow). Legend opt opt contains bits controlling the overall legend. If the PL_LEGEND_TEXT_LEFT bit is set, put the text area on the left of the legend and the plotted area on the right. Otherwise, put the text area on the right of the legend and the plotted area on the left. If the PL_LEGEND_BACKGROUND bit is set, plot a (semitransparent) background for the legend. If the PL_LEGEND_BOUNDING_BOX bit is set, plot a bounding box for the legend. If the PL_LEGEND_ROW_MAJOR bit is set and (both of the possibly internally transformed) nrow gt 1 and ncolumn gt 1, then plot the resulting array of legend entries in row-major order. Otherwise, plot the legend entries in column-major order. Position position position contains bits which control the overall position of the legend and the definition of the adopted coordinates used for positions just like what is done for the position argument for plcolorbar. However, note that the defaults for the position bits (see below) are different than the plcolorbar case. The combination of the PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, PL_POSITION_BOTTOM, PL_POSITION_INSIDE, and PL_POSITION_OUTSIDE bits specifies one of the 16 possible standard positions (the 4 corners and centers of the 4 sides for both the inside and outside cases) of the legend relative to the adopted coordinate system. The corner positions are specified by the appropriate combination of two of the PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, and PL_POSITION_BOTTOM bits while the sides are specified by a single value of one of those bits. The adopted coordinates are normalized viewport coordinates if the PL_POSITION_VIEWPORT bit is set or normalized subpage coordinates if the PL_POSITION_SUBPAGE bit is set. Default position bits: If none of PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, or PL_POSITION_BOTTOM are set, then use the combination of PL_POSITION_RIGHT and PL_POSITION_TOP. If neither of PL_POSITION_INSIDE or PL_POSITION_OUTSIDE is set, use PL_POSITION_INSIDE. If neither of PL_POSITION_VIEWPORT or PL_POSITION_SUBPAGE is set, use PL_POSITION_VIEWPORT. Double x X offset of the legend position in adopted coordinates from the specified standard position of the legend. For positive x, the direction of motion away from the standard position is inward/outward from the standard corner positions or standard left or right positions if the PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position. For the standard top or bottom positions, the direction of motion is toward positive X. Double y Y offset of the legend position in adopted coordinates from the specified standard position of the legend. For positive y, the direction of motion away from the standard position is inward/outward from the standard corner positions or standard top or bottom positions if the PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position. For the standard left or right positions, the direction of motion is toward positive Y. Double plot_width Horizontal width in adopted coordinates of the plot area (where the colored boxes, lines, and/or lines of symbols are drawn) of the legend. Int32 bg_color The cmap0 color of the background for the legend (PL_LEGEND_BACKGROUND). Int32 bb_color The cmap0 color of the bounding-box line for the legend (PL_LEGEND_BOUNDING_BOX). LineStyle bb_style The pllsty style number for the bounding-box line for the legend (PL_LEGEND_BACKGROUND). Int32 nrow The cmap0 index of the background color for the legend (PL_LEGEND_BACKGROUND). Int32 ncolumn The cmap0 index of the background color for the legend (PL_LEGEND_BACKGROUND). LegendEntry [] opt_array A vector of nlegend values of options to control each individual plotted area corresponding to a legend entry. If the PL_LEGEND_NONE bit is set, then nothing is plotted in the plotted area. If the PL_LEGEND_COLOR_BOX, PL_LEGEND_LINE, and/or PL_LEGEND_SYMBOL bits are set, the area corresponding to a legend entry is plotted with a colored box; a line; and/or a line of symbols. Double text_offset Offset of the text area from the plot area in units of character width. N.B. The total horizontal width of the legend in adopted coordinates is calculated internally from plot_width (see above), text_offset, and length (calculated internally) of the longest text string. Double text_scale Character height scale for text annotations. N.B. The total vertical height of the legend in adopted coordinates is calculated internally from nlegend (see above), text_scale, and text_spacing (see below). Double text_spacing Vertical spacing in units of the character height from one legend entry to the next. N.B. The total vertical height of the legend in adopted coordinates is calculated internally from nlegend (see above), text_scale (see above), and text_spacing. Double text_justification Justification parameter used for text justification. The most common values of text_justification are 0., 0.5, or 1. corresponding to a text that is left justified, centred, or right justified within the text area, but other values are allowed as well. Int32 [] text_colors A vector containing nlegend cmap0 text colors. String [] text A vector of nlegend UTF-8 character strings containing the legend annotations. Int32 [] box_colors A vector containing nlegend cmap0 colors for the discrete colored boxes (PL_LEGEND_COLOR_BOX). Pattern [] box_patterns A vector containing nlegend patterns (plpsty indices) for the discrete colored boxes (PL_LEGEND_COLOR_BOX). Double [] box_scales A vector containing nlegend scales (units of fraction of character height) for the height of the discrete colored boxes (PL_LEGEND_COLOR_BOX). Double [] box_line_widths A vector containing nlegend line widths for the patterns specified by box_patterns (PL_LEGEND_COLOR_BOX). Int32 [] line_colors A vector containing nlegend cmap0 line colors (PL_LEGEND_LINE). LineStyle [] line_styles A vector containing nlegend line styles (plsty indices) (PL_LEGEND_LINE). Double [] line_widths A vector containing nlegend line widths (PL_LEGEND_LINE). Int32 [] symbol_colors A vector containing nlegend cmap0 symbol colors (PL_LEGEND_SYMBOL). Double [] symbol_scales A vector containing nlegend scale values for the symbol height (PL_LEGEND_SYMBOL). Int32 [] symbol_numbers A vector containing nlegend numbers of symbols to be drawn across the width of the plotted area (PL_LEGEND_SYMBOL). String [] symbols A vector of nlegend UTF-8 character strings containing the legend symbols. (PL_LEGEND_SYMBOL). Remarks Routine for creating a discrete plot legend with a plotted filled box, line, and/or line of symbols for each annotated legend entry. (See plcolorbar for similar functionality for creating continuous color bars.) The arguments of pllegend provide control over the location and size of the legend as well as the location and characteristics of the elements (most of which are optional) within that legend. The resulting legend is clipped at the boundaries of the current subpage. (N.B. the adopted coordinate system used for some of the parameters is defined in the documentation of the position parameter.)"
  },
  "api/PLplot.Native.colorbar.html": {
    "href": "api/PLplot.Native.colorbar.html",
    "title": "Method colorbar | PLplot for .NET",
    "keywords": "Method colorbar | Improve this Doc View Source colorbar(out Double, out Double, Colorbar, Position, Double, Double, Double, Double, Int32, Int32, Int32, Double, Double, Int32, Double, ColorbarLabel[], String[], String[], Double[], Int32[], Double[,]) plcolorbar: Plot color bar for image, shade or gradient plots Declaration public static void colorbar(out Double p_colorbar_width, out Double p_colorbar_height, Colorbar opt, Position position, Double x, Double y, Double x_length, Double y_length, Int32 bg_color, Int32 bb_color, Int32 bb_style, Double low_cap_color, Double high_cap_color, Int32 cont_color, Double cont_width, ColorbarLabel[] label_opts, String[] labels, String[] axis_opts, Double[] ticks, Int32[] sub_ticks, Double[, ] values) Parameters Type Name Description Double p_colorbar_width Returned value of the labelled and decorated color bar width in adopted coordinates. Double p_colorbar_height Returned value of the labelled and decorated color bar height in adopted coordinates. Colorbar opt opt contains bits controlling the overall color bar. The orientation (direction of the maximum value) of the color bar is specified with PL_ORIENT_RIGHT, PL_ORIENT_TOP, PL_ORIENT_LEFT, or PL_ORIENT_BOTTOM. If none of these bits are specified, the default orientation is toward the top if the colorbar is placed on the left or right of the viewport or toward the right if the colorbar is placed on the top or bottom of the viewport. If the PL_COLORBAR_BACKGROUND bit is set, plot a (semitransparent) background for the color bar. If the PL_COLORBAR_BOUNDING_BOX bit is set, plot a bounding box for the color bar. The type of color bar must be specified with one of PL_COLORBAR_IMAGE, PL_COLORBAR_SHADE, or PL_COLORBAR_GRADIENT. If more than one of those bits is set only the first one in the above list is honored. The position of the (optional) label/title can be specified with PL_LABEL_RIGHT, PL_LABEL_TOP, PL_LABEL_LEFT, or PL_LABEL_BOTTOM. If no label position bit is set then no label will be drawn. If more than one of this list of bits is specified, only the first one on the list is honored. End-caps for the color bar can added with PL_COLORBAR_CAP_LOW and PL_COLORBAR_CAP_HIGH. If a particular color bar cap option is not specified then no cap will be drawn for that end. As a special case for PL_COLORBAR_SHADE, the option PL_COLORBAR_SHADE_LABEL can be specified. If this option is provided then any tick marks and tick labels will be placed at the breaks between shaded segments. TODO: This should be expanded to support custom placement of tick marks and tick labels at custom value locations for any color bar type. Position position position contains bits which control the overall position of the color bar and the definition of the adopted coordinates used for positions just like what is done for the position argument for pllegend. However, note that the defaults for the position bits (see below) are different than the pllegend case. The combination of the PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, PL_POSITION_BOTTOM, PL_POSITION_INSIDE, and PL_POSITION_OUTSIDE bits specifies one of the 16 possible standard positions (the 4 corners and centers of the 4 sides for both the inside and outside cases) of the color bar relative to the adopted coordinate system. The corner positions are specified by the appropriate combination of two of the PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, and PL_POSITION_BOTTOM bits while the sides are specified by a single value of one of those bits. The adopted coordinates are normalized viewport coordinates if the PL_POSITION_VIEWPORT bit is set or normalized subpage coordinates if the PL_POSITION_SUBPAGE bit is set. Default position bits: If none of PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, or PL_POSITION_BOTTOM are set, then use PL_POSITION_RIGHT. If neither of PL_POSITION_INSIDE or PL_POSITION_OUTSIDE is set, use PL_POSITION_OUTSIDE. If neither of PL_POSITION_VIEWPORT or PL_POSITION_SUBPAGE is set, use PL_POSITION_VIEWPORT. Double x X offset of the color bar position in adopted coordinates from the specified standard position of the color bar. For positive x, the direction of motion away from the standard position is inward/outward from the standard corner positions or standard left or right positions if the PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position. For the standard top or bottom positions, the direction of motion is toward positive X. Double y Y offset of the color bar position in adopted coordinates from the specified standard position of the color bar. For positive y, the direction of motion away from the standard position is inward/outward from the standard corner positions or standard top or bottom positions if the PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position. For the standard left or right positions, the direction of motion is toward positive Y. Double x_length Length of the body of the color bar in the X direction in adopted coordinates. Double y_length Length of the body of the color bar in the Y direction in adopted coordinates. Int32 bg_color The cmap0 color of the background for the color bar (PL_COLORBAR_BACKGROUND). Int32 bb_color The cmap0 color of the bounding-box line for the color bar (PL_COLORBAR_BOUNDING_BOX). Int32 bb_style The pllsty style number for the bounding-box line for the color bar (PL_COLORBAR_BACKGROUND). Double low_cap_color The cmap1 color of the low-end color bar cap, if it is drawn (PL_COLORBAR_CAP_LOW). Double high_cap_color The cmap1 color of the high-end color bar cap, if it is drawn (PL_COLORBAR_CAP_HIGH). Int32 cont_color The cmap0 contour color for PL_COLORBAR_SHADE plots. This is passed directly to plshades, so it will be interpreted according to the design of plshades. Double cont_width Contour width for PL_COLORBAR_SHADE plots. This is passed directly to plshades, so it will be interpreted according to the design of plshades. ColorbarLabel [] label_opts A vector of options for each of n_labels labels. String [] labels A vector of n_labels UTF-8 character strings containing the labels for the color bar. Ignored if no label position is specified with one of the PL_COLORBAR_LABEL_RIGHT, PL_COLORBAR_LABEL_TOP, PL_COLORBAR_LABEL_LEFT, or PL_COLORBAR_LABEL_BOTTOM bits in the corresponding label_opts field. String [] axis_opts A vector of n_axes ascii character strings containing options (interpreted as for plbox) for the color bar's axis definitions. Double [] ticks A vector of n_axes values of the spacing of the major tick marks (interpreted as for plbox) for the color bar's axis definitions. Int32 [] sub_ticks A vector of n_axes values of the number of subticks (interpreted as for plbox) for the color bar's axis definitions. Double [,] values A matrix containing the numeric values for the data range represented by the color bar. For a row index of i_axis (where 0 lt i_axis lt n_axes), the number of elements in the row is specified by n_values[i_axis]. For PL_COLORBAR_IMAGE and PL_COLORBAR_GRADIENT the number of elements is 2, and the corresponding row elements of the values matrix are the minimum and maximum value represented by the colorbar. For PL_COLORBAR_SHADE, the number and values of the elements of a row of the values matrix is interpreted the same as the nlevel and clevel arguments of plshades. Remarks Routine for creating a continuous color bar for image, shade, or gradient plots. (See pllegend for similar functionality for creating legends with discrete elements). The arguments of plcolorbar provide control over the location and size of the color bar as well as the location and characteristics of the elements (most of which are optional) within that color bar. The resulting color bar is clipped at the boundaries of the current subpage. (N.B. the adopted coordinate system used for some of the parameters is defined in the documentation of the position parameter.)"
  },
  "api/PLplot.Native.lightsource.html": {
    "href": "api/PLplot.Native.lightsource.html",
    "title": "Method lightsource | PLplot for .NET",
    "keywords": "Method lightsource lightsource(Double, Double, Double) pllightsource: Sets the 3D position of the light source Declaration public static void lightsource(Double x, Double y, Double z) Parameters Type Name Description Double x X-coordinate of the light source. Double y Y-coordinate of the light source. Double z Z-coordinate of the light source. Remarks Sets the 3D position of the light source for use with plsurf3d and plsurf3dl"
  },
  "api/PLplot.Native.line.html": {
    "href": "api/PLplot.Native.line.html",
    "title": "Method line | PLplot for .NET",
    "keywords": "Method line | Improve this Doc View Source line(Double[], Double[]) plline: Draw a line Declaration public static void line(Double[] x, Double[] y) Parameters Type Name Description Double [] x A vector containing the x coordinates of points. Double [] y A vector containing the y coordinates of points. Remarks Draws line defined by n points in x and y."
  },
  "api/PLplot.Native.line3.html": {
    "href": "api/PLplot.Native.line3.html",
    "title": "Method line3 | PLplot for .NET",
    "keywords": "Method line3 | Improve this Doc View Source line3(Double[], Double[], Double[]) plline3: Draw a line in 3 space Declaration public static void line3(Double[] x, Double[] y, Double[] z) Parameters Type Name Description Double [] x A vector containing the x coordinates of points. Double [] y A vector containing the y coordinates of points. Double [] z A vector containing the z coordinates of points. Remarks Draws line in 3 space defined by n points in x, y, and z. You must first set up the viewport, the 2d viewing window (in world coordinates), and the 3d normalized coordinate box. See x18c.c for more info."
  },
  "api/PLplot.Native.lsty.html": {
    "href": "api/PLplot.Native.lsty.html",
    "title": "Method lsty | PLplot for .NET",
    "keywords": "Method lsty lsty(LineStyle) pllsty: Select line style Declaration public static void lsty(LineStyle lin) Parameters Type Name Description LineStyle lin Integer value between 1 and 8. Line style 1 is a continuous line, line style 2 is a line with short dashes and gaps, line style 3 is a line with long dashes and gaps, line style 4 has long dashes and short gaps and so on. Remarks This sets the line style according to one of eight predefined patterns (also see plstyl)."
  },
  "api/PLplot.Native.map.html": {
    "href": "api/PLplot.Native.map.html",
    "title": "Method map | PLplot for .NET",
    "keywords": "Method map map(MapFunc, String, Double, Double, Double, Double) plmap: Plot continental outline or shapefile data in world coordinates Declaration public static void map(MapFunc mapform, string name, Double minx, Double maxx, Double miny, Double maxy) Parameters Type Name Description MapFunc mapform A user supplied function to transform the original map data coordinates to a new coordinate system. The PLplot-supplied map data is provided as latitudes and longitudes; other Shapefile data may be provided in other coordinate systems as can be found in their .prj plain text files. For example, by using this transform we can change from a longitude, latitude coordinate to a polar stereographic projection. Initially, x[0]..[n-1] are the original x coordinates (longitudes for the PLplot-supplied data) and y[0]..y[n-1] are the corresponding y coordinates (latitudes for the PLplot supplied data). After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the type of map plotted. This is either one of the PLplot built-in maps or the file name of a set of Shapefile files without the file extensions. For the PLplot built-in maps the possible values are: \"globe\" -- continental outlines \"usa\" -- USA and state boundaries \"cglobe\" -- continental outlines and countries \"usaglobe\" -- USA, state boundaries and continental outlines Double minx The minimum x value of map elements to be drawn. For the built in maps this is a measure of longitude. For Shapefiles the units must match the projection. The value of minx must be less than the value of maxx. Specifying a useful limit for these limits provides a useful optimization for complex or detailed maps. Double maxx The maximum x value of map elements to be drawn Double miny The minimum y value of map elements to be drawn. For the built in maps this is a measure of latitude. For Shapefiles the units must match the projection. The value of miny must be less than the value of maxy. Double maxy The maximum y value of map elements to be drawn. Remarks Plots continental outlines or shapefile data in world coordinates. A demonstration of how to use this function to create different projections can be found in examples/c/x19c. PLplot is provided with basic coastal outlines and USA state borders. These can be used irrespective of whether Shapefile support is built into PLplot. With Shapefile support this function can also be used with user Shapefiles, in which case it will plot the entire contents of a Shapefile joining each point of each Shapefile element with a line. Shapefiles have become a popular standard for geographical data and data in this format can be easily found from a number of online sources. Shapefile data is actually provided as three or more files with the same filename, but different extensions. The .shp and .shx files are required for plotting Shapefile data with PLplot."
  },
  "api/PLplot.Native.mapline.html": {
    "href": "api/PLplot.Native.mapline.html",
    "title": "Method mapline | PLplot for .NET",
    "keywords": "Method mapline | Improve this Doc View Source mapline(MapFunc, String, Double, Double, Double, Double, Int32[]) plmapline: Plot all or a subset of Shapefile data using lines in world coordinates Declaration public static void mapline(MapFunc mapform, string name, Double minx, Double maxx, Double miny, Double maxy, Int32[] plotentries) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinates given in the shapefile into a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the file name of a set of Shapefile files without the file extension. Double minx The minimum x value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example longitude or distance. The value of minx must be less than the value of maxx. Double maxx The maximum x value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Double miny The minimum y value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example latitude or distance. The value of miny must be less than the value of maxy. Double maxy The maximum y value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Int32 [] plotentries A vector containing the zero-based indices of the Shapefile elements which will be drawn. Setting plotentries to NULL will plot all elements of the Shapefile. Remarks Plot all or a subset of Shapefile data using lines in world coordinates. Our 19th standard example demonstrates how to use this function. This function plots data from a Shapefile using lines as in plmap, however it also has the option of also only drawing specified elements from the Shapefile. The vector of indices of the required elements are passed as a function argument. The Shapefile data should include a metadata file (extension.dbf) listing all items within the Shapefile. This file can be opened by most popular spreadsheet programs and can be used to decide which indices to pass to this function."
  },
  "api/PLplot.Native.mapstring.html": {
    "href": "api/PLplot.Native.mapstring.html",
    "title": "Method mapstring | PLplot for .NET",
    "keywords": "Method mapstring | Improve this Doc View Source mapstring(MapFunc, String, String, Double, Double, Double, Double, Int32[]) plmapstring: Plot all or a subset of Shapefile data using strings or points in world coordinates Declaration public static void mapstring(MapFunc mapform, string name, string str, Double minx, Double maxx, Double miny, Double maxy, Int32[] plotentries) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinates given in the shapefile into a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the file name of a set of Shapefile files without the file extension. System.String str Double minx The minimum x value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example longitude or distance. The value of minx must be less than the value of maxx. Double maxx The maximum x value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Double miny The minimum y value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example latitude or distance. The value of miny must be less than the value of maxy. Double maxy The maximum y value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Int32 [] plotentries A vector containing the zero-based indices of the Shapefile elements which will be drawn. Setting plotentries to NULL will plot all elements of the Shapefile. Remarks As per plmapline, however the items are plotted as strings or points in the same way as plstring."
  },
  "api/PLplot.Native.maptex.html": {
    "href": "api/PLplot.Native.maptex.html",
    "title": "Method maptex | PLplot for .NET",
    "keywords": "Method maptex maptex(MapFunc, String, Double, Double, Double, String, Double, Double, Double, Double, Int32) plmaptex: Draw text at points defined by Shapefile data in world coordinates Declaration public static void maptex(MapFunc mapform, string name, Double dx, Double dy, Double just, string text, Double minx, Double maxx, Double miny, Double maxy, Int32 plotentry) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinates given in the shapefile into a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the file name of a set of Shapefile files without the file extension. Double dx Used to define the slope of the texts which is dy/dx. Double dy Used to define the slope of the texts which is dy/dx. Double just Set the justification of the text. The value given will be the fraction of the distance along the string that sits at the given point. 0.0 gives left aligned text, 0.5 gives centralized text and 1.0 gives right aligned text. System.String text A UTF-8 character string to be drawn. Double minx The minimum x value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example longitude or distance. The value of minx must be less than the value of maxx. Double maxx The maximum x value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Double miny The minimum y value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example latitude or distance. The value of miny must be less than the value of maxy. Double maxy The maximum y value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Int32 plotentry An integer indicating which text string of the Shapefile (zero indexed) will be drawn. Remarks As per plmapline, however the items are plotted as text in the same way as plptex."
  },
  "api/PLplot.Native.mapfill.html": {
    "href": "api/PLplot.Native.mapfill.html",
    "title": "Method mapfill | PLplot for .NET",
    "keywords": "Method mapfill | Improve this Doc View Source mapfill(MapFunc, String, Double, Double, Double, Double, Int32[]) plmapfill: Plot all or a subset of Shapefile data, filling the polygons Declaration public static void mapfill(MapFunc mapform, string name, Double minx, Double maxx, Double miny, Double maxy, Int32[] plotentries) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinates given in the shapefile into a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the file name of a set of Shapefile files without the file extension. Double minx The minimum x value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example longitude or distance. The value of minx must be less than the value of maxx. Double maxx The maximum x value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Double miny The minimum y value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example latitude or distance. The value of miny must be less than the value of maxy. Double maxy The maximum y value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Int32 [] plotentries A vector containing the zero-based indices of the Shapefile elements which will be drawn. Setting plotentries to NULL will plot all elements of the Shapefile. Remarks As per plmapline, however the items are filled in the same way as plfill."
  },
  "api/PLplot.Native.meridians.html": {
    "href": "api/PLplot.Native.meridians.html",
    "title": "Method meridians | PLplot for .NET",
    "keywords": "Method meridians meridians(MapFunc, Double, Double, Double, Double, Double, Double) plmeridians: Plot latitude and longitude lines Declaration public static void meridians(MapFunc mapform, Double dlong, Double dlat, Double minlong, Double maxlong, Double minlat, Double maxlat) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinate longitudes and latitudes to a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. Double dlong The interval in degrees at which the longitude lines are to be plotted. Double dlat The interval in degrees at which the latitude lines are to be plotted. Double minlong The value of the longitude on the left side of the plot. The value of minlong must be less than the value of maxlong, and the quantity maxlong-minlong must be less than or equal to 360. Double maxlong The value of the longitude on the right side of the plot. Double minlat The minimum latitude to be plotted on the background. One can always use -90.0 as the boundary outside the plot window will be automatically eliminated. However, the program will be faster if one can reduce the size of the background plotted. Double maxlat The maximum latitudes to be plotted on the background. One can always use 90.0 as the boundary outside the plot window will be automatically eliminated. Remarks Displays latitude and longitude on the current plot. The lines are plotted in the current color and line style."
  },
  "api/PLplot.Native.mesh.html": {
    "href": "api/PLplot.Native.mesh.html",
    "title": "Method mesh | PLplot for .NET",
    "keywords": "Method mesh | Improve this Doc View Source mesh(Double[], Double[], Double[,], Mesh) plmesh: Plot surface mesh Declaration public static void mesh(Double[] x, Double[] y, Double[, ] z, Mesh opt) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. Mesh opt Determines the way in which the surface is represented: opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. Remarks Plots a surface mesh within the environment set up by plw3d. The surface is defined by the matrix z[nx][ny] , the point z[i][j] being the value of the function at (x[i], y[j]). Note that the points in vectors x and y do not need to be equally spaced, but must be stored in ascending order. The parameter opt controls the way in which the surface is displayed. For further details see ."
  },
  "api/PLplot.Native.meshc.html": {
    "href": "api/PLplot.Native.meshc.html",
    "title": "Method meshc | PLplot for .NET",
    "keywords": "Method meshc | Improve this Doc View Source meshc(Double[], Double[], Double[,], MeshContour, Double[]) plmeshc: Magnitude colored plot surface mesh with contour Declaration public static void meshc(Double[] x, Double[] y, Double[, ] z, MeshContour opt, Double[] clevel) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. MeshContour opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. DRAW_LINEXY + MAG_COLOR opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. opt=MAG_COLOR : Each line in the mesh is colored according to the z value being plotted. The color is used from the current cmap1. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. Double [] clevel A vector containing the contour levels. Remarks A more powerful form of plmesh: the surface mesh can be colored accordingly to the current z value being plotted, a contour plot can be drawn at the base XY plane, and a curtain can be drawn between the plotted function border and the base XY plane."
  },
  "api/PLplot.Native.mkstrm.html": {
    "href": "api/PLplot.Native.mkstrm.html",
    "title": "Method mkstrm | PLplot for .NET",
    "keywords": "Method mkstrm mkstrm(out Int32) plmkstrm: Creates a new stream and makes it the default Declaration public static void mkstrm(out Int32 p_strm) Parameters Type Name Description Int32 p_strm Returned value of the stream number of the created stream. Remarks Creates a new stream and makes it the default. Differs from using plsstrm, in that a free stream number is found, and returned. Unfortunately, I have to start at stream 1 and work upward, since stream 0 is preallocated. One of the big flaws in the PLplot API is that no initial, library-opening call is required. So stream 0 must be preallocated, and there is no simple way of determining whether it is already in use or not."
  },
  "api/PLplot.Native.mtex.html": {
    "href": "api/PLplot.Native.mtex.html",
    "title": "Method mtex | PLplot for .NET",
    "keywords": "Method mtex mtex(String, Double, Double, Double, String) plmtex: Write text relative to viewport boundaries Declaration public static void mtex(string side, Double disp, Double pos, Double just, string text) Parameters Type Name Description System.String side One string from Side . Double disp Position of the reference point of string, measured outwards from the specified viewport edge in units of the current character height. Use negative disp to write within the viewport. Double pos Position of the reference point of string along the specified edge, expressed as a fraction of the length of the edge. Double just Specifies the position of the string relative to its reference point. If just=0. , the reference point is at the left and if just=1. , it is at the right of the string. Other values of just give intermediate justifications. System.String text A UTF-8 character string to be written out. Remarks Writes text at a specified position relative to the viewport boundaries. Text may be written inside or outside the viewport, but is clipped at the subpage boundaries. The reference point of a string lies along a line passing through the string at half the height of a capital letter. The position of the reference point along this line is determined by just, and the position of the reference point relative to the viewport is set by disp and pos."
  },
  "api/PLplot.Native.mtex3.html": {
    "href": "api/PLplot.Native.mtex3.html",
    "title": "Method mtex3 | PLplot for .NET",
    "keywords": "Method mtex3 mtex3(String, Double, Double, Double, String) plmtex3: Write text relative to viewport boundaries in 3D plots Declaration public static void mtex3(string side, Double disp, Double pos, Double just, string text) Parameters Type Name Description System.String side One or more strings concatenated from Side3 . Double disp Position of the reference point of string, measured outwards from the specified viewport edge in units of the current character height. Use negative disp to write within the viewport. Double pos Position of the reference point of string along the specified edge, expressed as a fraction of the length of the edge. Double just Specifies the position of the string relative to its reference point. If just=0. , the reference point is at the left and if just=1. , it is at the right of the string. Other values of just give intermediate justifications. System.String text A UTF-8 character string to be written out. Remarks Writes text at a specified position relative to the viewport boundaries. Text may be written inside or outside the viewport, but is clipped at the subpage boundaries. The reference point of a string lies along a line passing through the string at half the height of a capital letter. The position of the reference point along this line is determined by just, and the position of the reference point relative to the viewport is set by disp and pos."
  },
  "api/PLplot.Native.plot3d.html": {
    "href": "api/PLplot.Native.plot3d.html",
    "title": "Method plot3d | PLplot for .NET",
    "keywords": "Method plot3d | Improve this Doc View Source plot3d(Double[], Double[], Double[,], Mesh, Boolean) plot3d: Plot 3-d surface plot Declaration public static void plot3d(Double[] x, Double[] y, Double[, ] z, Mesh opt, Boolean side) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. Mesh opt Determines the way in which the surface is represented: opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. Boolean side Flag to indicate whether or not ``sides'' should be draw on the figure. If side is true sides are drawn, otherwise no sides are drawn. Remarks Plots a three-dimensional surface plot within the environment set up by plw3d. The surface is defined by the matrix z[nx][ny] , the point z[i][j] being the value of the function at (x[i],y[j]). Note that the points in vectors x and y do not need to be equally spaced, but must be stored in ascending order. The parameter opt controls the way in which the surface is displayed. For further details see . The only difference between plmesh and plot3d is that plmesh draws the bottom side of the surface, while plot3d only draws the surface as viewed from the top."
  },
  "api/PLplot.Native.plot3dc.html": {
    "href": "api/PLplot.Native.plot3dc.html",
    "title": "Method plot3dc | PLplot for .NET",
    "keywords": "Method plot3dc | Improve this Doc View Source plot3dc(Double[], Double[], Double[,], MeshContour, Double[]) plot3dc: Magnitude colored plot surface with contour Declaration public static void plot3dc(Double[] x, Double[] y, Double[, ] z, MeshContour opt, Double[] clevel) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. MeshContour opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. DRAW_LINEXY + MAG_COLOR opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. opt=MAG_COLOR : Each line in the mesh is colored according to the z value being plotted. The color is used from the current cmap1. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. Double [] clevel A vector containing the contour levels. Remarks Aside from dropping the side functionality this is a more powerful form of plot3d: the surface mesh can be colored accordingly to the current z value being plotted, a contour plot can be drawn at the base XY plane, and a curtain can be drawn between the plotted function border and the base XY plane. The arguments are identical to those of plmeshc. The only difference between plmeshc and plot3dc is that plmeshc draws the bottom side of the surface, while plot3dc only draws the surface as viewed from the top."
  },
  "api/PLplot.Native.plot3dcl.html": {
    "href": "api/PLplot.Native.plot3dcl.html",
    "title": "Method plot3dcl | PLplot for .NET",
    "keywords": "Method plot3dcl | Improve this Doc View Source plot3dcl(Double[], Double[], Double[,], MeshContour, Double[], Int32, Int32[], Int32[]) plot3dcl: Magnitude colored plot surface with contour for z[x][y] with y index limits Declaration public static void plot3dcl(Double[] x, Double[] y, Double[, ] z, MeshContour opt, Double[] clevel, Int32 indexxmin, Int32[] indexymin, Int32[] indexymax) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. MeshContour opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. DRAW_LINEXY + MAG_COLOR opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. opt=MAG_COLOR : Each line in the mesh is colored according to the z value being plotted. The color is used from the current cmap1. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. Double [] clevel A vector containing the contour levels. Int32 indexxmin The index value (which must be ≥ 0) that corresponds to the first x index where z is defined. Int32 [] indexymin A vector containing y index values which all must be ≥ 0. These values are the first y index where z is defined for a particular x index in the range from indexxmin to indexxmax - 1. The dimension of indexymin is indexxmax. Int32 [] indexymax A vector containing y index values which all must be ≤ ny. These values correspond (by convention) to one more than the last y index where z is defined for a particular x index in the range from indexxmin to indexxmax - 1. The dimension of indexymax is indexxmax. Remarks When the implementation is completed this variant of plot3dc (see that function's documentation for more details) should be suitable for the case where the area of the x, y coordinate grid where z is defined can be non-rectangular. The implementation is incomplete so the last 4 parameters of plot3dcl; indexxmin, indexxmax, indexymin, and indexymax; are currently ignored and the functionality is otherwise identical to that of plot3dc."
  },
  "api/PLplot.Native.pat.html": {
    "href": "api/PLplot.Native.pat.html",
    "title": "Method pat | PLplot for .NET",
    "keywords": "Method pat | Improve this Doc View Source pat(Int32[], Int32[]) plpat: Set area line fill pattern Declaration public static void pat(Int32[] inc, Int32[] del) Parameters Type Name Description Int32 [] inc A vector containing nlin values of the inclination in tenths of a degree. (Should be between -900 and 900). Int32 [] del A vector containing nlin values of the spacing in micrometers between the lines making up the pattern. Remarks Sets the area line fill pattern to be used, e.g., for calls to plfill. The pattern consists of 1 or 2 sets of parallel lines with specified inclinations and spacings. The arguments to this routine are the number of sets to use (1 or 2) followed by two vectors (with 1 or 2 elements) specifying the inclinations in tenths of a degree and the spacing in micrometers. (See also plpsty)"
  },
  "api/PLplot.Native.path.html": {
    "href": "api/PLplot.Native.path.html",
    "title": "Method path | PLplot for .NET",
    "keywords": "Method path path(Int32, Double, Double, Double, Double) plpath: Draw a line between two points, accounting for coordinate transforms Declaration public static void path(Int32 n, Double x1, Double y1, Double x2, Double y2) Parameters Type Name Description Int32 n number of points to use to approximate the path. Double x1 x coordinate of first point. Double y1 y coordinate of first point. Double x2 x coordinate of second point. Double y2 y coordinate of second point. Remarks Joins the point (x1, y1) to (x2, y2) . If a global coordinate transform is defined then the line is broken in to n segments to approximate the path. If no transform is defined then this simply acts like a call to pljoin."
  },
  "api/PLplot.Native.poin.html": {
    "href": "api/PLplot.Native.poin.html",
    "title": "Method poin | PLplot for .NET",
    "keywords": "Method poin | Improve this Doc View Source poin(Double[], Double[], Char) plpoin: Plot a glyph at the specified points Declaration public static void poin(Double[] x, Double[] y, char code) Parameters Type Name Description Double [] x A vector containing the x coordinates of points. Double [] y A vector containing the y coordinates of points. System.Char code Hershey symbol code (in \"ascii-indexed\" form with -1 lt= code lt= 127) corresponding to a glyph to be plotted at each of the n points. Remarks Plot a glyph at the specified points. (This function is largely superseded by plstring which gives access to many[!] more glyphs.) code=-1 means try to just draw a point. Right now it's just a move and a draw at the same place. Not ideal, since a sufficiently intelligent output device may optimize it away, or there may be faster ways of doing it. This is OK for now, though, and offers a 4X speedup over drawing a Hershey font \"point\" (which is actually diamond shaped and therefore takes 4 strokes to draw). If 0 lt code lt 32, then a useful (but small subset) of Hershey symbols is plotted. If 32 lt= code lt= 127 the corresponding printable ASCII character is plotted."
  },
  "api/PLplot.Native.poin3.html": {
    "href": "api/PLplot.Native.poin3.html",
    "title": "Method poin3 | PLplot for .NET",
    "keywords": "Method poin3 | Improve this Doc View Source poin3(Double[], Double[], Double[], Char) plpoin3: Plot a glyph at the specified 3D points Declaration public static void poin3(Double[] x, Double[] y, Double[] z, char code) Parameters Type Name Description Double [] x A vector containing the x coordinates of points. Double [] y A vector containing the y coordinates of points. Double [] z A vector containing the z coordinates of points. System.Char code Hershey symbol code (in \"ascii-indexed\" form with -1 lt= code lt= 127) corresponding to a glyph to be plotted at each of the n points. Remarks Plot a glyph at the specified 3D points. (This function is largely superseded by plstring3 which gives access to many[!] more glyphs.) Set up the call to this function similar to what is done for plline3. code=-1 means try to just draw a point. Right now it's just a move and a draw at the same place. Not ideal, since a sufficiently intelligent output device may optimize it away, or there may be faster ways of doing it. This is OK for now, though, and offers a 4X speedup over drawing a Hershey font \"point\" (which is actually diamond shaped and therefore takes 4 strokes to draw). If 0 lt code lt 32, then a useful (but small subset) of Hershey symbols is plotted. If 32 lt= code lt= 127 the corresponding printable ASCII character is plotted."
  },
  "api/PLplot.Native.poly3.html": {
    "href": "api/PLplot.Native.poly3.html",
    "title": "Method poly3 | PLplot for .NET",
    "keywords": "Method poly3 | Improve this Doc View Source poly3(Double[], Double[], Double[], Boolean[], Boolean) plpoly3: Draw a polygon in 3 space Declaration public static void poly3(Double[] x, Double[] y, Double[] z, Boolean[] draw, Boolean ifcc) Parameters Type Name Description Double [] x A vector containing n x coordinates of points. Double [] y A vector containing n y coordinates of points. Double [] z A vector containing n z coordinates of points. Boolean [] draw A vector containing n-1 Boolean values which control drawing the segments of the polygon. If draw[i] is true, then the polygon segment from index [i] to [i+1] is drawn, otherwise, not. Boolean ifcc If ifcc is true the directionality of the polygon is determined by assuming the points are laid out in a counter-clockwise order. Otherwise, the directionality of the polygon is determined by assuming the points are laid out in a clockwise order. Remarks Draws a polygon in 3 space defined by n points in x, y, and z. Setup like plline3, but differs from that function in that plpoly3 attempts to determine if the polygon is viewable depending on the order of the points within the vector and the value of ifcc. If the back of polygon is facing the viewer, then it isn't drawn. If this isn't what you want, then use plline3 instead."
  },
  "api/PLplot.Native.prec.html": {
    "href": "api/PLplot.Native.prec.html",
    "title": "Method prec | PLplot for .NET",
    "keywords": "Method prec prec(Int32, Int32) plprec: Set precision in numeric labels Declaration public static void prec(Int32 setp, Int32 prec) Parameters Type Name Description Int32 setp If setp is equal to 0 then PLplot automatically determines the number of places to use after the decimal point in numeric labels (like those used to label axes). If setp is 1 then prec sets the number of places. Int32 prec The number of characters to draw after the decimal point in numeric labels. Remarks Sets the number of places after the decimal point in numeric labels."
  },
  "api/PLplot.Native.psty.html": {
    "href": "api/PLplot.Native.psty.html",
    "title": "Method psty | PLplot for .NET",
    "keywords": "Method psty psty(Pattern) plpsty: Select area fill pattern Declaration public static void psty(Pattern patt) Parameters Type Name Description Pattern patt The desired pattern index. If patt is zero or less, then a solid fill is (normally, see qualifiers above) used. For patt in the range from 1 to 8 and assuming the driver has not supplied line fill capability itself (most deliberately do not so that line fill patterns look identical for those drivers), the patterns consist of (1) horizontal lines, (2) vertical lines, (3) lines at 45 degrees, (4) lines at -45 degrees, (5) lines at 30 degrees, (6) lines at -30 degrees, (7) both vertical and horizontal lines, and (8) lines at both 45 degrees and -45 degrees. Remarks If patt is zero or less use either a hardware solid fill if the drivers have that capability (virtually all do) or fall back to a software emulation of a solid fill using the eighth area line fill pattern. If 0 lt patt le 8, then select one of eight predefined area line fill patterns to use (see plpat if you desire other patterns)."
  },
  "api/PLplot.Native.ptex.html": {
    "href": "api/PLplot.Native.ptex.html",
    "title": "Method ptex | PLplot for .NET",
    "keywords": "Method ptex ptex(Double, Double, Double, Double, Double, String) plptex: Write text inside the viewport Declaration public static void ptex(Double x, Double y, Double dx, Double dy, Double just, string text) Parameters Type Name Description Double x x coordinate of reference point of string. Double y y coordinate of reference point of string. Double dx Together with dy, this specifies the inclination of the string. The baseline of the string is parallel to a line joining (x, y) to (x+dx, y+dy) . Double dy Together with dx, this specifies the inclination of the string. Double just Specifies the position of the string relative to its reference point. If just=0. , the reference point is at the left and if just=1. , it is at the right of the string. Other values of just give intermediate justifications. System.String text A UTF-8 character string to be written out. Remarks Writes text at a specified position and inclination within the viewport. Text is clipped at the viewport boundaries. The reference point of a string lies along a line passing through the string at half the height of a capital letter. The position of the reference point along this line is determined by just, the reference point is placed at world coordinates (x, y) within the viewport. The inclination of the string is specified in terms of differences of world coordinates making it easy to write text parallel to a line in a graph."
  },
  "api/PLplot.Native.cont.html": {
    "href": "api/PLplot.Native.cont.html",
    "title": "Method cont | PLplot for .NET",
    "keywords": "Method cont | Improve this Doc View Source cont(Double[,], Int32, Int32, Int32, Int32, Double[], TransformFunc) plcont: Contour plot Declaration public static void cont(Double[, ] f, Int32 kx, Int32 lx, Int32 ky, Int32 ly, Double[] clevel, TransformFunc pltr) Parameters Type Name Description Double [,] f A matrix containing data to be contoured. Int32 kx Start of x indices to consider Int32 lx End (exclusive) of x indices to consider Int32 ky Start of y indices to consider Int32 ly End (exclusive) of y indices to consider Double [] clevel A vector specifying the levels at which to draw contours. TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrix f and the world coordinates.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Draws a contour plot of the data in f[nx][ny], using the nlevel contour levels specified by clevel. Only the region of the matrix from kx to lx and from ky to ly is plotted out where all these index ranges are interpreted as one-based for historical reasons. A transformation routine pointed to by pltr with a generic pointer pltr_data for additional data required by the transformation routine is used to map indices within the matrix to the world coordinates."
  },
  "api/PLplot.Native.ptex3.html": {
    "href": "api/PLplot.Native.ptex3.html",
    "title": "Method ptex3 | PLplot for .NET",
    "keywords": "Method ptex3 ptex3(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, String) plptex3: Write text inside the viewport of a 3D plot Declaration public static void ptex3(Double wx, Double wy, Double wz, Double dx, Double dy, Double dz, Double sx, Double sy, Double sz, Double just, string text) Parameters Type Name Description Double wx x world coordinate of reference point of string. Double wy y world coordinate of reference point of string. Double wz z world coordinate of reference point of string. Double dx Together with dy and dz , this specifies the inclination of the string. The baseline of the string is parallel to a line joining (x, y, z) to (x+dx, y+dy, z+dz) . Double dy Together with dx and dz, this specifies the inclination of the string. Double dz Together with dx and dy, this specifies the inclination of the string. Double sx Together with sy and sz , this specifies the shear of the string. The string is sheared so that the characters are vertically parallel to a line joining (x, y, z) to (x+sx, y+sy, z+sz) . If sx = sy = sz = 0.) then the text is not sheared. Double sy Together with sx and sz, this specifies shear of the string. Double sz Together with sx and sy, this specifies shear of the string. Double just Specifies the position of the string relative to its reference point. If just=0. , the reference point is at the left and if just=1. , it is at the right of the string. Other values of just give intermediate justifications. System.String text A UTF-8 character string to be written out. Remarks Writes text at a specified position and inclination and with a specified shear within the viewport. Text is clipped at the viewport boundaries. The reference point of a string lies along a line passing through the string at half the height of a capital letter. The position of the reference point along this line is determined by just, and the reference point is placed at world coordinates (wx, wy, wz) within the viewport. The inclination and shear of the string is specified in terms of differences of world coordinates making it easy to write text parallel to a line in a graph."
  },
  "api/PLplot.Native.randd.html": {
    "href": "api/PLplot.Native.randd.html",
    "title": "Method randd | PLplot for .NET",
    "keywords": "Method randd randd() plrandd: Random number generator returning a real random number in the range [0,1] Declaration public static Double randd() Returns Type Description Double Remarks Random number generator returning a real random number in the range [0,1]. The generator is based on the Mersenne Twister. Most languages / compilers provide their own random number generator, and so this is provided purely for convenience and to give a consistent random number generator across all languages supported by PLplot. This is particularly useful for comparing results from the test suite of examples."
  },
  "api/PLplot.Native.replot.html": {
    "href": "api/PLplot.Native.replot.html",
    "title": "Method replot | PLplot for .NET",
    "keywords": "Method replot replot() plreplot: Replays contents of plot buffer to current device/file Declaration public static void replot() Remarks Replays contents of plot buffer to current device/file."
  },
  "api/PLplot.Native.rgbhls.html": {
    "href": "api/PLplot.Native.rgbhls.html",
    "title": "Method rgbhls | PLplot for .NET",
    "keywords": "Method rgbhls rgbhls(Double, Double, Double, out Double, out Double, out Double) plrgbhls: Convert RGB color to HLS Declaration public static void rgbhls(Double r, Double g, Double b, out Double p_h, out Double p_l, out Double p_s) Parameters Type Name Description Double r Red intensity (0.0-1.0) of the color. Double g Green intensity (0.0-1.0) of the color. Double b Blue intensity (0.0-1.0) of the color. Double p_h Returned value of the hue in degrees (0.0-360.0) on the color cylinder. Double p_l Returned value of the lightness expressed as a fraction (0.0-1.0) of the axis of the color cylinder. Double p_s Returned value of the saturation expressed as a fraction (0.0-1.0) of the radius of the color cylinder. Remarks Convert RGB color coordinates to HLS"
  },
  "api/PLplot.Native.schr.html": {
    "href": "api/PLplot.Native.schr.html",
    "title": "Method schr | PLplot for .NET",
    "keywords": "Method schr schr(Double, Double) plschr: Set character size Declaration public static void schr(Double def, Double scale) Parameters Type Name Description Double def The default height of a character in millimeters, should be set to zero if the default height is to remain unchanged. For rasterized drivers the dx and dy values specified in plspage are used to convert from mm to pixels (note the different unit systems used). This dpi aware scaling is not implemented for all drivers yet. Double scale Scale factor to be applied to default to get actual character height. Remarks This sets up the size of all subsequent characters drawn. The actual height of a character is the product of the default character size and a scaling factor."
  },
  "api/PLplot.Native.scmap0.html": {
    "href": "api/PLplot.Native.scmap0.html",
    "title": "Method scmap0 | PLplot for .NET",
    "keywords": "Method scmap0 | Improve this Doc View Source scmap0(Int32[], Int32[], Int32[]) plscmap0: Set cmap0 colors by 8-bit RGB values Declaration public static void scmap0(Int32[] r, Int32[] g, Int32[] b) Parameters Type Name Description Int32 [] r A vector containing unsigned 8-bit integers (0-255) representing the degree of red in the color. Int32 [] g A vector containing unsigned 8-bit integers (0-255) representing the degree of green in the color. Int32 [] b A vector containing unsigned 8-bit integers (0-255) representing the degree of blue in the color. Remarks Set cmap0 colors using 8-bit RGB values (see ). This sets the entire color map ndash only as many colors as specified will be allocated."
  },
  "api/PLplot.Native.scmap0a.html": {
    "href": "api/PLplot.Native.scmap0a.html",
    "title": "Method scmap0a | PLplot for .NET",
    "keywords": "Method scmap0a | Improve this Doc View Source scmap0a(Int32[], Int32[], Int32[], Double[]) plscmap0a: Set cmap0 colors by 8-bit RGB values and PLFLT alpha transparency value Declaration public static void scmap0a(Int32[] r, Int32[] g, Int32[] b, Double[] alpha) Parameters Type Name Description Int32 [] r A vector containing unsigned 8-bit integers (0-255) representing the degree of red in the color. Int32 [] g A vector containing unsigned 8-bit integers (0-255) representing the degree of green in the color. Int32 [] b A vector containing unsigned 8-bit integers (0-255) representing the degree of blue in the color. Double [] alpha A vector containing values (0.0-1.0) representing the alpha transparency of the color. Remarks Set cmap0 colors using 8-bit RGB values (see ) and PLFLT alpha transparency value. This sets the entire color map ndash only as many colors as specified will be allocated."
  },
  "api/PLplot.Native.scmap0n.html": {
    "href": "api/PLplot.Native.scmap0n.html",
    "title": "Method scmap0n | PLplot for .NET",
    "keywords": "Method scmap0n scmap0n(Int32) plscmap0n: Set number of colors in cmap0 Declaration public static void scmap0n(Int32 ncol0) Parameters Type Name Description Int32 ncol0 Number of colors that will be allocated in the cmap0 palette. If this number is zero or less, then the value from the previous call to plscmap0n is used and if there is no previous call, then a default value is used. Remarks Set number of colors in cmap0 (see ). Allocate (or reallocate) cmap0, and fill with default values for those colors not previously allocated. The first 16 default colors are given in the plcol0 documentation. For larger indices the default color is red."
  },
  "api/PLplot.Native.scmap1.html": {
    "href": "api/PLplot.Native.scmap1.html",
    "title": "Method scmap1 | PLplot for .NET",
    "keywords": "Method scmap1 | Improve this Doc View Source scmap1(Int32[], Int32[], Int32[]) plscmap1: Set opaque RGB cmap1 colors values Declaration public static void scmap1(Int32[] r, Int32[] g, Int32[] b) Parameters Type Name Description Int32 [] r A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of red in the color as a continuous function of the integer index of the vector. Int32 [] g A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of green in the color as a continuous function of the integer index of the vector. Int32 [] b A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of blue in the color as a continuous function of the integer index of the vector. Remarks Set opaque cmap1 colors (see ) using RGB vector values. This function also sets the number of cmap1 colors. N.B. Continuous cmap1 colors are indexed with a floating-point index in the range from 0.0-1.0 which is linearly transformed (e.g., by plcol1) to an integer index of these RGB vectors in the range from 0 to ncol1-1. So in order for this continuous color model to work properly, it is the responsibility of the user of plscmap1 to insure that these RGB vectors are continuous functions of their integer indices."
  },
  "api/PLplot.Native.scmap1a.html": {
    "href": "api/PLplot.Native.scmap1a.html",
    "title": "Method scmap1a | PLplot for .NET",
    "keywords": "Method scmap1a | Improve this Doc View Source scmap1a(Int32[], Int32[], Int32[], Double[]) plscmap1a: Set semitransparent cmap1 RGBA colors. Declaration public static void scmap1a(Int32[] r, Int32[] g, Int32[] b, Double[] alpha) Parameters Type Name Description Int32 [] r A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of red in the color as a continuous function of the integer index of the vector. Int32 [] g A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of green in the color as a continuous function of the integer index of the vector. Int32 [] b A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of blue in the color as a continuous function of the integer index of the vector. Double [] alpha A vector that represents (using PLFLT values in the range from 0.0-1.0 where 0.0 corresponds to completely transparent and 1.0 corresponds to completely opaque) the alpha transparency of the color as a continuous function of the integer index of the vector. Remarks Set semitransparent cmap1 colors (see ) using RGBA vector values. This function also sets the number of cmap1 colors. N.B. Continuous cmap1 colors are indexed with a floating-point index in the range from 0.0-1.0 which is linearly transformed (e.g., by plcol1) to an integer index of these RGBA vectors in the range from 0 to ncol1-1. So in order for this continuous color model to work properly, it is the responsibility of the user of plscmap1 to insure that these RGBA vectors are continuous functions of their integer indices."
  },
  "api/PLplot.Native.scmap1l.html": {
    "href": "api/PLplot.Native.scmap1l.html",
    "title": "Method scmap1l | PLplot for .NET",
    "keywords": "Method scmap1l | Improve this Doc View Source scmap1l(ColorSpace, Double[], Double[], Double[], Double[], Boolean[]) plscmap1l: Set cmap1 colors using a piece-wise linear relationship Declaration public static void scmap1l(ColorSpace itype, Double[] intensity, Double[] coord1, Double[] coord2, Double[] coord3, Boolean[] alt_hue_path) Parameters Type Name Description ColorSpace itype true: RGB, false: HLS. Double [] intensity A vector containing the cmap1 intensity index (0.0-1.0) in ascending order for each control point. Double [] coord1 A vector containing the first coordinate (H or R) for each control point. Double [] coord2 A vector containing the second coordinate (L or G) for each control point. Double [] coord3 A vector containing the third coordinate (S or B) for each control point. Boolean [] alt_hue_path A vector (with npts - 1 elements) containing the alternative interpolation method Boolean value for each control point interval. (alt_hue_path[i] refers to the interpolation interval between the i and i + 1 control points). Remarks Set cmap1 colors using a piece-wise linear relationship between the cmap1 intensity index (0.0-1.0) and position in HLS or RGB color space (see ). May be called at any time."
  },
  "api/PLplot.Native.scmap1la.html": {
    "href": "api/PLplot.Native.scmap1la.html",
    "title": "Method scmap1la | PLplot for .NET",
    "keywords": "Method scmap1la | Improve this Doc View Source scmap1la(ColorSpace, Double[], Double[], Double[], Double[], Double[], Boolean[]) plscmap1la: Set cmap1 colors and alpha transparency using a piece-wise linear relationship Declaration public static void scmap1la(ColorSpace itype, Double[] intensity, Double[] coord1, Double[] coord2, Double[] coord3, Double[] alpha, Boolean[] alt_hue_path) Parameters Type Name Description ColorSpace itype true: RGB, false: HLS. Double [] intensity A vector containing the cmap1 intensity index (0.0-1.0) in ascending order for each control point. Double [] coord1 A vector containing the first coordinate (H or R) for each control point. Double [] coord2 A vector containing the second coordinate (L or G) for each control point. Double [] coord3 A vector containing the third coordinate (S or B) for each control point. Double [] alpha A vector containing the alpha transparency value (0.0-1.0) for each control point. Boolean [] alt_hue_path A vector (with npts - 1 elements) containing the alternative interpolation method Boolean value for each control point interval. (alt_hue_path[i] refers to the interpolation interval between the i and i + 1 control points). Remarks This is a variant of plscmap1l that supports alpha channel transparency. It sets cmap1 colors using a piece-wise linear relationship between cmap1 intensity index (0.0-1.0) and position in HLS or RGB color space (see ) with alpha transparency value (0.0-1.0). It may be called at any time."
  },
  "api/PLplot.Native.scmap1n.html": {
    "href": "api/PLplot.Native.scmap1n.html",
    "title": "Method scmap1n | PLplot for .NET",
    "keywords": "Method scmap1n scmap1n(Int32) plscmap1n: Set number of colors in cmap1 Declaration public static void scmap1n(Int32 ncol1) Parameters Type Name Description Int32 ncol1 Number of colors that will be allocated in the cmap1 palette. If this number is zero or less, then the value from the previous call to plscmap1n is used and if there is no previous call, then a default value is used. Remarks Set number of colors in cmap1, (re-)allocate cmap1, and set default values if this is the first allocation (see )."
  },
  "api/PLplot.Native.scmap1_range.html": {
    "href": "api/PLplot.Native.scmap1_range.html",
    "title": "Method scmap1_range | PLplot for .NET",
    "keywords": "Method scmap1_range scmap1_range(Double, Double) plscmap1_range: Set the cmap1 argument range for continuous color plots Declaration public static void scmap1_range(Double min_color, Double max_color) Parameters Type Name Description Double min_color The minimum cmap1 argument. If less than 0.0, then 0.0 is used instead. Double max_color The maximum cmap1 argument. If greater than 1.0, then 1.0 is used instead. Remarks Set the cmap1 argument range for continuous color plots that corresponds to the range of data values. The maximum range corresponding to the entire cmap1 palette is 0.0-1.0, and the smaller the cmap1 argument range that is specified with this routine, the smaller the subset of the cmap1 color palette that is used to represent the continuous data being plotted. If min_color is greater than max_color or max_color is greater than 1.0 or min_color is less than 0.0 then no change is made to the cmap1 argument range. (Use plgcmap1_range to get the cmap1 argument range.)"
  },
  "api/PLplot.Native.gcmap1_range.html": {
    "href": "api/PLplot.Native.gcmap1_range.html",
    "title": "Method gcmap1_range | PLplot for .NET",
    "keywords": "Method gcmap1_range gcmap1_range(out Double, out Double) plgcmap1_range: Get the cmap1 argument range for continuous color plots Declaration public static void gcmap1_range(out Double min_color, out Double max_color) Parameters Type Name Description Double min_color Returned value of the current minimum cmap1 argument. Double max_color Returned value of the current maximum cmap1 argument. Remarks Get the cmap1 argument range for continuous color plots. (Use plscmap1_range to set the cmap1 argument range.)"
  },
  "api/PLplot.Native.scol0.html": {
    "href": "api/PLplot.Native.scol0.html",
    "title": "Method scol0 | PLplot for .NET",
    "keywords": "Method scol0 scol0(Int32, Int32, Int32, Int32) plscol0: Set 8-bit RGB values for given cmap0 color index Declaration public static void scol0(Int32 icol0, Int32 r, Int32 g, Int32 b) Parameters Type Name Description Int32 icol0 Color index. Must be less than the maximum number of colors (which is set by default, by plscmap0n, or even by plscmap0). Int32 r Unsigned 8-bit integer (0-255) representing the degree of red in the color. Int32 g Unsigned 8-bit integer (0-255) representing the degree of green in the color. Int32 b Unsigned 8-bit integer (0-255) representing the degree of blue in the color. Remarks Set 8-bit RGB values for given cmap0 (see ) index. Overwrites the previous color value for the given index and, thus, does not result in any additional allocation of space for colors."
  },
  "api/PLplot.Native.scol0a.html": {
    "href": "api/PLplot.Native.scol0a.html",
    "title": "Method scol0a | PLplot for .NET",
    "keywords": "Method scol0a scol0a(Int32, Int32, Int32, Int32, Double) plscol0a: Set 8-bit RGB values and PLFLT alpha transparency value for given cmap0 color index Declaration public static void scol0a(Int32 icol0, Int32 r, Int32 g, Int32 b, Double alpha) Parameters Type Name Description Int32 icol0 Color index. Must be less than the maximum number of colors (which is set by default, by plscmap0n, or even by plscmap0). Int32 r Unsigned 8-bit integer (0-255) representing the degree of red in the color. Int32 g Unsigned 8-bit integer (0-255) representing the degree of green in the color. Int32 b Unsigned 8-bit integer (0-255) representing the degree of blue in the color. Double alpha Value of the alpha transparency in the range (0.0-1.0). Remarks Set 8-bit RGB value and PLFLT alpha transparency value for given cmap0 (see ) index. Overwrites the previous color value for the given index and, thus, does not result in any additional allocation of space for colors."
  },
  "api/PLplot.Native.scolbg.html": {
    "href": "api/PLplot.Native.scolbg.html",
    "title": "Method scolbg | PLplot for .NET",
    "keywords": "Method scolbg scolbg(Int32, Int32, Int32) plscolbg: Set the background color by 8-bit RGB value Declaration public static void scolbg(Int32 r, Int32 g, Int32 b) Parameters Type Name Description Int32 r Unsigned 8-bit integer (0-255) representing the degree of red in the color. Int32 g Unsigned 8-bit integer (0-255) representing the degree of green in the color. Int32 b Unsigned 8-bit integer (0-255) representing the degree of blue in the color. Remarks Set the background color (color 0 in cmap0) by 8-bit RGB value (see )."
  },
  "api/PLplot.Native.scolbga.html": {
    "href": "api/PLplot.Native.scolbga.html",
    "title": "Method scolbga | PLplot for .NET",
    "keywords": "Method scolbga scolbga(Int32, Int32, Int32, Double) plscolbga: Set the background color by 8-bit RGB value and PLFLT alpha transparency value. Declaration public static void scolbga(Int32 r, Int32 g, Int32 b, Double alpha) Parameters Type Name Description Int32 r Unsigned 8-bit integer (0-255) representing the degree of red in the color. Int32 g Unsigned 8-bit integer (0-255) representing the degree of green in the color. Int32 b Unsigned 8-bit integer (0-255) representing the degree of blue in the color. Double alpha Value of the alpha transparency in the range (0.0-1.0). Remarks Set the background color (color 0 in cmap0) by 8-bit RGB value and PLFLT alpha transparency value (see )."
  },
  "api/PLplot.Native.scolor.html": {
    "href": "api/PLplot.Native.scolor.html",
    "title": "Method scolor | PLplot for .NET",
    "keywords": "Method scolor scolor(Int32) plscolor: Used to globally turn color output on/off Declaration public static void scolor(Int32 color) Parameters Type Name Description Int32 color Color flag (Boolean). If zero, color is turned off. If non-zero, color is turned on. Remarks Used to globally turn color output on/off for those drivers/devices that support it."
  },
  "api/PLplot.Native.scompression.html": {
    "href": "api/PLplot.Native.scompression.html",
    "title": "Method scompression | PLplot for .NET",
    "keywords": "Method scompression scompression(Int32) plscompression: Set device-compression level Declaration public static void scompression(Int32 compression) Parameters Type Name Description Int32 compression The desired compression level. This is a device-dependent value. Currently only the jpeg and png devices use these values. For jpeg value is the jpeg quality which should normally be in the range 0-95. Higher values denote higher quality and hence larger image sizes. For png values are in the range -1 to 99. Values of 0-9 are taken as the compression level for zlib. A value of -1 denotes the default zlib compression level. Values in the range 10-99 are divided by 10 and then used as the zlib compression level. Higher compression levels correspond to greater compression and small file sizes at the expense of more computation. Remarks Set device-compression level. Only used for drivers that provide compression. This function, if used, should be invoked before a call to plinit."
  },
  "api/PLplot.Native.sdev.html": {
    "href": "api/PLplot.Native.sdev.html",
    "title": "Method sdev | PLplot for .NET",
    "keywords": "Method sdev sdev(String) plsdev: Set the device (keyword) name Declaration public static void sdev(string devname) Parameters Type Name Description System.String devname An ascii character string containing the device name keyword of the required output device. If devname is NULL or if the first character of the string is a ``?'', the normal (prompted) start up is used. Remarks Set the device (keyword) name."
  },
  "api/PLplot.Native.sdidev.html": {
    "href": "api/PLplot.Native.sdidev.html",
    "title": "Method sdidev | PLplot for .NET",
    "keywords": "Method sdidev sdidev(Double, Double, Double, Double) plsdidev: Set parameters that define current device-space window Declaration public static void sdidev(Double mar, Double aspect, Double jx, Double jy) Parameters Type Name Description Double mar Relative margin width. Double aspect Aspect ratio. Double jx Relative justification in x. Value must lie in the range -0.5 to 0.5. Double jy Relative justification in y. Value must lie in the range -0.5 to 0.5. Remarks Set relative margin width, aspect ratio, and relative justification that define current device-space window. If you want to just use the previous value for any of these, just pass in the magic value PL_NOTSET. It is unlikely that one should ever need to change the aspect ratio but it's in there for completeness. If plsdidev is not called the default values of mar, jx, and jy are all 0. aspect is set to a device-specific value."
  },
  "api/PLplot.Native.sdimap.html": {
    "href": "api/PLplot.Native.sdimap.html",
    "title": "Method sdimap | PLplot for .NET",
    "keywords": "Method sdimap sdimap(Int32, Int32, Int32, Int32, Double, Double) plsdimap: Set up transformation from metafile coordinates Declaration public static void sdimap(Int32 dimxmin, Int32 dimxmax, Int32 dimymin, Int32 dimymax, Double dimxpmm, Double dimypmm) Parameters Type Name Description Int32 dimxmin NEEDS DOCUMENTATION Int32 dimxmax NEEDS DOCUMENTATION Int32 dimymin NEEDS DOCUMENTATION Int32 dimymax NEEDS DOCUMENTATION Double dimxpmm NEEDS DOCUMENTATION Double dimypmm NEEDS DOCUMENTATION Remarks Set up transformation from metafile coordinates. The size of the plot is scaled so as to preserve aspect ratio. This isn't intended to be a general-purpose facility just yet (not sure why the user would need it, for one)."
  },
  "api/PLplot.Native.sdiori.html": {
    "href": "api/PLplot.Native.sdiori.html",
    "title": "Method sdiori | PLplot for .NET",
    "keywords": "Method sdiori sdiori(Double) plsdiori: Set plot orientation Declaration public static void sdiori(Double rot) Parameters Type Name Description Double rot Plot orientation parameter. Remarks Set plot orientation parameter which is multiplied by 90deg to obtain the angle of rotation. Note, arbitrary rotation parameters such as 0.2 (corresponding to 18deg) are possible, but the usual values for the rotation parameter are 0., 1., 2., and 3. corresponding to 0deg (landscape mode), 90deg (portrait mode), 180deg (seascape mode), and 270deg (upside-down mode). If plsdiori is not called the default value of rot is 0."
  },
  "api/PLplot.Native.sdiplt.html": {
    "href": "api/PLplot.Native.sdiplt.html",
    "title": "Method sdiplt | PLplot for .NET",
    "keywords": "Method sdiplt sdiplt(Double, Double, Double, Double) plsdiplt: Set parameters that define current plot-space window Declaration public static void sdiplt(Double xmin, Double ymin, Double xmax, Double ymax) Parameters Type Name Description Double xmin Relative minimum in x. Double ymin Relative minimum in y. Double xmax Relative maximum in x. Double ymax Relative maximum in y. Remarks Set relative minima and maxima that define the current plot-space window. If plsdiplt is not called the default values of xmin, ymin, xmax, and ymax are 0., 0., 1., and 1."
  },
  "api/PLplot.Native.sdiplz.html": {
    "href": "api/PLplot.Native.sdiplz.html",
    "title": "Method sdiplz | PLplot for .NET",
    "keywords": "Method sdiplz sdiplz(Double, Double, Double, Double) plsdiplz: Set parameters incrementally (zoom mode) that define current plot-space window Declaration public static void sdiplz(Double xmin, Double ymin, Double xmax, Double ymax) Parameters Type Name Description Double xmin Relative (incremental) minimum in x. Double ymin Relative (incremental) minimum in y. Double xmax Relative (incremental) maximum in x. Double ymax Relative (incremental) maximum in y. Remarks Set relative minima and maxima incrementally (zoom mode) that define the current plot-space window. This function has the same effect as plsdiplt if that function has not been previously called. Otherwise, this function implements zoom mode using the transformation min_used = old_min + old_length min and max_used = old_min + old_length max for each axis. For example, if min = 0.05 and max = 0.95 for each axis, repeated calls to plsdiplz will zoom in by 10 per cent for each call."
  },
  "api/PLplot.Native.seed.html": {
    "href": "api/PLplot.Native.seed.html",
    "title": "Method seed | PLplot for .NET",
    "keywords": "Method seed seed(UInt32) plseed: Set seed for internal random number generator. Declaration public static void seed(uint seed) Parameters Type Name Description System.UInt32 seed Seed for random number generator. Remarks Set the seed for the internal random number generator. See plrandd for further details."
  },
  "api/PLplot.Native.sesc.html": {
    "href": "api/PLplot.Native.sesc.html",
    "title": "Method sesc | PLplot for .NET",
    "keywords": "Method sesc sesc(Char) plsesc: Set the escape character for text strings Declaration public static void sesc(char esc) Parameters Type Name Description System.Char esc Escape character. Remarks Set the escape character for text strings. From C (in contrast to Fortran, see plsescfortran) you pass esc as a character. Only selected characters are allowed to prevent the user from shooting himself in the foot (For example, a \\ isn't allowed since it conflicts with C's use of backslash as a character escape). Here are the allowed escape characters and their corresponding decimal ASCII values: !, ASCII 33 #, ASCII 35 $, ASCII 36 %, ASCII 37 amp, ASCII 38 *, ASCII 42 @, ASCII 64 ^, ASCII 94 ~, ASCII 126"
  },
  "api/PLplot.Native.sfam.html": {
    "href": "api/PLplot.Native.sfam.html",
    "title": "Method sfam | PLplot for .NET",
    "keywords": "Method sfam sfam(Int32, Int32, Int32) plsfam: Set family file parameters Declaration public static void sfam(Int32 fam, Int32 num, Int32 bmax) Parameters Type Name Description Int32 fam Family flag (Boolean). If nonzero, familying is enabled. Int32 num Current family file number. Int32 bmax Maximum file size (in bytes) for a family file. Remarks Sets variables dealing with output file familying. Does nothing if familying not supported by the driver. This routine, if used, must be called before initializing PLplot. See for more information."
  },
  "api/PLplot.Native.sfci.html": {
    "href": "api/PLplot.Native.sfci.html",
    "title": "Method sfci | PLplot for .NET",
    "keywords": "Method sfci sfci(FCI) plsfci: Set FCI (font characterization integer) Declaration public static void sfci(FCI fci) Parameters Type Name Description FCI fci PLUNICODE (unsigned 32-bit integer) value of FCI. Remarks Sets font characteristics to be used at the start of the next string using the FCI approach. See for more information. Note, plsfont (which calls plsfci internally) provides a more user-friendly API for setting the font characterisitics."
  },
  "api/PLplot.Native.sfnam.html": {
    "href": "api/PLplot.Native.sfnam.html",
    "title": "Method sfnam | PLplot for .NET",
    "keywords": "Method sfnam sfnam(String) plsfnam: Set output file name Declaration public static void sfnam(string fnam) Parameters Type Name Description System.String fnam An ascii character string containing the file name. Remarks Sets the current output file name, if applicable. If the file name has not been specified and is required by the driver, the user will be prompted for it. If using the X-windows output driver, this sets the display name. This routine, if used, must be called before initializing PLplot."
  },
  "api/PLplot.Native.sfont.html": {
    "href": "api/PLplot.Native.sfont.html",
    "title": "Method sfont | PLplot for .NET",
    "keywords": "Method sfont sfont(FontFamily, FontStyle, FontWeight) plsfont: Set family, style and weight of the current font Declaration public static void sfont(FontFamily family, FontStyle style, FontWeight weight) Parameters Type Name Description FontFamily family Font family to select for the current font. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_SANS, PL_FCI_SERIF, PL_FCI_MONO, PL_FCI_SCRIPT and PL_FCI_SYMBOL. A negative value signifies that the font family should not be altered. FontStyle style Font style to select for the current font. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_UPRIGHT, PL_FCI_ITALIC and PL_FCI_OBLIQUE. A negative value signifies that the font style should not be altered. FontWeight weight Font weight to select for the current font. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_MEDIUM and PL_FCI_BOLD. A negative value signifies that the font weight should not be altered. Remarks Sets the current font. See for more information on font selection."
  },
  "api/PLplot.Native.shade.html": {
    "href": "api/PLplot.Native.shade.html",
    "title": "Method shade | PLplot for .NET",
    "keywords": "Method shade | Improve this Doc View Source shade(Double[,], DefinedFunc, Double, Double, Double, Double, Double, Double, Int32, Double, Double, Int32, Double, Int32, Double, Boolean, TransformFunc) plshade: Shade individual region on the basis of value Declaration public static void shade(Double[, ] a, DefinedFunc defined, Double xmin, Double xmax, Double ymin, Double ymax, Double shade_min, Double shade_max, Int32 sh_cmap, Double sh_color, Double sh_width, Int32 min_color, Double min_width, Int32 max_color, Double max_width, Boolean rectangular, TransformFunc pltr) Parameters Type Name Description Double [,] a A matrix containing function values to plot. Should have dimensions of nx by ny. DefinedFunc defined Callback function specifying the region that should be plotted in the shade plot. This function accepts x and y coordinates as input arguments and must return 1 if the point is to be included in the shade plot and 0 otherwise. If you want to plot the entire shade plot (the usual case), this argument should be set to NULL. Double xmin Double xmax Double ymin Double ymax Double shade_min Defines the lower end of the interval to be shaded. If shade_max leq shade_min, plshade does nothing. Double shade_max Defines the upper end of the interval to be shaded. If shade_max leq shade_min, plshade does nothing. Int32 sh_cmap Defines color map. If sh_cmap=0, then sh_color is interpreted as a cmap0 (integer) index. If sh_cmap=1, then sh_color is interpreted as a cmap1 argument in the range (0.0-1.0). Double sh_color Defines color map index with integer value if cmap0 or value in range (0.0-1.0) if cmap1. Double sh_width Defines width used by the fill pattern. Int32 min_color Defines pen color, width used by the boundary of shaded region. The min values are used for the shade_min boundary, and the max values are used on the shade_max boundary. Set color and width to zero for no plotted boundaries. Double min_width Defines pen color, width used by the boundary of shaded region. The min values are used for the shade_min boundary, and the max values are used on the shade_max boundary. Set color and width to zero for no plotted boundaries. Int32 max_color Defines pen color, width used by the boundary of shaded region. The min values are used for the shade_min boundary, and the max values are used on the shade_max boundary. Set color and width to zero for no plotted boundaries. Double max_width Defines pen color, width used by the boundary of shaded region. The min values are used for the shade_min boundary, and the max values are used on the shade_max boundary. Set color and width to zero for no plotted boundaries. Boolean rectangular Set rectangular to true if rectangles map to rectangles after coordinate transformation with pltrl. Otherwise, set rectangular to false. If rectangular is set to true, plshade tries to save time by filling large rectangles. This optimization fails if the coordinate transformation distorts the shape of rectangles. For example a plot in polar coordinates has to have rectangular set to false. TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrix a and world coordinates. If pltr is not supplied (e.g., is set to NULL in the C case), then the x indices of a are mapped to the range xmin through xmax and the y indices of a are mapped to the range ymin through ymax.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Shade individual region on the basis of value. Use plshades if you want to shade a number of contiguous regions using continuous colors. In particular the edge contours are treated properly in plshades. If you attempt to do contiguous regions with plshade the contours at the edge of the shade are partially obliterated by subsequent plots of contiguous shaded regions."
  },
  "api/PLplot.Native.shades.html": {
    "href": "api/PLplot.Native.shades.html",
    "title": "Method shades | PLplot for .NET",
    "keywords": "Method shades | Improve this Doc View Source shades(Double[,], DefinedFunc, Double, Double, Double, Double, Double[], Double, Int32, Double, Boolean, TransformFunc) plshades: Shade regions on the basis of value Declaration public static void shades(Double[, ] a, DefinedFunc defined, Double xmin, Double xmax, Double ymin, Double ymax, Double[] clevel, Double fill_width, Int32 cont_color, Double cont_width, Boolean rectangular, TransformFunc pltr) Parameters Type Name Description Double [,] a A matrix containing function values to plot. Should have dimensions of nx by ny. DefinedFunc defined Callback function specifying the region that should be plotted in the shade plot. This function accepts x and y coordinates as input arguments and must return 1 if the point is to be included in the shade plot and 0 otherwise. If you want to plot the entire shade plot (the usual case), this argument should be set to NULL. Double xmin Double xmax Double ymin Double ymax Double [] clevel A vector containing the data levels corresponding to the edges of each shaded region that will be plotted by this function. To work properly the levels should be monotonic. Double fill_width Defines the line width used by the fill pattern. Int32 cont_color Defines cmap0 pen color used for contours defining edges of shaded regions. The pen color is only temporary set for the contour drawing. Set this value to zero or less if no shade edge contours are wanted. Double cont_width Defines line width used for contours defining edges of shaded regions. This value may not be honored by all drivers. The pen width is only temporary set for the contour drawing. Set this value to zero or less if no shade edge contours are wanted. Boolean rectangular Set rectangular to true if rectangles map to rectangles after coordinate transformation with pltrl. Otherwise, set rectangular to false. If rectangular is set to true, plshade tries to save time by filling large rectangles. This optimization fails if the coordinate transformation distorts the shape of rectangles. For example a plot in polar coordinates has to have rectangular set to false. TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrix a and world coordinates. If pltr is not supplied (e.g., is set to NULL in the C case), then the x indices of a are mapped to the range xmin through xmax and the y indices of a are mapped to the range ymin through ymax.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Shade regions on the basis of value. This is the high-level routine for making continuous color shaded plots with cmap1 while plshade should be used to plot individual shaded regions using either cmap0 or cmap1. examples/;ltlanguagegt/x16* shows how to use plshades for each of our supported languages."
  },
  "api/PLplot.Native.slabelfunc.html": {
    "href": "api/PLplot.Native.slabelfunc.html",
    "title": "Method slabelfunc | PLplot for .NET",
    "keywords": "Method slabelfunc slabelfunc(LabelFunc, IntPtr) plslabelfunc: Assign a function to use for generating custom axis labels Declaration public static void slabelfunc(LabelFunc label_func, IntPtr label_data) Parameters Type Name Description LabelFunc label_func This is the custom label function. In order to reset to the default labelling, set this to NULL. The labelling function parameters are, in order: axis This indicates which axis a label is being requested for. The value will be one of PL_X_AXIS, PL_Y_AXIS or PL_Z_AXIS. value This is the value along the axis which is being labelled. label_text The string representation of the label value. length The maximum length in characters allowed for label_text. IntPtr label_data This parameter may be used to pass data to the label_func function. Remarks This function allows a user to provide their own function to provide axis label text. The user function is given the numeric value for a point on an axis and returns a string label to correspond with that value. Custom axis labels can be enabled by passing appropriate arguments to plenv, plbox, plbox3 and similar functions."
  },
  "api/PLplot.Native.smaj.html": {
    "href": "api/PLplot.Native.smaj.html",
    "title": "Method smaj | PLplot for .NET",
    "keywords": "Method smaj smaj(Double, Double) plsmaj: Set length of major ticks Declaration public static void smaj(Double def, Double scale) Parameters Type Name Description Double def The default length of a major tick in millimeters, should be set to zero if the default length is to remain unchanged. Double scale Scale factor to be applied to default to get actual tick length. Remarks This sets up the length of the major ticks. The actual length is the product of the default length and a scaling factor as for character height."
  },
  "api/PLplot.Native.smem.html": {
    "href": "api/PLplot.Native.smem.html",
    "title": "Method smem | PLplot for .NET",
    "keywords": "Method smem smem(Int32, Int32, IntPtr) plsmem: Set the memory area to be plotted (RGB) Declaration public static void smem(Int32 maxx, Int32 maxy, IntPtr plotmem) Parameters Type Name Description Int32 maxx Size of memory area in the X coordinate. Int32 maxy Size of memory area in the Y coordinate. IntPtr plotmem Pointer to the beginning of a user-supplied writeable memory area. Remarks Set the memory area to be plotted (with the mem or memcairo driver) as the dev member of the stream structure. Also set the number of pixels in the memory passed in plotmem, which is a block of memory maxy by maxx by 3 bytes long, say: 480 x 640 x 3 (Y, X, RGB)"
  },
  "api/PLplot.Native.smema.html": {
    "href": "api/PLplot.Native.smema.html",
    "title": "Method smema | PLplot for .NET",
    "keywords": "Method smema smema(Int32, Int32, IntPtr) plsmema: Set the memory area to be plotted (RGBA) Declaration public static void smema(Int32 maxx, Int32 maxy, IntPtr plotmem) Parameters Type Name Description Int32 maxx Size of memory area in the X coordinate. Int32 maxy Size of memory area in the Y coordinate. IntPtr plotmem Pointer to the beginning of a user-supplied writeable memory area. Remarks Set the memory area to be plotted (with the memcairo driver) as the dev member of the stream structure. Also set the number of pixels in the memory passed in plotmem, which is a block of memory maxy by maxx by 4 bytes long, say: 480 x 640 x 4 (Y, X, RGBA)"
  },
  "api/PLplot.Native.smin.html": {
    "href": "api/PLplot.Native.smin.html",
    "title": "Method smin | PLplot for .NET",
    "keywords": "Method smin smin(Double, Double) plsmin: Set length of minor ticks Declaration public static void smin(Double def, Double scale) Parameters Type Name Description Double def The default length of a minor tick in millimeters, should be set to zero if the default length is to remain unchanged. Double scale Scale factor to be applied to default to get actual tick length. Remarks This sets up the length of the minor ticks and the length of the terminals on error bars. The actual length is the product of the default length and a scaling factor as for character height."
  },
  "api/PLplot.Native.sdrawmode.html": {
    "href": "api/PLplot.Native.sdrawmode.html",
    "title": "Method sdrawmode | PLplot for .NET",
    "keywords": "Method sdrawmode sdrawmode(DrawMode) plsdrawmode: Set drawing mode (depends on device support!) Declaration public static void sdrawmode(DrawMode mode) Parameters Type Name Description DrawMode mode Control variable which species the drawing mode (one of PL_DRAWMODE_DEFAULT, PL_DRAWMODE_REPLACE, or PL_DRAWMODE_XOR) to use. Remarks Set drawing mode. Note only one device driver (cairo) currently supports this at the moment. See also plgdrawmode."
  },
  "api/PLplot.Native.sori.html": {
    "href": "api/PLplot.Native.sori.html",
    "title": "Method sori | PLplot for .NET",
    "keywords": "Method sori sori(Orientation) plsori: Set orientation Declaration public static void sori(Orientation ori) Parameters Type Name Description Orientation ori Orientation value (0 for landscape, 1 for portrait, etc.) The value is multiplied by 90 degrees to get the angle. Remarks Set integer plot orientation parameter. This function is identical to plsdiori except for the type of the argument, and should be used in the same way. See the documentation of plsdiori for details."
  },
  "api/PLplot.Native.spage.html": {
    "href": "api/PLplot.Native.spage.html",
    "title": "Method spage | PLplot for .NET",
    "keywords": "Method spage spage(Double, Double, Int32, Int32, Int32, Int32) plspage: Set page parameters Declaration public static void spage(Double xp, Double yp, Int32 xleng, Int32 yleng, Int32 xoff, Int32 yoff) Parameters Type Name Description Double xp Number of pixels per inch (DPI), x. Used only by raster drivers, ignored by drivers which use \"real world\" units (e.g. mm). Double yp Number of pixels per inch (DPI), y. Used only by raster drivers, ignored by drivers which use \"real world\" units (e.g. mm). Int32 xleng Page length, x. Int32 yleng Page length, y. Int32 xoff Page offset, x. Int32 yoff Page offset, y. Remarks Sets the page configuration (optional). If an individual parameter is zero then that parameter value is not updated. Not all parameters are recognized by all drivers and the interpretation is device-dependent. The X-window driver uses the length and offset parameters to determine the window size and location. The length and offset values are expressed in units that are specific to the current driver. For instance: screen drivers will usually interpret them as number of pixels, whereas printer drivers will usually use mm."
  },
  "api/PLplot.Native.spal0.html": {
    "href": "api/PLplot.Native.spal0.html",
    "title": "Method spal0 | PLplot for .NET",
    "keywords": "Method spal0 spal0(String) plspal0: Set the cmap0 palette using the specified cmap0*.pal format file Declaration public static void spal0(string filename) Parameters Type Name Description System.String filename An ascii character string containing the name of the cmap0*.pal file. If this string is empty, use the default cmap0*.pal file. Remarks Set the cmap0 palette using the specified cmap0*.pal format file."
  },
  "api/PLplot.Native.spal1.html": {
    "href": "api/PLplot.Native.spal1.html",
    "title": "Method spal1 | PLplot for .NET",
    "keywords": "Method spal1 spal1(String, Boolean) plspal1: Set the cmap1 palette using the specified cmap1*.pal format file Declaration public static void spal1(string filename, Boolean interpolate) Parameters Type Name Description System.String filename An ascii character string containing the name of the cmap1*.pal file. If this string is empty, use the default cmap1*.pal file. Boolean interpolate If this parameter is true, the columns containing the intensity index, r, g, b, alpha and alt_hue_path in the cmap1*.pal file are used to set the cmap1 palette with a call to plscmap1la. (The cmap1*.pal header contains a flag which controls whether the r, g, b data sent to plscmap1la are interpreted as HLS or RGB.) If this parameter is false, the intensity index and alt_hue_path columns are ignored and the r, g, b (interpreted as RGB), and alpha columns of the cmap1*.pal file are used instead to set the cmap1 palette directly with a call to plscmap1a. Remarks Set the cmap1 palette using the specified cmap1*.pal format file."
  },
  "api/PLplot.Native.spause.html": {
    "href": "api/PLplot.Native.spause.html",
    "title": "Method spause | PLplot for .NET",
    "keywords": "Method spause spause(Boolean) plspause: Set the pause (on end-of-page) status Declaration public static void spause(Boolean pause) Parameters Type Name Description Boolean pause If pause is true there will be a pause on end-of-page for those drivers which support this. Otherwise there is no pause. Remarks Set the pause (on end-of-page) status."
  },
  "api/PLplot.Native.sstrm.html": {
    "href": "api/PLplot.Native.sstrm.html",
    "title": "Method sstrm | PLplot for .NET",
    "keywords": "Method sstrm sstrm(Int32) plsstrm: Set current output stream Declaration public static void sstrm(Int32 strm) Parameters Type Name Description Int32 strm The current stream number. Remarks Sets the number of the current output stream. The stream number defaults to 0 unless changed by this routine. The first use of this routine must be followed by a call initializing PLplot (e.g. plstar)."
  },
  "api/PLplot.Native.ssub.html": {
    "href": "api/PLplot.Native.ssub.html",
    "title": "Method ssub | PLplot for .NET",
    "keywords": "Method ssub ssub(Int32, Int32) plssub: Set the number of subpages in x and y Declaration public static void ssub(Int32 nx, Int32 ny) Parameters Type Name Description Int32 nx Number of windows in x direction (i.e., number of window columns). Int32 ny Number of windows in y direction (i.e., number of window rows). Remarks Set the number of subpages in x and y."
  },
  "api/PLplot.Native.ssym.html": {
    "href": "api/PLplot.Native.ssym.html",
    "title": "Method ssym | PLplot for .NET",
    "keywords": "Method ssym ssym(Double, Double) plssym: Set symbol size Declaration public static void ssym(Double def, Double scale) Parameters Type Name Description Double def The default height of a symbol in millimeters, should be set to zero if the default height is to remain unchanged. Double scale Scale factor to be applied to default to get actual symbol height. Remarks This sets up the size of all subsequent symbols drawn by plpoin and plsym. The actual height of a symbol is the product of the default symbol size and a scaling factor as for the character height."
  },
  "api/PLplot.Native.star.html": {
    "href": "api/PLplot.Native.star.html",
    "title": "Method star | PLplot for .NET",
    "keywords": "Method star star(Int32, Int32) plstar: Initialization Declaration public static void star(Int32 nx, Int32 ny) Parameters Type Name Description Int32 nx Number of subpages to divide output page in the x direction. Int32 ny Number of subpages to divide output page in the y direction. Remarks Initializing the plotting package. The program prompts for the device keyword or number of the desired output device. Hitting a RETURN in response to the prompt is the same as selecting the first device. If only one device is enabled when PLplot is installed, plstar will issue no prompt. The output device is divided into nx by ny subpages, each of which may be used independently. The subroutine pladv is used to advance from one subpage to the next."
  },
  "api/PLplot.Native.start.html": {
    "href": "api/PLplot.Native.start.html",
    "title": "Method start | PLplot for .NET",
    "keywords": "Method start start(String, Int32, Int32) plstart: Initialization Declaration public static void start(string devname, Int32 nx, Int32 ny) Parameters Type Name Description System.String devname An ascii character string containing the device name keyword of the required output device. If devname is NULL or if the first character of the string is a ``?'', the normal (prompted) start up is used. Int32 nx Number of subpages to divide output page in the x direction. Int32 ny Number of subpages to divide output page in the y direction. Remarks Alternative to plstar for initializing the plotting package. The device name keyword for the desired output device must be supplied as an argument. These keywords are the same as those printed out by plstar. If the requested device is not available, or if the input string is empty or begins with ``?'', the prompted start up of plstar is used. This routine also divides the output device page into nx by ny subpages, each of which may be used independently. The subroutine pladv is used to advance from one subpage to the next."
  },
  "api/PLplot.Native.stransform.html": {
    "href": "api/PLplot.Native.stransform.html",
    "title": "Method stransform | PLplot for .NET",
    "keywords": "Method stransform | Improve this Doc View Source stransform(TransformFunc) plstransform: Set a global coordinate transform function Declaration public static void stransform(TransformFunc coordinate_transform) Parameters Type Name Description TransformFunc coordinate_transform A callback function that defines the transformation from the input (x, y) world coordinates to new PLplot world coordinates. If coordinate_transform is not supplied (e.g., is set to NULL in the C case), then no transform is applied. Remarks This function can be used to define a coordinate transformation which affects all elements drawn within the current plot window. The coordinate_transform callback function is similar to that provided for the plmap and plmeridians functions. The coordinate_transform_data parameter may be used to pass extra data to coordinate_transform."
  },
  "api/PLplot.Native.string2.html": {
    "href": "api/PLplot.Native.string2.html",
    "title": "Method string2 | PLplot for .NET",
    "keywords": "Method string2 | Improve this Doc View Source string2(Double[], Double[], String) Declaration public static void string2(Double[] x, Double[] y, string str) Parameters Type Name Description Double [] x Double [] y System.String str"
  },
  "api/PLplot.Native.string3.html": {
    "href": "api/PLplot.Native.string3.html",
    "title": "Method string3 | PLplot for .NET",
    "keywords": "Method string3 | Improve this Doc View Source string3(Double[], Double[], Double[], String) plstring3: Plot a glyph at the specified 3D points Declaration public static void string3(Double[] x, Double[] y, Double[] z, string str) Parameters Type Name Description Double [] x A vector containing the x coordinates of the points. Double [] y A vector containing the y coordinates of the points. Double [] z A vector containing the z coordinates of the points. System.String str Remarks Plot a glyph at the specified 3D points. (Supersedes plpoin3 because many[!] more glyphs are accessible with plstring3.) Set up the call to this function similar to what is done for plline3. The glyph is specified with a PLplot user string. Note that the user string is not actually limited to one glyph so it is possible (but not normally useful) to plot more than one glyph at the specified points with this function. As with plmtex and plptex, the user string can contain FCI escapes to determine the font, UTF-8 code to determine the glyph or else PLplot escapes for Hershey or unicode text to determine the glyph."
  },
  "api/PLplot.Native.stripa.html": {
    "href": "api/PLplot.Native.stripa.html",
    "title": "Method stripa | PLplot for .NET",
    "keywords": "Method stripa stripa(Int32, Pen, Double, Double) plstripa: Add a point to a strip chart Declaration public static void stripa(Int32 id, Pen pen, Double x, Double y) Parameters Type Name Description Int32 id Identification number of the strip chart (set up in plstripc). Pen pen Pen number (ranges from 0 to 3). Double x X coordinate of point to plot. Double y Y coordinate of point to plot. Remarks Add a point to a given pen of a given strip chart. There is no need for all pens to have the same number of points or to be equally sampled in the x coordinate. Allocates memory and rescales as necessary."
  },
  "api/PLplot.Native.stripc.html": {
    "href": "api/PLplot.Native.stripc.html",
    "title": "Method stripc | PLplot for .NET",
    "keywords": "Method stripc | Improve this Doc View Source stripc(out Int32, String, String, Double, Double, Double, Double, Double, Double, Double, Boolean, Boolean, Int32, Int32, Int32[], LineStyle[], String[], String, String, String) plstripc: Create a 4-pen strip chart Declaration public static void stripc(out Int32 id, string xspec, string yspec, Double xmin, Double xmax, Double xjump, Double ymin, Double ymax, Double xlpos, Double ylpos, Boolean y_ascl, Boolean acc, Int32 colbox, Int32 collab, Int32[] colline, LineStyle[] styline, String[] legline, string labx, string laby, string labtop) Parameters Type Name Description Int32 id Returned value of the identification number of the strip chart to use on plstripa and plstripd. System.String xspec An ascii character string containing the x-axis specification as in plbox. System.String yspec An ascii character string containing the y-axis specification as in plbox. Double xmin Initial coordinates of plot box; they will change as data are added. Double xmax Initial coordinates of plot box; they will change as data are added. Double xjump When x attains xmax, the length of the plot is multiplied by the factor (1 + xjump) . Double ymin Initial coordinates of plot box; they will change as data are added. Double ymax Initial coordinates of plot box; they will change as data are added. Double xlpos X legend box position (range from 0 to 1). Double ylpos Y legend box position (range from 0 to 1). Boolean y_ascl Autoscale y between x jumps if y_ascl is true, otherwise not. Boolean acc Accumulate strip plot if acc is true, otherwise slide display. Int32 colbox Plot box color index (cmap0). Int32 collab Legend color index (cmap0). Int32 [] colline A vector containing the cmap0 color indices for the 4 pens. LineStyle [] styline A vector containing the line style indices for the 4 pens. String [] legline A vector of UTF-8 character strings containing legends for the 4 pens. System.String labx A UTF-8 character string containing the label for the x axis. System.String laby A UTF-8 character string containing the label for the y axis. System.String labtop A UTF-8 character string containing the plot title. Remarks Create a 4-pen strip chart, to be used afterwards by plstripa"
  },
  "api/PLplot.Native.stripd.html": {
    "href": "api/PLplot.Native.stripd.html",
    "title": "Method stripd | PLplot for .NET",
    "keywords": "Method stripd stripd(Int32) plstripd: Deletes and releases memory used by a strip chart Declaration public static void stripd(Int32 id) Parameters Type Name Description Int32 id Identification number of strip chart to delete. Remarks Deletes and releases memory used by a strip chart."
  },
  "api/PLplot.Native.imagefr.html": {
    "href": "api/PLplot.Native.imagefr.html",
    "title": "Method imagefr | PLplot for .NET",
    "keywords": "Method imagefr | Improve this Doc View Source imagefr(Double[,], Double, Double, Double, Double, Double, Double, Double, Double, TransformFunc) plimagefr: Plot a 2D matrix using cmap1 Declaration public static void imagefr(Double[, ] idata, Double xmin, Double xmax, Double ymin, Double ymax, Double zmin, Double zmax, Double valuemin, Double valuemax, TransformFunc pltr) Parameters Type Name Description Double [,] idata A matrix of values (intensities) to plot. Should have dimensions of nx by ny. Double xmin Double xmax Double ymin Double ymax Double zmin Double zmax Double valuemin Double valuemax TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrix idata and world coordinates. If pltr is not supplied (e.g., is set to NULL in the C case), then the x indices of idata are mapped to the range xmin through xmax and the y indices of idata are mapped to the range ymin through ymax.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Plot a 2D matrix using cmap1."
  },
  "api/PLplot.Native.image.html": {
    "href": "api/PLplot.Native.image.html",
    "title": "Method image | PLplot for .NET",
    "keywords": "Method image | Improve this Doc View Source image(Double[,], Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) plimage: Plot a 2D matrix using cmap1 with automatic color adjustment Declaration public static void image(Double[, ] idata, Double xmin, Double xmax, Double ymin, Double ymax, Double zmin, Double zmax, Double Dxmin, Double Dxmax, Double Dymin, Double Dymax) Parameters Type Name Description Double [,] idata A matrix containing function values to plot. Should have dimensions of nx by ny. Double xmin Double xmax Double ymin Double ymax Double zmin Double zmax Double Dxmin Double Dxmax Double Dymin Double Dymax Remarks Plot a 2D matrix using the cmap1 palette. The color scale is automatically adjusted to use the maximum and minimum values in idata as valuemin and valuemax in a call to plimagefr."
  },
  "api/PLplot.Native.styl.html": {
    "href": "api/PLplot.Native.styl.html",
    "title": "Method styl | PLplot for .NET",
    "keywords": "Method styl | Improve this Doc View Source styl(Int32[], Int32[]) plstyl: Set line style Declaration public static void styl(Int32[] mark, Int32[] space) Parameters Type Name Description Int32 [] mark A vector containing the lengths of the segments during which the pen is down, measured in micrometers. Int32 [] space A vector containing the lengths of the segments during which the pen is up, measured in micrometers. Remarks This sets up the line style for all lines subsequently drawn. A line consists of segments in which the pen is alternately down and up. The lengths of these segments are passed in the vectors mark and space respectively. The number of mark-space pairs is specified by nms. In order to return the line style to the default continuous line, plstyl should be called with nms =0 .(see also pllsty)"
  },
  "api/PLplot.Native.surf3d.html": {
    "href": "api/PLplot.Native.surf3d.html",
    "title": "Method surf3d | PLplot for .NET",
    "keywords": "Method surf3d | Improve this Doc View Source surf3d(Double[], Double[], Double[,], Surf, Double[]) plsurf3d: Plot shaded 3-d surface plot Declaration public static void surf3d(Double[] x, Double[] y, Double[, ] z, Surf opt, Double[] clevel) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. Surf opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. FACETED + SURF_CONT opt=FACETED : Network of lines is drawn connecting points at which function is defined. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=SURF_CONT : A contour plot is drawn at the surface plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. opt=MAG_COLOR : the surface is colored according to the value of Z; if MAG_COLOR is not used, then the surface is colored according to the intensity of the reflected light in the surface from a light source whose position is set using pllightsource. Double [] clevel A vector containing the contour levels. Remarks Plots a three-dimensional shaded surface plot within the environment set up by plw3d. The surface is defined by the two-dimensional matrix z[nx][ny], the point z[i][j] being the value of the function at (x[i],y[j]). Note that the points in vectors x and y do not need to be equally spaced, but must be stored in ascending order. For further details see ."
  },
  "api/PLplot.Native.surf3dl.html": {
    "href": "api/PLplot.Native.surf3dl.html",
    "title": "Method surf3dl | PLplot for .NET",
    "keywords": "Method surf3dl | Improve this Doc View Source surf3dl(Double[], Double[], Double[,], Surf, Double[], Int32, Int32[], Int32[]) plsurf3dl: Plot shaded 3-d surface plot for z[x][y] with y index limits Declaration public static void surf3dl(Double[] x, Double[] y, Double[, ] z, Surf opt, Double[] clevel, Int32 indexxmin, Int32[] indexymin, Int32[] indexymax) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. Surf opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. FACETED + SURF_CONT opt=FACETED : Network of lines is drawn connecting points at which function is defined. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=SURF_CONT : A contour plot is drawn at the surface plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. opt=MAG_COLOR : the surface is colored according to the value of Z; if MAG_COLOR is not used, then the surface is colored according to the intensity of the reflected light in the surface from a light source whose position is set using pllightsource. Double [] clevel A vector containing the contour levels. Int32 indexxmin The index value (which must be ≥ 0) that corresponds to the first x index where z is defined. Int32 [] indexymin A vector containing the y index values which all must be ≥ 0. These values are the first y index where z is defined for a particular x index in the range from indexxmin to indexxmax - 1. The dimension of indexymin is indexxmax. Int32 [] indexymax A vector containing the y index values which all must be ≤ ny. These values correspond (by convention) to one more than the last y index where z is defined for a particular x index in the range from indexxmin to indexxmax - 1. The dimension of indexymax is indexxmax. Remarks This variant of plsurf3d (see that function's documentation for more details) should be suitable for the case where the area of the x, y coordinate grid where z is defined can be non-rectangular. The limits of that grid are provided by the parameters indexxmin, indexxmax, indexymin, and indexymax."
  },
  "api/PLplot.Native.svect.html": {
    "href": "api/PLplot.Native.svect.html",
    "title": "Method svect | PLplot for .NET",
    "keywords": "Method svect | Improve this Doc View Source svect(Double[], Double[], Boolean) plsvect: Set arrow style for vector plots Declaration public static void svect(Double[] arrowx, Double[] arrowy, Boolean fill) Parameters Type Name Description Double [] arrowx Double [] arrowy Boolean fill If fill is true then the arrow is closed, if fill is false then the arrow is open. Remarks Set the style for the arrow used by plvect to plot vectors."
  },
  "api/PLplot.Native.svpa.html": {
    "href": "api/PLplot.Native.svpa.html",
    "title": "Method svpa | PLplot for .NET",
    "keywords": "Method svpa svpa(Double, Double, Double, Double) plsvpa: Specify viewport in absolute coordinates Declaration public static void svpa(Double xmin, Double xmax, Double ymin, Double ymax) Parameters Type Name Description Double xmin The distance of the left-hand edge of the viewport from the left-hand edge of the subpage in millimeters. Double xmax The distance of the right-hand edge of the viewport from the left-hand edge of the subpage in millimeters. Double ymin The distance of the bottom edge of the viewport from the bottom edge of the subpage in millimeters. Double ymax The distance of the top edge of the viewport from the bottom edge of the subpage in millimeters. Remarks Alternate routine to plvpor for setting up the viewport. This routine should be used only if the viewport is required to have a definite size in millimeters. The routine plgspa is useful for finding out the size of the current subpage."
  },
  "api/PLplot.Native.sxax.html": {
    "href": "api/PLplot.Native.sxax.html",
    "title": "Method sxax | PLplot for .NET",
    "keywords": "Method sxax sxax(Int32, Int32) plsxax: Set x axis parameters Declaration public static void sxax(Int32 digmax, Int32 digits) Parameters Type Name Description Int32 digmax Variable to set the maximum number of digits for the x axis. If nonzero, the printed label will be switched to a floating-point representation when the number of digits exceeds digmax. Int32 digits Field digits value. Currently, changing its value here has no effect since it is set only by plbox or plbox3. However, the user may obtain its value after a call to either of these functions by calling plgxax. Remarks Sets values of the digmax and digits flags for the x axis. See for more information."
  },
  "api/PLplot.Native.sxwin.html": {
    "href": "api/PLplot.Native.sxwin.html",
    "title": "Method sxwin | PLplot for .NET",
    "keywords": "Method sxwin sxwin(Int32) Set inferior X window Declaration public static void sxwin(Int32 window_id) Parameters Type Name Description Int32 window_id"
  },
  "api/PLplot.Native.syax.html": {
    "href": "api/PLplot.Native.syax.html",
    "title": "Method syax | PLplot for .NET",
    "keywords": "Method syax syax(Int32, Int32) plsyax: Set y axis parameters Declaration public static void syax(Int32 digmax, Int32 digits) Parameters Type Name Description Int32 digmax Variable to set the maximum number of digits for the y axis. If nonzero, the printed label will be switched to a floating-point representation when the number of digits exceeds digmax. Int32 digits Field digits value. Currently, changing its value here has no effect since it is set only by plbox or plbox3. However, the user may obtain its value after a call to either of these functions by calling plgyax. Remarks Identical to plsxax, except that arguments are flags for y axis. See the description of plsxax for more detail."
  },
  "api/PLplot.Native.sym.html": {
    "href": "api/PLplot.Native.sym.html",
    "title": "Method sym | PLplot for .NET",
    "keywords": "Method sym | Improve this Doc View Source sym(Double[], Double[], Char) plsym: Plot a glyph at the specified points Declaration public static void sym(Double[] x, Double[] y, char code) Parameters Type Name Description Double [] x A vector containing the x coordinates of the points. Double [] y A vector containing the y coordinates of the points. System.Char code Hershey symbol code corresponding to a glyph to be plotted at each of the n points. Remarks Plot a glyph at the specified points. (This function is largely superseded by plstring which gives access to many[!] more glyphs.)"
  },
  "api/PLplot.Native.szax.html": {
    "href": "api/PLplot.Native.szax.html",
    "title": "Method szax | PLplot for .NET",
    "keywords": "Method szax szax(Int32, Int32) plszax: Set z axis parameters Declaration public static void szax(Int32 digmax, Int32 digits) Parameters Type Name Description Int32 digmax Variable to set the maximum number of digits for the z axis. If nonzero, the printed label will be switched to a floating-point representation when the number of digits exceeds digmax. Int32 digits Field digits value. Currently, changing its value here has no effect since it is set only by plbox or plbox3. However, the user may obtain its value after a call to either of these functions by calling plgzax. Remarks Identical to plsxax, except that arguments are flags for z axis. See the description of plsxax for more detail."
  },
  "api/PLplot.Native.text.html": {
    "href": "api/PLplot.Native.text.html",
    "title": "Method text | PLplot for .NET",
    "keywords": "Method text text() pltext: Switch to text screen Declaration public static void text() Remarks Sets an interactive device to text mode, used in conjunction with plgra to allow graphics and text to be interspersed. On a device which supports separate text and graphics windows, this command causes control to be switched to the text window. This can be useful for printing diagnostic messages or getting user input, which would otherwise interfere with the plots. The program must switch back to the graphics window before issuing plot commands, as the text (or console) device will probably become quite confused otherwise. If already in text mode, this command is ignored. It is also ignored on devices which only support a single window or use a different method for shifting focus (see also plgra)."
  },
  "api/PLplot.Native.timefmt.html": {
    "href": "api/PLplot.Native.timefmt.html",
    "title": "Method timefmt | PLplot for .NET",
    "keywords": "Method timefmt timefmt(String) pltimefmt: Set format for date / time labels Declaration public static void timefmt(string fmt) Parameters Type Name Description System.String fmt An ascii character string which is interpreted similarly to the format specifier of typical system strftime routines except that PLplot ignores locale and also supplies some useful extensions in the context of plotting. All text in the string is printed as-is other than conversion specifications which take the form of a '%' character followed by further conversion specification character. The conversion specifications which are similar to those provided by system strftime routines are the following: %a: The abbreviated (English) weekday name. %A: The full (English) weekday name. %b: The abbreviated (English) month name. %B: The full (English) month name. %c: Equivalent to %a %b %d %T %Y (non-ISO). %C: The century number (year/100) as a 2-digit integer. %d: The day of the month as a decimal number (range 01 to 31). %D: Equivalent to %m/%d/%y (non-ISO). %e: Like %d, but a leading zero is replaced by a space. %F: Equivalent to %Y-%m-%d (the ISO 8601 date format). %h: Equivalent to %b. %H: The hour as a decimal number using a 24-hour clock (range 00 to 23). %I: The hour as a decimal number using a 12-hour clock (range 01 to 12). %j: The day of the year as a decimal number (range 001 to 366). %k: The hour (24-hour clock) as a decimal number (range 0 to 23); single digits are preceded by a blank. (See also %H.) %l: The hour (12-hour clock) as a decimal number (range 1 to 12); single digits are preceded by a blank. (See also %I.) %m: The month as a decimal number (range 01 to 12). %M: The minute as a decimal number (range 00 to 59). %n: A newline character. %p: Either \"AM\" or \"PM\" according to the given time value. Noon is treated as \"PM\" and midnight as \"AM\". %r: Equivalent to %I:%M:%S %p. %R: The time in 24-hour notation (%H:%M). For a version including the seconds, see %T below. %s: The number of seconds since the Epoch, 1970-01-01 00:00:00 +0000 (UTC). %S: The second as a decimal number (range 00 to 60). (The range is up to 60 to allow for occasional leap seconds.) %t: A tab character. %T: The time in 24-hour notation (%H:%M:%S). %u: The day of the week as a decimal, range 1 to 7, Monday being 1. See also %w. %U: The week number of the current year as a decimal number, range 00 to 53, starting with the first Sunday as the first day of week 01. See also %V and %W. %v: Equivalent to %e-%b-%Y. %V: The ISO 8601 week number of the current year as a decimal number, range 01 to 53, where week 1 is the first week that has at least 4 days in the new year. See also %U and %W. %w: The day of the week as a decimal, range 0 to 6, Sunday being 0. See also %u. %W: The week number of the current year as a decimal number, range 00 to 53, starting with the first Monday as the first day of week 01. %x: Equivalent to %a %b %d %Y. %X: Equivalent to %T. %y: The year as a decimal number without a century (range 00 to 99). %Y: The year as a decimal number including a century. %z: The UTC time-zone string = \"+0000\". %Z: The UTC time-zone abbreviation = \"UTC\". %+: The UTC date and time in default format of the Unix date command which is equivalent to %a %b %d %T %Z %Y. %%: A literal \"%\" character. The conversion specifications which are extensions to those normally provided by system strftime routines are the following: %(0-9): The fractional part of the seconds field (including leading decimal point) to the specified accuracy. Thus %S%3 would give seconds to millisecond accuracy (00.000). %.: The fractional part of the seconds field (including leading decimal point) to the maximum available accuracy. Thus %S%. would give seconds with fractional part up to 9 decimal places if available. Remarks Sets the format for date / time labels. To enable date / time format labels see the options to plbox, plbox3, and plenv."
  },
  "api/PLplot.Native.vasp.html": {
    "href": "api/PLplot.Native.vasp.html",
    "title": "Method vasp | PLplot for .NET",
    "keywords": "Method vasp vasp(Double) plvasp: Specify viewport using aspect ratio only Declaration public static void vasp(Double aspect) Parameters Type Name Description Double aspect Ratio of length of y axis to length of x axis of resulting viewport. Remarks Selects the largest viewport with the given aspect ratio within the subpage that leaves a standard margin (left-hand margin of eight character heights, and a margin around the other three sides of five character heights)."
  },
  "api/PLplot.Native.vect.html": {
    "href": "api/PLplot.Native.vect.html",
    "title": "Method vect | PLplot for .NET",
    "keywords": "Method vect | Improve this Doc View Source vect(Double[,], Double[,], Double, TransformFunc) plvect: Vector plot Declaration public static void vect(Double[, ] u, Double[, ] v, Double scale, TransformFunc pltr) Parameters Type Name Description Double [,] u Double [,] v Double scale Parameter to control the scaling factor of the vectors for plotting. If scale = 0 then the scaling factor is automatically calculated for the data. If scale lt 0 then the scaling factor is automatically calculated for the data and then multiplied by -scale. If scale gt 0 then the scaling factor is set to scale. TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrices u and v and world coordinates.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Draws a plot of vector data contained in the matrices (u[nx][ny],v[nx][ny]) . The scaling factor for the vectors is given by scale. A transformation routine pointed to by pltr with a pointer pltr_data for additional data required by the transformation routine to map indices within the matrices to the world coordinates. The style of the vector arrow may be set using plsvect."
  },
  "api/PLplot.Native.vpas.html": {
    "href": "api/PLplot.Native.vpas.html",
    "title": "Method vpas | PLplot for .NET",
    "keywords": "Method vpas vpas(Double, Double, Double, Double, Double) plvpas: Specify viewport using coordinates and aspect ratio Declaration public static void vpas(Double xmin, Double xmax, Double ymin, Double ymax, Double aspect) Parameters Type Name Description Double xmin The normalized subpage coordinate of the left-hand edge of the viewport. Double xmax The normalized subpage coordinate of the right-hand edge of the viewport. Double ymin The normalized subpage coordinate of the bottom edge of the viewport. Double ymax The normalized subpage coordinate of the top edge of the viewport. Double aspect Ratio of length of y axis to length of x axis. Remarks Device-independent routine for setting up the viewport. The viewport is chosen to be the largest with the given aspect ratio that fits within the specified region (in terms of normalized subpage coordinates). This routine is functionally equivalent to plvpor when a ``natural'' aspect ratio (0.0) is chosen. Unlike plvasp, this routine reserves no extra space at the edges for labels."
  },
  "api/PLplot.Native.vpor.html": {
    "href": "api/PLplot.Native.vpor.html",
    "title": "Method vpor | PLplot for .NET",
    "keywords": "Method vpor vpor(Double, Double, Double, Double) plvpor: Specify viewport using normalized subpage coordinates Declaration public static void vpor(Double xmin, Double xmax, Double ymin, Double ymax) Parameters Type Name Description Double xmin The normalized subpage coordinate of the left-hand edge of the viewport. Double xmax The normalized subpage coordinate of the right-hand edge of the viewport. Double ymin The normalized subpage coordinate of the bottom edge of the viewport. Double ymax The normalized subpage coordinate of the top edge of the viewport. Remarks Device-independent routine for setting up the viewport. This defines the viewport in terms of normalized subpage coordinates which run from 0.0 to 1.0 (left to right and bottom to top) along each edge of the current subpage. Use the alternate routine plsvpa in order to create a viewport of a definite size."
  },
  "api/PLplot.Native.vsta.html": {
    "href": "api/PLplot.Native.vsta.html",
    "title": "Method vsta | PLplot for .NET",
    "keywords": "Method vsta vsta() plvsta: Select standard viewport Declaration public static void vsta() Remarks Selects the largest viewport within the subpage that leaves a standard margin (left-hand margin of eight character heights, and a margin around the other three sides of five character heights)."
  },
  "api/PLplot.Native.w3d.html": {
    "href": "api/PLplot.Native.w3d.html",
    "title": "Method w3d | PLplot for .NET",
    "keywords": "Method w3d w3d(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) plw3d: Configure the transformations required for projecting a 3D surface on a 2D window Declaration public static void w3d(Double basex, Double basey, Double height, Double xmin, Double xmax, Double ymin, Double ymax, Double zmin, Double zmax, Double alt, Double az) Parameters Type Name Description Double basex The normalized x coordinate size of the rectangular cuboid. Double basey The normalized y coordinate size of the rectangular cuboid. Double height The normalized z coordinate size of the rectangular cuboid. Double xmin The minimum x world coordinate of the rectangular cuboid. Double xmax The maximum x world coordinate of the rectangular cuboid. Double ymin The minimum y world coordinate of the rectangular cuboid. Double ymax The maximum y world coordinate of the rectangular cuboid. Double zmin The minimum z world coordinate of the rectangular cuboid. Double zmax The maximum z world coordinate of the rectangular cuboid. Double alt The viewing altitude in degrees above the xy plane of the rectangular cuboid in normalized coordinates. Double az The viewing azimuth in degrees of the rectangular cuboid in normalized coordinates. When az=0, the observer is looking face onto the zx plane of the rectangular cuboid in normalized coordinates, and as az is increased, the observer moves clockwise around that cuboid when viewed from above the xy plane. Remarks Configure the transformations required for projecting a 3D surface on an existing 2D window. Those transformations (see ) are done to a rectangular cuboid enclosing the 3D surface which has its limits expressed in 3D world coordinates and also normalized 3D coordinates (used for interpreting the altitude and azimuth of the viewing angle). The transformations consist of the linear transform from 3D world coordinates to normalized 3D coordinates, and the 3D rotation of normalized coordinates required to align the pole of the new 3D coordinate system with the viewing direction specified by altitude and azimuth so that x and y of the surface elements in that transformed coordinate system are the projection of the 3D surface with given viewing direction on the 2D window."
  },
  "api/PLplot.Native.width.html": {
    "href": "api/PLplot.Native.width.html",
    "title": "Method width | PLplot for .NET",
    "keywords": "Method width width(Double) plwidth: Set pen width Declaration public static void width(Double width) Parameters Type Name Description Double width The desired pen width. If width is negative or the same as the previous value no action is taken. width = 0. should be interpreted as as the minimum valid pen width for the device. The interpretation of positive width values is also device dependent. Remarks Sets the pen width."
  },
  "api/PLplot.Native.wind.html": {
    "href": "api/PLplot.Native.wind.html",
    "title": "Method wind | PLplot for .NET",
    "keywords": "Method wind wind(Double, Double, Double, Double) plwind: Specify window Declaration public static void wind(Double xmin, Double xmax, Double ymin, Double ymax) Parameters Type Name Description Double xmin The world x coordinate of the left-hand edge of the viewport. Double xmax The world x coordinate of the right-hand edge of the viewport. Double ymin The world y coordinate of the bottom edge of the viewport. Double ymax The world y coordinate of the top edge of the viewport. Remarks Specify the window, i.e., the world coordinates of the edges of the viewport."
  },
  "api/PLplot.Native.xormod.html": {
    "href": "api/PLplot.Native.xormod.html",
    "title": "Method xormod | PLplot for .NET",
    "keywords": "Method xormod xormod(Boolean, out Boolean) plxormod: Enter or leave xor mode Declaration public static void xormod(Boolean mode, out Boolean status) Parameters Type Name Description Boolean mode mode is true means enter xor mode and mode is false means leave xor mode. Boolean status Returned value of the status. modestatus of true (false) means driver is capable (incapable) of xor mode. Remarks Enter (when mode is true) or leave (when mode is false) xor mode for those drivers (e.g., the xwin driver) that support it. Enables erasing plots by drawing twice the same line, symbol, etc. If driver is not capable of xor operation it returns a status of false."
  },
  "api/PLplot.Native.gFileDevs.html": {
    "href": "api/PLplot.Native.gFileDevs.html",
    "title": "Method gFileDevs | PLplot for .NET",
    "keywords": "Method gFileDevs | Improve this Doc View Source gFileDevs(out String[], out String[]) Returns a list of file-oriented device names and their menu strings Declaration public static void gFileDevs(out string[] p_menustr, out string[] p_devname) Parameters Type Name Description System.String [] p_menustr human-readable name System.String [] p_devname device name"
  },
  "api/PLplot.Native.gDevs.html": {
    "href": "api/PLplot.Native.gDevs.html",
    "title": "Method gDevs | PLplot for .NET",
    "keywords": "Method gDevs | Improve this Doc View Source gDevs(out String[], out String[]) Returns a list of all device names and their menu strings Declaration public static void gDevs(out string[] p_menustr, out string[] p_devname) Parameters Type Name Description System.String [] p_menustr human-readable name System.String [] p_devname device name"
  },
  "api/PLplot.Native.sKeyEH.html": {
    "href": "api/PLplot.Native.sKeyEH.html",
    "title": "Method sKeyEH | PLplot for .NET",
    "keywords": "Method sKeyEH sKeyEH(KeyHandler, IntPtr) Set the function pointer for the keyboard event handler Declaration public static void sKeyEH(KeyHandler keyEH, IntPtr KeyEH_data) Parameters Type Name Description KeyHandler keyEH IntPtr KeyEH_data"
  },
  "api/PLplot.Native.sButtonEH.html": {
    "href": "api/PLplot.Native.sButtonEH.html",
    "title": "Method sButtonEH | PLplot for .NET",
    "keywords": "Method sButtonEH sButtonEH(ButtonHandler, IntPtr) Set the function pointer for the (mouse) button event handler Declaration public static void sButtonEH(ButtonHandler buttonEH, IntPtr ButtonEH_data) Parameters Type Name Description ButtonHandler buttonEH IntPtr ButtonEH_data"
  },
  "api/PLplot.Native.sbopH.html": {
    "href": "api/PLplot.Native.sbopH.html",
    "title": "Method sbopH | PLplot for .NET",
    "keywords": "Method sbopH sbopH(BopHandler, IntPtr) Sets an optional user bop handler Declaration public static void sbopH(BopHandler handler, IntPtr handler_data) Parameters Type Name Description BopHandler handler IntPtr handler_data"
  },
  "api/PLplot.Native.seopH.html": {
    "href": "api/PLplot.Native.seopH.html",
    "title": "Method seopH | PLplot for .NET",
    "keywords": "Method seopH seopH(EopHandler, IntPtr) Sets an optional user eop handler Declaration public static void seopH(EopHandler handler, IntPtr handler_data) Parameters Type Name Description EopHandler handler IntPtr handler_data"
  },
  "api/PLplot.Native.sexit.html": {
    "href": "api/PLplot.Native.sexit.html",
    "title": "Method sexit | PLplot for .NET",
    "keywords": "Method sexit sexit(ExitHandler) plsexit: Set exit handler Declaration public static void sexit(ExitHandler handler) Parameters Type Name Description ExitHandler handler Error exit handler. Remarks Sets an optional user exit handler. See plexit for details."
  },
  "api/PLplot.Native.sabort.html": {
    "href": "api/PLplot.Native.sabort.html",
    "title": "Method sabort | PLplot for .NET",
    "keywords": "Method sabort sabort(AbortHandler) plsabort: Set abort handler Declaration public static void sabort(AbortHandler handler) Parameters Type Name Description AbortHandler handler Error abort handler. Remarks Sets an optional user abort handler. See plabort for details."
  },
  "api/PLplot.Native.tr0.html": {
    "href": "api/PLplot.Native.tr0.html",
    "title": "Method tr0 | PLplot for .NET",
    "keywords": "Method tr0 | Improve this Doc View Source tr0() Make a identity transformation for matrix index to world coordinate mapping. Declaration public static TransformFunc tr0() Returns Type Description TransformFunc"
  },
  "api/PLplot.Native.tr1.html": {
    "href": "api/PLplot.Native.tr1.html",
    "title": "Method tr1 | PLplot for .NET",
    "keywords": "Method tr1 | Improve this Doc View Source tr1(Double[], Double[]) Make a linear interpolation transformation for matrix index to world coordinate mapping using singly dimensioned coordinate arrays. Declaration public static TransformFunc tr1(Double[] xg, Double[] yg) Parameters Type Name Description Double [] xg x coordinates of grid Double [] yg y coordinates of grid Returns Type Description TransformFunc"
  },
  "api/PLplot.Native.tr2.html": {
    "href": "api/PLplot.Native.tr2.html",
    "title": "Method tr2 | PLplot for .NET",
    "keywords": "Method tr2 | Improve this Doc View Source tr2(Double[,], Double[,]) Make a linear interpolation transformation for grid to world mapping using doubly dimensioned coordinate arrays. Declaration public static TransformFunc tr2(Double[, ] xg, Double[, ] yg) Parameters Type Name Description Double [,] xg x targets Double [,] yg y targets Returns Type Description TransformFunc"
  },
  "api/PLplot.Native.setopt.html": {
    "href": "api/PLplot.Native.setopt.html",
    "title": "Method setopt | PLplot for .NET",
    "keywords": "Method setopt setopt(String, String) plsetopt: Set any command-line option Declaration public static Int32 setopt(string opt, string optarg) Parameters Type Name Description System.String opt An ascii character string containing the command-line option. System.String optarg An ascii character string containing the argument of the command-line option. Returns Type Description Int32 Remarks Set any command-line option internally from a program before it invokes plinit. opt is the name of the command-line option and optarg is the corresponding command-line option argument."
  },
  "api/PLplot.Native.parseopts.html": {
    "href": "api/PLplot.Native.parseopts.html",
    "title": "Method parseopts | PLplot for .NET",
    "keywords": "Method parseopts | Improve this Doc View Source parseopts(ref String[], ParseOpts) plparseopts: Parse command-line arguments Declaration public static Int32 parseopts(ref string[] argv, ParseOpts mode) Parameters Type Name Description System.String [] argv A vector of character strings containing *p_argc command-line arguments. ParseOpts mode Parsing mode with the following possibilities: PL_PARSE_FULL (1) -- Full parsing of command line and all error messages enabled, including program exit when an error occurs. Anything on the command line that isn't recognized as a valid option or option argument is flagged as an error. PL_PARSE_QUIET (2) -- Turns off all output except in the case of errors. PL_PARSE_NODELETE (4) -- Turns off deletion of processed arguments. PL_PARSE_SHOWALL (8) -- Show invisible options PL_PARSE_NOPROGRAM (32) -- Specified if argv[0] is NOT a pointer to the program name. PL_PARSE_NODASH (64) -- Set if leading dash is NOT required. PL_PARSE_SKIP (128) -- Set to quietly skip over any unrecognized arguments. Returns Type Description Int32 Remarks Parse command-line arguments."
  },
  "api/PLplot.Native.OptUsage.html": {
    "href": "api/PLplot.Native.OptUsage.html",
    "title": "Method OptUsage | PLplot for .NET",
    "keywords": "Method OptUsage OptUsage() plOptUsage: Print usage and syntax message. Declaration public static void OptUsage() Remarks Prints the usage and syntax message. The message can also be displayed using the -h command line option. There is a default message describing the default PLplot options. The usage message is also modified by plSetUsage and plMergeOpts."
  },
  "api/PLplot.Native.gesc.html": {
    "href": "api/PLplot.Native.gesc.html",
    "title": "Method gesc | PLplot for .NET",
    "keywords": "Method gesc gesc(out Char) Get the escape character for text strings. Declaration public static void gesc(out Char p_esc) Parameters Type Name Description Char p_esc"
  },
  "api/PLplot.Native.cmd.html": {
    "href": "api/PLplot.Native.cmd.html",
    "title": "Method cmd | PLplot for .NET",
    "keywords": "Method cmd cmd(Int32, IntPtr) Front-end to driver escape function. Declaration public static void cmd(Int32 op, IntPtr ptr) Parameters Type Name Description Int32 op IntPtr ptr"
  },
  "api/PLplot.Native.GetCursor.html": {
    "href": "api/PLplot.Native.GetCursor.html",
    "title": "Method GetCursor | PLplot for .NET",
    "keywords": "Method GetCursor GetCursor(out GraphicsIn) plGetCursor: Wait for graphics input event and translate to world coordinates. Declaration public static Int32 GetCursor(out GraphicsIn gin) Parameters Type Name Description GraphicsIn gin Pointer to PLGraphicsIn structure which will contain the output. The structure is not allocated by the routine and must exist before the function is called. Returns Type Description Int32 Remarks Wait for graphics input event and translate to world coordinates. Returns 0 if no translation to world coordinates is possible."
  },
  "api/PLplot.Native.TranslateCursor.html": {
    "href": "api/PLplot.Native.TranslateCursor.html",
    "title": "Method TranslateCursor | PLplot for .NET",
    "keywords": "Method TranslateCursor TranslateCursor(ref GraphicsIn) plTranslateCursor: Convert device to world coordinates Declaration public static Int32 TranslateCursor(ref GraphicsIn gin) Parameters Type Name Description GraphicsIn gin Pointer to a PLGraphicsIn structure to hold the input and output coordinates. Returns Type Description Int32 Remarks Convert from device to world coordinates. The variable gin must have members dX and dY set before the call.These represent the coordinates of the point as a fraction of the total drawing area. If the point passed in is on a window then the function returns 1, members wX and wY will be filled with the world coordinates of that point and the subwindow member will be filled with the index of the window on which the point falls. If the point falls on more than one window (because they overlap) then the window with the lowest index is used. If the point does not fall on a window then the function returns 0, wX and wY are set to 0 and subwindow remains unchanged."
  },
  "api/PLplot.Native.sdevdata.html": {
    "href": "api/PLplot.Native.sdevdata.html",
    "title": "Method sdevdata | PLplot for .NET",
    "keywords": "Method sdevdata sdevdata(IntPtr) Set the pointer to the data used in driver initialisation Declaration public static void sdevdata(IntPtr data) Parameters Type Name Description IntPtr data"
  },
  "api/PLplot.ZAxisOpt.None.html": {
    "href": "api/PLplot.ZAxisOpt.None.html",
    "title": "Field None | PLplot for .NET",
    "keywords": "Field None No options. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string None = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.DrawLeft.html": {
    "href": "api/PLplot.ZAxisOpt.DrawLeft.html",
    "title": "Field DrawLeft | PLplot for .NET",
    "keywords": "Field DrawLeft Draws z axis to the left of the surface plot. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawLeft = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.DrawRight.html": {
    "href": "api/PLplot.ZAxisOpt.DrawRight.html",
    "title": "Field DrawRight | PLplot for .NET",
    "keywords": "Field DrawRight Draws z axis to the right of the surface plot. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawRight = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.Grid.html": {
    "href": "api/PLplot.ZAxisOpt.Grid.html",
    "title": "Field Grid | PLplot for .NET",
    "keywords": "Field Grid Draws grid lines parallel to the x-y plane behind the figure. These lines are not drawn until after plot3d or plmesh are called because of the need for hidden line removal. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string Grid = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.DateTime.html": {
    "href": "api/PLplot.ZAxisOpt.DateTime.html",
    "title": "Field DateTime | PLplot for .NET",
    "keywords": "Field DateTime Plot labels as date / time. Values are assumed to be seconds since the epoch (as used by gmtime). Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DateTime = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.FixedPoint.html": {
    "href": "api/PLplot.ZAxisOpt.FixedPoint.html",
    "title": "Field FixedPoint | PLplot for .NET",
    "keywords": "Field FixedPoint Always use fixed point numeric labels. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string FixedPoint = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.InvertTickMarks.html": {
    "href": "api/PLplot.ZAxisOpt.InvertTickMarks.html",
    "title": "Field InvertTickMarks | PLplot for .NET",
    "keywords": "Field InvertTickMarks Inverts tick marks, so they are drawn outwards, rather than inwards. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string InvertTickMarks = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.Log.html": {
    "href": "api/PLplot.ZAxisOpt.Log.html",
    "title": "Field Log | PLplot for .NET",
    "keywords": "Field Log Labels axis logarithmically. This only affects the labels, not the data, and so it is necessary to compute the logarithms of data points before passing them to any of the drawing routines. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string Log = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.RightHandLabels.html": {
    "href": "api/PLplot.ZAxisOpt.RightHandLabels.html",
    "title": "Field RightHandLabels | PLplot for .NET",
    "keywords": "Field RightHandLabels Writes numeric labels at major tick intervals on the right-hand z axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string RightHandLabels = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.LeftHandLabels.html": {
    "href": "api/PLplot.ZAxisOpt.LeftHandLabels.html",
    "title": "Field LeftHandLabels | PLplot for .NET",
    "keywords": "Field LeftHandLabels Writes numeric labels at major tick intervals on the left-hand z axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string LeftHandLabels = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.CustomLabels.html": {
    "href": "api/PLplot.ZAxisOpt.CustomLabels.html",
    "title": "Field CustomLabels | PLplot for .NET",
    "keywords": "Field CustomLabels Use custom labelling function to generate axis label text. The custom labelling function can be defined with the plslabelfunc command. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string CustomLabels = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.SubTicks.html": {
    "href": "api/PLplot.ZAxisOpt.SubTicks.html",
    "title": "Field SubTicks | PLplot for .NET",
    "keywords": "Field SubTicks Enables subticks between major ticks, only valid if t is also specified. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string SubTicks = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.MajorTicks.html": {
    "href": "api/PLplot.ZAxisOpt.MajorTicks.html",
    "title": "Field MajorTicks | PLplot for .NET",
    "keywords": "Field MajorTicks Draws major ticks. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string MajorTicks = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.LabelLeft.html": {
    "href": "api/PLplot.ZAxisOpt.LabelLeft.html",
    "title": "Field LabelLeft | PLplot for .NET",
    "keywords": "Field LabelLeft If this is specified, the text label is written beside the left-hand axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string LabelLeft = null Returns Type Description System.String"
  },
  "api/PLplot.ZAxisOpt.LabelRight.html": {
    "href": "api/PLplot.ZAxisOpt.LabelRight.html",
    "title": "Field LabelRight | PLplot for .NET",
    "keywords": "Field LabelRight If this is specified, the text label is written beside the right-hand axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string LabelRight = null Returns Type Description System.String"
  },
  "api/PLplot.Symbol.Dot.html": {
    "href": "api/PLplot.Symbol.Dot.html",
    "title": "Field Dot | PLplot for .NET",
    "keywords": "Field Dot Dot Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char Dot = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.Plus.html": {
    "href": "api/PLplot.Symbol.Plus.html",
    "title": "Field Plus | PLplot for .NET",
    "keywords": "Field Plus Plus Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char Plus = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.Multiply.html": {
    "href": "api/PLplot.Symbol.Multiply.html",
    "title": "Field Multiply | PLplot for .NET",
    "keywords": "Field Multiply Multiply Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char Multiply = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.Circle.html": {
    "href": "api/PLplot.Symbol.Circle.html",
    "title": "Field Circle | PLplot for .NET",
    "keywords": "Field Circle Circle Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char Circle = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.Times.html": {
    "href": "api/PLplot.Symbol.Times.html",
    "title": "Field Times | PLplot for .NET",
    "keywords": "Field Times Times Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char Times = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.Box.html": {
    "href": "api/PLplot.Symbol.Box.html",
    "title": "Field Box | PLplot for .NET",
    "keywords": "Field Box Box Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char Box = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.Triangle.html": {
    "href": "api/PLplot.Symbol.Triangle.html",
    "title": "Field Triangle | PLplot for .NET",
    "keywords": "Field Triangle Triangle Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char Triangle = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.PlusCircle.html": {
    "href": "api/PLplot.Symbol.PlusCircle.html",
    "title": "Field PlusCircle | PLplot for .NET",
    "keywords": "Field PlusCircle Plus within circle Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char PlusCircle = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.DotCircle.html": {
    "href": "api/PLplot.Symbol.DotCircle.html",
    "title": "Field DotCircle | PLplot for .NET",
    "keywords": "Field DotCircle Dot within circle Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char DotCircle = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.FilledBox.html": {
    "href": "api/PLplot.Symbol.FilledBox.html",
    "title": "Field FilledBox | PLplot for .NET",
    "keywords": "Field FilledBox Filled box Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char FilledBox = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.Bullet.html": {
    "href": "api/PLplot.Symbol.Bullet.html",
    "title": "Field Bullet | PLplot for .NET",
    "keywords": "Field Bullet Bullet Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char Bullet = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.Star.html": {
    "href": "api/PLplot.Symbol.Star.html",
    "title": "Field Star | PLplot for .NET",
    "keywords": "Field Star Star Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char Star = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.LeftArrow.html": {
    "href": "api/PLplot.Symbol.LeftArrow.html",
    "title": "Field LeftArrow | PLplot for .NET",
    "keywords": "Field LeftArrow Left arrow Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char LeftArrow = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.RightArrow.html": {
    "href": "api/PLplot.Symbol.RightArrow.html",
    "title": "Field RightArrow | PLplot for .NET",
    "keywords": "Field RightArrow Right arrow Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char RightArrow = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.UpArrow.html": {
    "href": "api/PLplot.Symbol.UpArrow.html",
    "title": "Field UpArrow | PLplot for .NET",
    "keywords": "Field UpArrow Up arrow Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char UpArrow = null Returns Type Description System.Char"
  },
  "api/PLplot.Symbol.DownArrow.html": {
    "href": "api/PLplot.Symbol.DownArrow.html",
    "title": "Field DownArrow | PLplot for .NET",
    "keywords": "Field DownArrow Down arrow Namespace : PLplot Assembly : PLplotNet.dll Syntax public const char DownArrow = null Returns Type Description System.Char"
  },
  "api/PLplot.XYAxisOpt.None.html": {
    "href": "api/PLplot.XYAxisOpt.None.html",
    "title": "Field None | PLplot for .NET",
    "keywords": "Field None No options. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string None = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DrawAxis.html": {
    "href": "api/PLplot.XYAxisOpt.DrawAxis.html",
    "title": "Field DrawAxis | PLplot for .NET",
    "keywords": "Field DrawAxis Draws axis, X-axis is horizontal line (y=0), and Y-axis is vertical line (x=0). Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawAxis = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DrawLeft.html": {
    "href": "api/PLplot.XYAxisOpt.DrawLeft.html",
    "title": "Field DrawLeft | PLplot for .NET",
    "keywords": "Field DrawLeft Draws left (for Y-axis) edge of frame. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawLeft = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DrawBottom.html": {
    "href": "api/PLplot.XYAxisOpt.DrawBottom.html",
    "title": "Field DrawBottom | PLplot for .NET",
    "keywords": "Field DrawBottom Draws bottom (for X-axis) edge of frame. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawBottom = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DrawTop.html": {
    "href": "api/PLplot.XYAxisOpt.DrawTop.html",
    "title": "Field DrawTop | PLplot for .NET",
    "keywords": "Field DrawTop Draws top (for X-axis) edge of frame. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawTop = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DrawRight.html": {
    "href": "api/PLplot.XYAxisOpt.DrawRight.html",
    "title": "Field DrawRight | PLplot for .NET",
    "keywords": "Field DrawRight Draws right (for Y-axis) edge of frame. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawRight = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DateTime.html": {
    "href": "api/PLplot.XYAxisOpt.DateTime.html",
    "title": "Field DateTime | PLplot for .NET",
    "keywords": "Field DateTime Plot labels as date / time. Values are assumed to be seconds since the epoch (as used by gmtime). Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DateTime = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.FixedPoint.html": {
    "href": "api/PLplot.XYAxisOpt.FixedPoint.html",
    "title": "Field FixedPoint | PLplot for .NET",
    "keywords": "Field FixedPoint Always use fixed point numeric labels. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string FixedPoint = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.MajorGrid.html": {
    "href": "api/PLplot.XYAxisOpt.MajorGrid.html",
    "title": "Field MajorGrid | PLplot for .NET",
    "keywords": "Field MajorGrid Draws a grid at the major tick interval. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string MajorGrid = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.MinorGrid.html": {
    "href": "api/PLplot.XYAxisOpt.MinorGrid.html",
    "title": "Field MinorGrid | PLplot for .NET",
    "keywords": "Field MinorGrid Draws a grid at the minor tick interval. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string MinorGrid = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.InvertTickMarks.html": {
    "href": "api/PLplot.XYAxisOpt.InvertTickMarks.html",
    "title": "Field InvertTickMarks | PLplot for .NET",
    "keywords": "Field InvertTickMarks Inverts tick marks, so they are drawn outwards, rather than inwards. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string InvertTickMarks = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.Log.html": {
    "href": "api/PLplot.XYAxisOpt.Log.html",
    "title": "Field Log | PLplot for .NET",
    "keywords": "Field Log Labels axis logarithmically. This only affects the labels, not the data, and so it is necessary to compute the logarithms of data points before passing them to any of the drawing routines. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string Log = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.UnconventionalLabels.html": {
    "href": "api/PLplot.XYAxisOpt.UnconventionalLabels.html",
    "title": "Field UnconventionalLabels | PLplot for .NET",
    "keywords": "Field UnconventionalLabels Writes numeric labels at major tick intervals in the unconventional location (above box for X, right of box for Y). Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string UnconventionalLabels = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.ConventionalLabels.html": {
    "href": "api/PLplot.XYAxisOpt.ConventionalLabels.html",
    "title": "Field ConventionalLabels | PLplot for .NET",
    "keywords": "Field ConventionalLabels Writes numeric labels at major tick intervals in the conventional location (below box for X, left of box for Y). Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string ConventionalLabels = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.CustomLabels.html": {
    "href": "api/PLplot.XYAxisOpt.CustomLabels.html",
    "title": "Field CustomLabels | PLplot for .NET",
    "keywords": "Field CustomLabels Use custom labelling function to generate axis label text. The custom labelling function can be defined with the plslabelfunc command. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string CustomLabels = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.SubTicks.html": {
    "href": "api/PLplot.XYAxisOpt.SubTicks.html",
    "title": "Field SubTicks | PLplot for .NET",
    "keywords": "Field SubTicks Enables subticks between major ticks, only valid if t is also specified. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string SubTicks = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.MajorTicks.html": {
    "href": "api/PLplot.XYAxisOpt.MajorTicks.html",
    "title": "Field MajorTicks | PLplot for .NET",
    "keywords": "Field MajorTicks Draws major ticks. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string MajorTicks = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DrawLeftWithoutEdgeLine.html": {
    "href": "api/PLplot.XYAxisOpt.DrawLeftWithoutEdgeLine.html",
    "title": "Field DrawLeftWithoutEdgeLine | PLplot for .NET",
    "keywords": "Field DrawLeftWithoutEdgeLine Draws left (for Y-axis) edge of frame without edge line. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawLeftWithoutEdgeLine = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DrawBottomWithoutEdgeLine.html": {
    "href": "api/PLplot.XYAxisOpt.DrawBottomWithoutEdgeLine.html",
    "title": "Field DrawBottomWithoutEdgeLine | PLplot for .NET",
    "keywords": "Field DrawBottomWithoutEdgeLine Draws bottom (for X-axis) edge of frame without edge line. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawBottomWithoutEdgeLine = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DrawTopWithoutEdgeLine.html": {
    "href": "api/PLplot.XYAxisOpt.DrawTopWithoutEdgeLine.html",
    "title": "Field DrawTopWithoutEdgeLine | PLplot for .NET",
    "keywords": "Field DrawTopWithoutEdgeLine Draws top (for X-axis) edge of frame without edge line. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawTopWithoutEdgeLine = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.DrawRightWithoutEdgeLine.html": {
    "href": "api/PLplot.XYAxisOpt.DrawRightWithoutEdgeLine.html",
    "title": "Field DrawRightWithoutEdgeLine | PLplot for .NET",
    "keywords": "Field DrawRightWithoutEdgeLine Draws right (for Y-axis) edge of frame without edge line. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string DrawRightWithoutEdgeLine = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.MajorTicksWithoutMarks.html": {
    "href": "api/PLplot.XYAxisOpt.MajorTicksWithoutMarks.html",
    "title": "Field MajorTicksWithoutMarks | PLplot for .NET",
    "keywords": "Field MajorTicksWithoutMarks Draws major ticks (including the side effect of the numerical labels for the major ticks) except exclude drawing the major and minor tick marks. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string MajorTicksWithoutMarks = null Returns Type Description System.String"
  },
  "api/PLplot.XYAxisOpt.BaseParallelLabels.html": {
    "href": "api/PLplot.XYAxisOpt.BaseParallelLabels.html",
    "title": "Field BaseParallelLabels | PLplot for .NET",
    "keywords": "Field BaseParallelLabels Write numeric labels for the y axis parallel to the base of the graph, rather than parallel to the axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string BaseParallelLabels = null Returns Type Description System.String"
  },
  "api/PLplot.Side3.XAxis.html": {
    "href": "api/PLplot.Side3.XAxis.html",
    "title": "Field XAxis | PLplot for .NET",
    "keywords": "Field XAxis Label the X axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string XAxis = null Returns Type Description System.String"
  },
  "api/PLplot.Side3.YAxis.html": {
    "href": "api/PLplot.Side3.YAxis.html",
    "title": "Field YAxis | PLplot for .NET",
    "keywords": "Field YAxis Label the Y axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string YAxis = null Returns Type Description System.String"
  },
  "api/PLplot.Side3.ZAxis.html": {
    "href": "api/PLplot.Side3.ZAxis.html",
    "title": "Field ZAxis | PLplot for .NET",
    "keywords": "Field ZAxis Label the Z axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string ZAxis = null Returns Type Description System.String"
  },
  "api/PLplot.Side3.PrimaryAxis.html": {
    "href": "api/PLplot.Side3.PrimaryAxis.html",
    "title": "Field PrimaryAxis | PLplot for .NET",
    "keywords": "Field PrimaryAxis Label the “primary” axis. For Z this is the leftmost Z axis. For X it is the axis that starts at y-min. For Y it is the axis that starts at x-min. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string PrimaryAxis = null Returns Type Description System.String"
  },
  "api/PLplot.Side3.SecondaryAxis.html": {
    "href": "api/PLplot.Side3.SecondaryAxis.html",
    "title": "Field SecondaryAxis | PLplot for .NET",
    "keywords": "Field SecondaryAxis Label the “secondary” axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string SecondaryAxis = null Returns Type Description System.String"
  },
  "api/PLplot.Side3.Perpendicular.html": {
    "href": "api/PLplot.Side3.Perpendicular.html",
    "title": "Field Perpendicular | PLplot for .NET",
    "keywords": "Field Perpendicular Draw the text perpendicular to the axis. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string Perpendicular = null Returns Type Description System.String"
  },
  "api/PLplot.Side.BottomParallel.html": {
    "href": "api/PLplot.Side.BottomParallel.html",
    "title": "Field BottomParallel | PLplot for .NET",
    "keywords": "Field BottomParallel Bottom of viewport, text written parallel to edge. Namespace : PLplot Assembly : PLplotNet.dll Syntax public const string BottomParallel = null Returns Type Description System.String"
  },
  "Examples.html": {
    "href": "Examples.html",
    "title": "PLplot examples | PLplot for .NET",
    "keywords": "PLplot examples Simple line plot The following code demonstrates how to create a simple line plot from F#. For an example using C#, please visit see here . All PLplot operations are invoked through an instance of a PLStream object . open System open PLplot [<EntryPoint>] let main argv = // create PLplot stream use pl = new PLStream() // generate data let nsize = 101 let xmin, xmax, ymin, ymax = 0., 1., 0., 100. let x, y = Array.init nsize (fun i -> let x = float i / float (nsize - 1) let y = ymax * x * x x, y) |> Array.unzip // Parse and process command line arguments. // This grabs PLplot-specific arguments, such as output device, from the // command line. let mutable argv = argv pl.parseopts( &argv, ParseOpts.Full ||| ParseOpts.NoProgram ) |> ignore // Initialize plplot pl.init() // Create a labelled box to hold the plot. pl.env( xmin, xmax, ymin, ymax, AxesScale.Independent, AxisBox.BoxTicksLabelsAxes ) pl.lab( \"x\", \"y=100 x#u2#d\", \"Simple PLplot demo of a 2D line plot\" ) // Plot the data that was prepared above. pl.line( x, y ) // PLplot is automatically closed when pl is disposed. 0 The project must reference the PLplot package. This can be done by executing the following command inside the project directory. dotnet add package PLplot When run, the above program produces the following output. Don't worry, the colors can be customized easily using the spal0 function . Read the official guide for more information. More examples Further examples are located in the project repository at https://github.com/surban/PLplotNet/tree/master/Samples . The native PLplot example gallery demonstrates all possible plot types the library has to offer."
  },
  "ReleaseNotes.html": {
    "href": "ReleaseNotes.html",
    "title": "Release Notes | PLplot for .NET",
    "keywords": "Release Notes 5.13.7 MacOS support. 5.13.6 Improved NuGet package."
  },
  "index.html": {
    "href": "index.html",
    "title": "PLplot for .NET | PLplot for .NET",
    "keywords": "PLplot for .NET PLplot is a cross-platform software package for creating scientific plots whose (UTF-8) plot symbols and text are limited in practice only by what Unicode-aware system fonts are installed on a user's computer. The open-source PLplot software is primarily licensed under the LGPL . The PLplot core library can be used to create standard x-y plots, semi-log plots, log-log plots, contour plots, 3D surface plots, mesh plots, bar charts and pie charts. Multiple graphs (of the same or different sizes) may be placed on a single page, and multiple pages are allowed for those device formats that support them. The following output file formats are supported: PDF, PNG, JPEG, PostScript. Supported operating systems: Linux, MacOS, Windows. Click here to see a full gallery of PLplot's abilities. .NET Standard 2.0 bindings This project provides a complete, but unofficial, .NET binding for PLplot. It allows you to use PLplot from C#, F#, Visual Basic or any other .NET language. We are targeting .NET Standard 2.0 and have tested the bindings on Linux, MacOS and Windows. The simplest way of installing the package is to run the following command from inside your project directory. dotnet add package PLplot Alternatively you can download the NuGet package from https://www.nuget.org/packages/PLplot . Linux For Linux, PLplot must be pre-installed on your system, i.e. we are expecting to find libplplot.so.15 in your LD_LIBRARY_PATH . Usually a recent package from your favorite distribution will work fine. On Ubuntu you can run the following command to install the necessary dependencies. sudo apt install libplplot15 plplot-driver-cairo MacOS On MacOS, PLplot must also be pre-installed on your system. We are expecting to find libplplot.dylib in your LD_LIBRARY_PATH . Using Homebrew the necessary dependencies can be installed by running the following command. brew install plplot Windows The native libraries for Windows (x64) are included, so you don't have to worry about them. The only requirement is that the Microsoft Visual C++ Redistributable 2017 is installed on your system. Documentation Check out the introductory examples to get started. The official PLplot manual explains how to use the library in great detail. All principles described therein also apply to the .NET library. We also provide mostly complete reference documentation . Source code Source code is available at https://github.com/surban/PLplotNet . Please use GitHub to report trouble with the library and send me your pull request. Authors Sebastian Urban (.NET bindings) PLplot developers"
  },
  "api/PLplot.PLStream.html": {
    "href": "api/PLplot.PLStream.html",
    "title": "Class PLStream | PLplot for .NET",
    "keywords": "Class PLStream A PLplot stream. Inheritance System.Object PLStream Namespace : PLplot Assembly : PLplotNet.dll Syntax public class PLStream : IDisposable Remarks A new PLplot stream is created when this class is instantiated. The PLplot stream is ended when the instance is disposed. An instance is thread-safe, however all calls from all instances are serialized. Constructors Name Description PLStream() Creates a new PLplot stream. Properties Name Description Id The stream id of this stream as returned by plgstrm(). Methods Name Description adv(Int32) pladv: Advance the (sub-)page arc(Double, Double, Double, Double, Double, Double, Double, Boolean) plarc: Draw a circular or elliptical arc axes(Double, Double, String, Double, Int32, String, Double, Int32) plaxes: Draw a box with axes, etc. with arbitrary origin bin(Double[], Double[], Bin) plbin: Plot a histogram from binned data bop() plbop: Begin a new page box(String, Double, Int32, String, Double, Int32) plbox: Draw a box with axes, etc box3(String, String, Double, Int32, String, String, Double, Int32, String, String, Double, Int32) plbox3: Draw a box with axes, etc, in 3-d btime(out Int32, out Int32, out Int32, out Int32, out Int32, out Double, Double) plbtime: Calculate broken-down time from continuous time for the current stream calc_world(Double, Double, out Double, out Double, out Int32) plcalc_world: Calculate world coordinates and corresponding window index from relative device coordinates clear() plclear: Clear current (sub)page cmd(Int32, IntPtr) Front-end to driver escape function. col0(Int32) plcol0: Set color, cmap0 col1(Double) plcol1: Set color, cmap1 colorbar(out Double, out Double, Colorbar, Position, Double, Double, Double, Double, Int32, Int32, Int32, Double, Double, Int32, Double, ColorbarLabel[], String[], String[], Double[], Int32[], Double[,]) plcolorbar: Plot color bar for image, shade or gradient plots configtime(Double, Double, Double, Int32, Boolean, Int32, Int32, Int32, Int32, Int32, Double) plconfigtime: Configure the transformation between continuous and broken-down time for the current stream cont(Double[,], Int32, Int32, Int32, Int32, Double[], TransformFunc) plcont: Contour plot cpstrm(PLStream, Boolean) plcpstrm: Copy state parameters from the reference stream to the current stream ctime(Int32, Int32, Int32, Int32, Int32, Double, out Double) plctime: Calculate continuous time from broken-down time for the current stream did2pc(out Double, out Double, out Double, out Double) Converts input values from relative device coordinates to relative plot coordinates. dip2dc(out Double, out Double, out Double, out Double) Converts input values from relative plot coordinates to relative device coordinates. env(Double, Double, Double, Double, AxesScale, AxisBox) plenv: Set up standard window and draw box env0(Double, Double, Double, Double, AxesScale, AxisBox) plenv0: Same as plenv but if in multiplot mode does not advance the subpage, instead clears it eop() pleop: Eject current page errx(Double[], Double[], Double[]) plerrx: Draw error bars in x direction erry(Double[], Double[], Double[]) plerry: Draw error bars in the y direction famadv() plfamadv: Advance to the next family file on the next new page fill(Double[], Double[]) plfill: Draw filled polygon fill3(Double[], Double[], Double[]) plfill3: Draw filled polygon in 3D Finalize() Ends the PLplot stream. flush() plflush: Flushes the output stream font(FontFlag) plfont: Set font fontld(Int32) plfontld: Load Hershey fonts gchr(out Double, out Double) plgchr: Get character default height and current (scaled) height gcmap1_range(out Double, out Double) plgcmap1_range: Get the cmap1 argument range for continuous color plots gcol0(Int32, out Int32, out Int32, out Int32) plgcol0: Returns 8-bit RGB values for given color index from cmap0 gcol0a(Int32, out Int32, out Int32, out Int32, out Double) plgcol0a: Returns 8-bit RGB values and PLFLT alpha transparency value for given color index from cmap0 gcolbg(out Int32, out Int32, out Int32) plgcolbg: Returns the background color (cmap0[0]) by 8-bit RGB value gcolbga(out Int32, out Int32, out Int32, out Double) plgcolbga: Returns the background color (cmap0[0]) by 8-bit RGB value and PLFLT alpha transparency value gcompression(out Int32) plgcompression: Get the current device-compression setting gdev(out String) plgdev: Get the current device (keyword) name gDevs(out String[], out String[]) Returns a list of all device names and their menu strings gdidev(out Double, out Double, out Double, out Double) plgdidev: Get parameters that define current device-space window gdiori(out Double) plgdiori: Get plot orientation gdiplt(out Double, out Double, out Double, out Double) plgdiplt: Get parameters that define current plot-space window gdrawmode() plgdrawmode: Get drawing mode (depends on device support!) gesc(out Char) Get the escape character for text strings. GetCursor(out GraphicsIn) plGetCursor: Wait for graphics input event and translate to world coordinates. gfam(out Int32, out Int32, out Int32) plgfam: Get family file parameters gfci(out FCI) plgfci: Get FCI (font characterization integer) gFileDevs(out String[], out String[]) Returns a list of file-oriented device names and their menu strings gfnam(out String) plgfnam: Get output file name gfont(out FontFamily, out FontStyle, out FontWeight) plgfont: Get family, style and weight of the current font glevel(out RunLevel) plglevel: Get the (current) run level gpage(out Double, out Double, out Int32, out Int32, out Int32, out Int32) plgpage: Get page parameters gra() plgra: Switch to graphics screen gradient(Double[], Double[], Double) plgradient: Draw linear gradient inside polygon griddata(Double[], Double[], Double[], Double[], Double[], Double[,], Grid, Double) plgriddata: Grid data from irregularly sampled data gspa(out Double, out Double, out Double, out Double) plgspa: Get current subpage parameters gstrm(out Int32) plgstrm: Get current stream number gver(out String) plgver: Get the current library version number gvpd(out Double, out Double, out Double, out Double) plgvpd: Get viewport limits in normalized device coordinates gvpw(out Double, out Double, out Double, out Double) plgvpw: Get viewport limits in world coordinates gxax(out Int32, out Int32) plgxax: Get x axis parameters gyax(out Int32, out Int32) plgyax: Get y axis parameters gzax(out Int32, out Int32) plgzax: Get z axis parameters hist(Double[], Double, Double, Int32, Hist) plhist: Plot a histogram from unbinned data hlsrgb(Double, Double, Double, out Double, out Double, out Double) plhlsrgb: Convert HLS color to RGB image(Double[,], Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) plimage: Plot a 2D matrix using cmap1 with automatic color adjustment imagefr(Double[,], Double, Double, Double, Double, Double, Double, Double, Double, TransformFunc) plimagefr: Plot a 2D matrix using cmap1 init() plinit: Initialize PLplot join(Double, Double, Double, Double) pljoin: Draw a line between two points lab(String, String, String) pllab: Simple routine to write labels legend(out Double, out Double, Legend, Position, Double, Double, Double, Int32, Int32, LineStyle, Int32, Int32, LegendEntry[], Double, Double, Double, Double, Int32[], String[], Int32[], Pattern[], Double[], Double[], Int32[], LineStyle[], Double[], Int32[], Double[], Int32[], String[]) pllegend: Plot legend using discretely annotated filled boxes, lines, and/or lines of symbols lightsource(Double, Double, Double) pllightsource: Sets the 3D position of the light source line(Double[], Double[]) plline: Draw a line line3(Double[], Double[], Double[]) plline3: Draw a line in 3 space lsty(LineStyle) pllsty: Select line style map(MapFunc, String, Double, Double, Double, Double) plmap: Plot continental outline or shapefile data in world coordinates mapfill(MapFunc, String, Double, Double, Double, Double, Int32[]) plmapfill: Plot all or a subset of Shapefile data, filling the polygons mapline(MapFunc, String, Double, Double, Double, Double, Int32[]) plmapline: Plot all or a subset of Shapefile data using lines in world coordinates mapstring(MapFunc, String, String, Double, Double, Double, Double, Int32[]) plmapstring: Plot all or a subset of Shapefile data using strings or points in world coordinates maptex(MapFunc, String, Double, Double, Double, String, Double, Double, Double, Double, Int32) plmaptex: Draw text at points defined by Shapefile data in world coordinates meridians(MapFunc, Double, Double, Double, Double, Double, Double) plmeridians: Plot latitude and longitude lines mesh(Double[], Double[], Double[,], Mesh) plmesh: Plot surface mesh meshc(Double[], Double[], Double[,], MeshContour, Double[]) plmeshc: Magnitude colored plot surface mesh with contour mtex(String, Double, Double, Double, String) plmtex: Write text relative to viewport boundaries mtex3(String, Double, Double, Double, String) plmtex3: Write text relative to viewport boundaries in 3D plots OptUsage() plOptUsage: Print usage and syntax message. parseopts(ref String[], ParseOpts) plparseopts: Parse command-line arguments pat(Int32[], Int32[]) plpat: Set area line fill pattern path(Int32, Double, Double, Double, Double) plpath: Draw a line between two points, accounting for coordinate transforms plot3d(Double[], Double[], Double[,], Mesh, Boolean) plot3d: Plot 3-d surface plot plot3dc(Double[], Double[], Double[,], MeshContour, Double[]) plot3dc: Magnitude colored plot surface with contour plot3dcl(Double[], Double[], Double[,], MeshContour, Double[], Int32, Int32[], Int32[]) plot3dcl: Magnitude colored plot surface with contour for z[x][y] with y index limits poin(Double[], Double[], Char) plpoin: Plot a glyph at the specified points poin3(Double[], Double[], Double[], Char) plpoin3: Plot a glyph at the specified 3D points poly3(Double[], Double[], Double[], Boolean[], Boolean) plpoly3: Draw a polygon in 3 space prec(Int32, Int32) plprec: Set precision in numeric labels psty(Pattern) plpsty: Select area fill pattern ptex(Double, Double, Double, Double, Double, String) plptex: Write text inside the viewport ptex3(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, String) plptex3: Write text inside the viewport of a 3D plot randd() plrandd: Random number generator returning a real random number in the range [0,1] replot() plreplot: Replays contents of plot buffer to current device/file rgbhls(Double, Double, Double, out Double, out Double, out Double) plrgbhls: Convert RGB color to HLS sabort(AbortHandler) plsabort: Set abort handler sbopH(BopHandler, IntPtr) Sets an optional user bop handler sButtonEH(ButtonHandler, IntPtr) Set the function pointer for the (mouse) button event handler schr(Double, Double) plschr: Set character size scmap0(Int32[], Int32[], Int32[]) plscmap0: Set cmap0 colors by 8-bit RGB values scmap0a(Int32[], Int32[], Int32[], Double[]) plscmap0a: Set cmap0 colors by 8-bit RGB values and PLFLT alpha transparency value scmap0n(Int32) plscmap0n: Set number of colors in cmap0 scmap1(Int32[], Int32[], Int32[]) plscmap1: Set opaque RGB cmap1 colors values scmap1_range(Double, Double) plscmap1_range: Set the cmap1 argument range for continuous color plots scmap1a(Int32[], Int32[], Int32[], Double[]) plscmap1a: Set semitransparent cmap1 RGBA colors. scmap1l(ColorSpace, Double[], Double[], Double[], Double[], Boolean[]) plscmap1l: Set cmap1 colors using a piece-wise linear relationship scmap1la(ColorSpace, Double[], Double[], Double[], Double[], Double[], Boolean[]) plscmap1la: Set cmap1 colors and alpha transparency using a piece-wise linear relationship scmap1n(Int32) plscmap1n: Set number of colors in cmap1 scol0(Int32, Int32, Int32, Int32) plscol0: Set 8-bit RGB values for given cmap0 color index scol0a(Int32, Int32, Int32, Int32, Double) plscol0a: Set 8-bit RGB values and PLFLT alpha transparency value for given cmap0 color index scolbg(Int32, Int32, Int32) plscolbg: Set the background color by 8-bit RGB value scolbga(Int32, Int32, Int32, Double) plscolbga: Set the background color by 8-bit RGB value and PLFLT alpha transparency value. scolor(Int32) plscolor: Used to globally turn color output on/off scompression(Int32) plscompression: Set device-compression level sdev(String) plsdev: Set the device (keyword) name sdevdata(IntPtr) Set the pointer to the data used in driver initialisation sdidev(Double, Double, Double, Double) plsdidev: Set parameters that define current device-space window sdimap(Int32, Int32, Int32, Int32, Double, Double) plsdimap: Set up transformation from metafile coordinates sdiori(Double) plsdiori: Set plot orientation sdiplt(Double, Double, Double, Double) plsdiplt: Set parameters that define current plot-space window sdiplz(Double, Double, Double, Double) plsdiplz: Set parameters incrementally (zoom mode) that define current plot-space window sdrawmode(DrawMode) plsdrawmode: Set drawing mode (depends on device support!) seed(UInt32) plseed: Set seed for internal random number generator. seopH(EopHandler, IntPtr) Sets an optional user eop handler sesc(Char) plsesc: Set the escape character for text strings setcontlabelformat(Int32, Int32) pl_setcontlabelformat: Set format of numerical label for contours setcontlabelparam(Double, Double, Double, Int32) pl_setcontlabelparam: Set parameters of contour labelling other than format of numerical label setopt(String, String) plsetopt: Set any command-line option sexit(ExitHandler) plsexit: Set exit handler sfam(Int32, Int32, Int32) plsfam: Set family file parameters sfci(FCI) plsfci: Set FCI (font characterization integer) sfnam(String) plsfnam: Set output file name sfont(FontFamily, FontStyle, FontWeight) plsfont: Set family, style and weight of the current font shade(Double[,], DefinedFunc, Double, Double, Double, Double, Double, Double, Int32, Double, Double, Int32, Double, Int32, Double, Boolean, TransformFunc) plshade: Shade individual region on the basis of value shades(Double[,], DefinedFunc, Double, Double, Double, Double, Double[], Double, Int32, Double, Boolean, TransformFunc) plshades: Shade regions on the basis of value sKeyEH(KeyHandler, IntPtr) Set the function pointer for the keyboard event handler slabelfunc(LabelFunc, IntPtr) plslabelfunc: Assign a function to use for generating custom axis labels smaj(Double, Double) plsmaj: Set length of major ticks smem(Int32, Int32, IntPtr) plsmem: Set the memory area to be plotted (RGB) smema(Int32, Int32, IntPtr) plsmema: Set the memory area to be plotted (RGBA) smin(Double, Double) plsmin: Set length of minor ticks sori(Orientation) plsori: Set orientation spage(Double, Double, Int32, Int32, Int32, Int32) plspage: Set page parameters spal0(String) plspal0: Set the cmap0 palette using the specified cmap0*.pal format file spal1(String, Boolean) plspal1: Set the cmap1 palette using the specified cmap1*.pal format file spause(Boolean) plspause: Set the pause (on end-of-page) status ssub(Int32, Int32) plssub: Set the number of subpages in x and y ssym(Double, Double) plssym: Set symbol size star(Int32, Int32) plstar: Initialization start(String, Int32, Int32) plstart: Initialization stransform(TransformFunc) plstransform: Set a global coordinate transform function string2(Double[], Double[], String) string3(Double[], Double[], Double[], String) plstring3: Plot a glyph at the specified 3D points stripa(Int32, Pen, Double, Double) plstripa: Add a point to a strip chart stripc(out Int32, String, String, Double, Double, Double, Double, Double, Double, Double, Boolean, Boolean, Int32, Int32, Int32[], LineStyle[], String[], String, String, String) plstripc: Create a 4-pen strip chart stripd(Int32) plstripd: Deletes and releases memory used by a strip chart styl(Int32[], Int32[]) plstyl: Set line style surf3d(Double[], Double[], Double[,], Surf, Double[]) plsurf3d: Plot shaded 3-d surface plot surf3dl(Double[], Double[], Double[,], Surf, Double[], Int32, Int32[], Int32[]) plsurf3dl: Plot shaded 3-d surface plot for z[x][y] with y index limits svect(Double[], Double[], Boolean) plsvect: Set arrow style for vector plots svpa(Double, Double, Double, Double) plsvpa: Specify viewport in absolute coordinates sxax(Int32, Int32) plsxax: Set x axis parameters sxwin(Int32) Set inferior X window syax(Int32, Int32) plsyax: Set y axis parameters sym(Double[], Double[], Char) plsym: Plot a glyph at the specified points szax(Int32, Int32) plszax: Set z axis parameters text() pltext: Switch to text screen timefmt(String) pltimefmt: Set format for date / time labels ToString() tr0() Make a identity transformation for matrix index to world coordinate mapping. tr1(Double[], Double[]) Make a linear interpolation transformation for matrix index to world coordinate mapping using singly dimensioned coordinate arrays. tr2(Double[,], Double[,]) Make a linear interpolation transformation for grid to world mapping using doubly dimensioned coordinate arrays. TranslateCursor(ref GraphicsIn) plTranslateCursor: Convert device to world coordinates vasp(Double) plvasp: Specify viewport using aspect ratio only vect(Double[,], Double[,], Double, TransformFunc) plvect: Vector plot vpas(Double, Double, Double, Double, Double) plvpas: Specify viewport using coordinates and aspect ratio vpor(Double, Double, Double, Double) plvpor: Specify viewport using normalized subpage coordinates vsta() plvsta: Select standard viewport w3d(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) plw3d: Configure the transformations required for projecting a 3D surface on a 2D window width(Double) plwidth: Set pen width wind(Double, Double, Double, Double) plwind: Specify window xormod(Boolean, out Boolean) plxormod: Enter or leave xor mode"
  },
  "api/PLplot.Pen.html": {
    "href": "api/PLplot.Pen.html",
    "title": "Enum Pen | PLplot for .NET",
    "keywords": "Enum Pen Pen for strip chart Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Pen : int Fields Name Description Pen0 Pen 0 Pen1 Pen 1 Pen2 Pen 2 Pen3 Pen 3"
  },
  "api/PLplot.Orientation.html": {
    "href": "api/PLplot.Orientation.html",
    "title": "Enum Orientation | PLplot for .NET",
    "keywords": "Enum Orientation Page orientation Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Orientation : int Fields Name Description FlippedLandscape upsidedown landscape FlippedPortrait upsidedown portrait Landscape landscape Portrait portrait"
  },
  "api/PLplot.Native.html": {
    "href": "api/PLplot.Native.html",
    "title": "Class Native | PLplot for .NET",
    "keywords": "Class Native Native PLplot functions Inheritance System.Object Native Namespace : PLplot Assembly : PLplotNet.dll Syntax public static class Native : object Methods Name Description adv(Int32) pladv: Advance the (sub-)page arc(Double, Double, Double, Double, Double, Double, Double, Boolean) plarc: Draw a circular or elliptical arc axes(Double, Double, String, Double, Int32, String, Double, Int32) plaxes: Draw a box with axes, etc. with arbitrary origin bin(Double[], Double[], Bin) plbin: Plot a histogram from binned data bop() plbop: Begin a new page box(String, Double, Int32, String, Double, Int32) plbox: Draw a box with axes, etc box3(String, String, Double, Int32, String, String, Double, Int32, String, String, Double, Int32) plbox3: Draw a box with axes, etc, in 3-d btime(out Int32, out Int32, out Int32, out Int32, out Int32, out Double, Double) plbtime: Calculate broken-down time from continuous time for the current stream calc_world(Double, Double, out Double, out Double, out Int32) plcalc_world: Calculate world coordinates and corresponding window index from relative device coordinates clear() plclear: Clear current (sub)page cmd(Int32, IntPtr) Front-end to driver escape function. col0(Int32) plcol0: Set color, cmap0 col1(Double) plcol1: Set color, cmap1 colorbar(out Double, out Double, Colorbar, Position, Double, Double, Double, Double, Int32, Int32, Int32, Double, Double, Int32, Double, ColorbarLabel[], String[], String[], Double[], Int32[], Double[,]) plcolorbar: Plot color bar for image, shade or gradient plots configtime(Double, Double, Double, Int32, Boolean, Int32, Int32, Int32, Int32, Int32, Double) plconfigtime: Configure the transformation between continuous and broken-down time for the current stream cont(Double[,], Int32, Int32, Int32, Int32, Double[], TransformFunc) plcont: Contour plot cpstrm(Int32, Boolean) plcpstrm: Copy state parameters from the reference stream to the current stream ctime(Int32, Int32, Int32, Int32, Int32, Double, out Double) plctime: Calculate continuous time from broken-down time for the current stream did2pc(out Double, out Double, out Double, out Double) Converts input values from relative device coordinates to relative plot coordinates. dip2dc(out Double, out Double, out Double, out Double) Converts input values from relative plot coordinates to relative device coordinates. end() plend: End plotting session end1() plend1: End plotting session for current stream env(Double, Double, Double, Double, AxesScale, AxisBox) plenv: Set up standard window and draw box env0(Double, Double, Double, Double, AxesScale, AxisBox) plenv0: Same as plenv but if in multiplot mode does not advance the subpage, instead clears it eop() pleop: Eject current page errx(Double[], Double[], Double[]) plerrx: Draw error bars in x direction erry(Double[], Double[], Double[]) plerry: Draw error bars in the y direction famadv() plfamadv: Advance to the next family file on the next new page fill(Double[], Double[]) plfill: Draw filled polygon fill3(Double[], Double[], Double[]) plfill3: Draw filled polygon in 3D flush() plflush: Flushes the output stream font(FontFlag) plfont: Set font fontld(Int32) plfontld: Load Hershey fonts gchr(out Double, out Double) plgchr: Get character default height and current (scaled) height gcmap1_range(out Double, out Double) plgcmap1_range: Get the cmap1 argument range for continuous color plots gcol0(Int32, out Int32, out Int32, out Int32) plgcol0: Returns 8-bit RGB values for given color index from cmap0 gcol0a(Int32, out Int32, out Int32, out Int32, out Double) plgcol0a: Returns 8-bit RGB values and PLFLT alpha transparency value for given color index from cmap0 gcolbg(out Int32, out Int32, out Int32) plgcolbg: Returns the background color (cmap0[0]) by 8-bit RGB value gcolbga(out Int32, out Int32, out Int32, out Double) plgcolbga: Returns the background color (cmap0[0]) by 8-bit RGB value and PLFLT alpha transparency value gcompression(out Int32) plgcompression: Get the current device-compression setting gdev(out String) plgdev: Get the current device (keyword) name gDevs(out String[], out String[]) Returns a list of all device names and their menu strings gdidev(out Double, out Double, out Double, out Double) plgdidev: Get parameters that define current device-space window gdiori(out Double) plgdiori: Get plot orientation gdiplt(out Double, out Double, out Double, out Double) plgdiplt: Get parameters that define current plot-space window gdrawmode() plgdrawmode: Get drawing mode (depends on device support!) gesc(out Char) Get the escape character for text strings. GetCursor(out GraphicsIn) plGetCursor: Wait for graphics input event and translate to world coordinates. gfam(out Int32, out Int32, out Int32) plgfam: Get family file parameters gfci(out FCI) plgfci: Get FCI (font characterization integer) gFileDevs(out String[], out String[]) Returns a list of file-oriented device names and their menu strings gfnam(out String) plgfnam: Get output file name gfont(out FontFamily, out FontStyle, out FontWeight) plgfont: Get family, style and weight of the current font glevel(out RunLevel) plglevel: Get the (current) run level gpage(out Double, out Double, out Int32, out Int32, out Int32, out Int32) plgpage: Get page parameters gra() plgra: Switch to graphics screen gradient(Double[], Double[], Double) plgradient: Draw linear gradient inside polygon griddata(Double[], Double[], Double[], Double[], Double[], Double[,], Grid, Double) plgriddata: Grid data from irregularly sampled data gspa(out Double, out Double, out Double, out Double) plgspa: Get current subpage parameters gstrm(out Int32) plgstrm: Get current stream number gver(out String) plgver: Get the current library version number gvpd(out Double, out Double, out Double, out Double) plgvpd: Get viewport limits in normalized device coordinates gvpw(out Double, out Double, out Double, out Double) plgvpw: Get viewport limits in world coordinates gxax(out Int32, out Int32) plgxax: Get x axis parameters gyax(out Int32, out Int32) plgyax: Get y axis parameters gzax(out Int32, out Int32) plgzax: Get z axis parameters hist(Double[], Double, Double, Int32, Hist) plhist: Plot a histogram from unbinned data hlsrgb(Double, Double, Double, out Double, out Double, out Double) plhlsrgb: Convert HLS color to RGB image(Double[,], Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) plimage: Plot a 2D matrix using cmap1 with automatic color adjustment imagefr(Double[,], Double, Double, Double, Double, Double, Double, Double, Double, TransformFunc) plimagefr: Plot a 2D matrix using cmap1 init() plinit: Initialize PLplot join(Double, Double, Double, Double) pljoin: Draw a line between two points lab(String, String, String) pllab: Simple routine to write labels legend(out Double, out Double, Legend, Position, Double, Double, Double, Int32, Int32, LineStyle, Int32, Int32, LegendEntry[], Double, Double, Double, Double, Int32[], String[], Int32[], Pattern[], Double[], Double[], Int32[], LineStyle[], Double[], Int32[], Double[], Int32[], String[]) pllegend: Plot legend using discretely annotated filled boxes, lines, and/or lines of symbols lightsource(Double, Double, Double) pllightsource: Sets the 3D position of the light source line(Double[], Double[]) plline: Draw a line line3(Double[], Double[], Double[]) plline3: Draw a line in 3 space lsty(LineStyle) pllsty: Select line style map(MapFunc, String, Double, Double, Double, Double) plmap: Plot continental outline or shapefile data in world coordinates mapfill(MapFunc, String, Double, Double, Double, Double, Int32[]) plmapfill: Plot all or a subset of Shapefile data, filling the polygons mapline(MapFunc, String, Double, Double, Double, Double, Int32[]) plmapline: Plot all or a subset of Shapefile data using lines in world coordinates mapstring(MapFunc, String, String, Double, Double, Double, Double, Int32[]) plmapstring: Plot all or a subset of Shapefile data using strings or points in world coordinates maptex(MapFunc, String, Double, Double, Double, String, Double, Double, Double, Double, Int32) plmaptex: Draw text at points defined by Shapefile data in world coordinates meridians(MapFunc, Double, Double, Double, Double, Double, Double) plmeridians: Plot latitude and longitude lines mesh(Double[], Double[], Double[,], Mesh) plmesh: Plot surface mesh meshc(Double[], Double[], Double[,], MeshContour, Double[]) plmeshc: Magnitude colored plot surface mesh with contour mkstrm(out Int32) plmkstrm: Creates a new stream and makes it the default mtex(String, Double, Double, Double, String) plmtex: Write text relative to viewport boundaries mtex3(String, Double, Double, Double, String) plmtex3: Write text relative to viewport boundaries in 3D plots OptUsage() plOptUsage: Print usage and syntax message. parseopts(ref String[], ParseOpts) plparseopts: Parse command-line arguments pat(Int32[], Int32[]) plpat: Set area line fill pattern path(Int32, Double, Double, Double, Double) plpath: Draw a line between two points, accounting for coordinate transforms plot3d(Double[], Double[], Double[,], Mesh, Boolean) plot3d: Plot 3-d surface plot plot3dc(Double[], Double[], Double[,], MeshContour, Double[]) plot3dc: Magnitude colored plot surface with contour plot3dcl(Double[], Double[], Double[,], MeshContour, Double[], Int32, Int32[], Int32[]) plot3dcl: Magnitude colored plot surface with contour for z[x][y] with y index limits poin(Double[], Double[], Char) plpoin: Plot a glyph at the specified points poin3(Double[], Double[], Double[], Char) plpoin3: Plot a glyph at the specified 3D points poly3(Double[], Double[], Double[], Boolean[], Boolean) plpoly3: Draw a polygon in 3 space prec(Int32, Int32) plprec: Set precision in numeric labels psty(Pattern) plpsty: Select area fill pattern ptex(Double, Double, Double, Double, Double, String) plptex: Write text inside the viewport ptex3(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, String) plptex3: Write text inside the viewport of a 3D plot randd() plrandd: Random number generator returning a real random number in the range [0,1] replot() plreplot: Replays contents of plot buffer to current device/file rgbhls(Double, Double, Double, out Double, out Double, out Double) plrgbhls: Convert RGB color to HLS sabort(AbortHandler) plsabort: Set abort handler sbopH(BopHandler, IntPtr) Sets an optional user bop handler sButtonEH(ButtonHandler, IntPtr) Set the function pointer for the (mouse) button event handler schr(Double, Double) plschr: Set character size scmap0(Int32[], Int32[], Int32[]) plscmap0: Set cmap0 colors by 8-bit RGB values scmap0a(Int32[], Int32[], Int32[], Double[]) plscmap0a: Set cmap0 colors by 8-bit RGB values and PLFLT alpha transparency value scmap0n(Int32) plscmap0n: Set number of colors in cmap0 scmap1(Int32[], Int32[], Int32[]) plscmap1: Set opaque RGB cmap1 colors values scmap1_range(Double, Double) plscmap1_range: Set the cmap1 argument range for continuous color plots scmap1a(Int32[], Int32[], Int32[], Double[]) plscmap1a: Set semitransparent cmap1 RGBA colors. scmap1l(ColorSpace, Double[], Double[], Double[], Double[], Boolean[]) plscmap1l: Set cmap1 colors using a piece-wise linear relationship scmap1la(ColorSpace, Double[], Double[], Double[], Double[], Double[], Boolean[]) plscmap1la: Set cmap1 colors and alpha transparency using a piece-wise linear relationship scmap1n(Int32) plscmap1n: Set number of colors in cmap1 scol0(Int32, Int32, Int32, Int32) plscol0: Set 8-bit RGB values for given cmap0 color index scol0a(Int32, Int32, Int32, Int32, Double) plscol0a: Set 8-bit RGB values and PLFLT alpha transparency value for given cmap0 color index scolbg(Int32, Int32, Int32) plscolbg: Set the background color by 8-bit RGB value scolbga(Int32, Int32, Int32, Double) plscolbga: Set the background color by 8-bit RGB value and PLFLT alpha transparency value. scolor(Int32) plscolor: Used to globally turn color output on/off scompression(Int32) plscompression: Set device-compression level sdev(String) plsdev: Set the device (keyword) name sdevdata(IntPtr) Set the pointer to the data used in driver initialisation sdidev(Double, Double, Double, Double) plsdidev: Set parameters that define current device-space window sdimap(Int32, Int32, Int32, Int32, Double, Double) plsdimap: Set up transformation from metafile coordinates sdiori(Double) plsdiori: Set plot orientation sdiplt(Double, Double, Double, Double) plsdiplt: Set parameters that define current plot-space window sdiplz(Double, Double, Double, Double) plsdiplz: Set parameters incrementally (zoom mode) that define current plot-space window sdrawmode(DrawMode) plsdrawmode: Set drawing mode (depends on device support!) seed(UInt32) plseed: Set seed for internal random number generator. seopH(EopHandler, IntPtr) Sets an optional user eop handler sesc(Char) plsesc: Set the escape character for text strings setcontlabelformat(Int32, Int32) pl_setcontlabelformat: Set format of numerical label for contours setcontlabelparam(Double, Double, Double, Int32) pl_setcontlabelparam: Set parameters of contour labelling other than format of numerical label setopt(String, String) plsetopt: Set any command-line option sexit(ExitHandler) plsexit: Set exit handler sfam(Int32, Int32, Int32) plsfam: Set family file parameters sfci(FCI) plsfci: Set FCI (font characterization integer) sfnam(String) plsfnam: Set output file name sfont(FontFamily, FontStyle, FontWeight) plsfont: Set family, style and weight of the current font shade(Double[,], DefinedFunc, Double, Double, Double, Double, Double, Double, Int32, Double, Double, Int32, Double, Int32, Double, Boolean, TransformFunc) plshade: Shade individual region on the basis of value shades(Double[,], DefinedFunc, Double, Double, Double, Double, Double[], Double, Int32, Double, Boolean, TransformFunc) plshades: Shade regions on the basis of value sKeyEH(KeyHandler, IntPtr) Set the function pointer for the keyboard event handler slabelfunc(LabelFunc, IntPtr) plslabelfunc: Assign a function to use for generating custom axis labels smaj(Double, Double) plsmaj: Set length of major ticks smem(Int32, Int32, IntPtr) plsmem: Set the memory area to be plotted (RGB) smema(Int32, Int32, IntPtr) plsmema: Set the memory area to be plotted (RGBA) smin(Double, Double) plsmin: Set length of minor ticks sori(Orientation) plsori: Set orientation spage(Double, Double, Int32, Int32, Int32, Int32) plspage: Set page parameters spal0(String) plspal0: Set the cmap0 palette using the specified cmap0*.pal format file spal1(String, Boolean) plspal1: Set the cmap1 palette using the specified cmap1*.pal format file spause(Boolean) plspause: Set the pause (on end-of-page) status sstrm(Int32) plsstrm: Set current output stream ssub(Int32, Int32) plssub: Set the number of subpages in x and y ssym(Double, Double) plssym: Set symbol size star(Int32, Int32) plstar: Initialization start(String, Int32, Int32) plstart: Initialization stransform(TransformFunc) plstransform: Set a global coordinate transform function string2(Double[], Double[], String) string3(Double[], Double[], Double[], String) plstring3: Plot a glyph at the specified 3D points stripa(Int32, Pen, Double, Double) plstripa: Add a point to a strip chart stripc(out Int32, String, String, Double, Double, Double, Double, Double, Double, Double, Boolean, Boolean, Int32, Int32, Int32[], LineStyle[], String[], String, String, String) plstripc: Create a 4-pen strip chart stripd(Int32) plstripd: Deletes and releases memory used by a strip chart styl(Int32[], Int32[]) plstyl: Set line style surf3d(Double[], Double[], Double[,], Surf, Double[]) plsurf3d: Plot shaded 3-d surface plot surf3dl(Double[], Double[], Double[,], Surf, Double[], Int32, Int32[], Int32[]) plsurf3dl: Plot shaded 3-d surface plot for z[x][y] with y index limits svect(Double[], Double[], Boolean) plsvect: Set arrow style for vector plots svpa(Double, Double, Double, Double) plsvpa: Specify viewport in absolute coordinates sxax(Int32, Int32) plsxax: Set x axis parameters sxwin(Int32) Set inferior X window syax(Int32, Int32) plsyax: Set y axis parameters sym(Double[], Double[], Char) plsym: Plot a glyph at the specified points szax(Int32, Int32) plszax: Set z axis parameters text() pltext: Switch to text screen timefmt(String) pltimefmt: Set format for date / time labels tr0() Make a identity transformation for matrix index to world coordinate mapping. tr1(Double[], Double[]) Make a linear interpolation transformation for matrix index to world coordinate mapping using singly dimensioned coordinate arrays. tr2(Double[,], Double[,]) Make a linear interpolation transformation for grid to world mapping using doubly dimensioned coordinate arrays. TranslateCursor(ref GraphicsIn) plTranslateCursor: Convert device to world coordinates vasp(Double) plvasp: Specify viewport using aspect ratio only vect(Double[,], Double[,], Double, TransformFunc) plvect: Vector plot vpas(Double, Double, Double, Double, Double) plvpas: Specify viewport using coordinates and aspect ratio vpor(Double, Double, Double, Double) plvpor: Specify viewport using normalized subpage coordinates vsta() plvsta: Select standard viewport w3d(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) plw3d: Configure the transformations required for projecting a 3D surface on a 2D window width(Double) plwidth: Set pen width wind(Double, Double, Double, Double) plwind: Specify window xormod(Boolean, out Boolean) plxormod: Enter or leave xor mode"
  },
  "api/PLplot.Legend.html": {
    "href": "api/PLplot.Legend.html",
    "title": "Enum Legend | PLplot for .NET",
    "keywords": "Enum Legend Option flags for a legend. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Legend : int Fields Name Description Background Plot a (semitransparent) background for the legend. BoundingBox Plot a bounding box for the legend None No flags RowMajor If set, plot the resulting array of legend entries in row-major order. Otherwise, plot the legend entries in column-major order. TextLeft If set, put the text area on the left of the legend and the plotted area on the right. Otherwise, put the text area on the right of the legend and the plotted area on the left."
  },
  "api/PLplot.LabelFunc.html": {
    "href": "api/PLplot.LabelFunc.html",
    "title": "Delegate LabelFunc | PLplot for .NET",
    "keywords": "Delegate LabelFunc Custom label generation function Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void LabelFunc(Axis axis, Double value, out string label, Int32 length, IntPtr data); Parameters Type Name Description Axis axis This indicates which axis a label is being requested for. Double value This is the value along the axis which is being labelled. System.String label generated label Int32 length maximum length of generated laben IntPtr data Generic pointer to additional input data that may be required by the callback routine in order to generate label."
  },
  "api/PLplot.FontFlag.html": {
    "href": "api/PLplot.FontFlag.html",
    "title": "Enum FontFlag | PLplot for .NET",
    "keywords": "Enum FontFlag Font flag Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum FontFlag : int Fields Name Description Italic Italic font Sans Sans-serif font Script Script font Serif Serif font"
  },
  "api/PLplot.FCI.html": {
    "href": "api/PLplot.FCI.html",
    "title": "Enum FCI | PLplot for .NET",
    "keywords": "Enum FCI Font characterization integer flags and masks. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum FCI : int Fields Name Description FamilyMask Mask for font family FamilyMono Flag for monospaced font family FamilySans Flag for sans-serif font family FamilyScript Flag for script font family FamilySerif Flag for serif font family FamilySymbol Flag for symbol font family Mark Mark (must always be set for FCI) StyleItalic Flag for italic font style StyleMask Mask for font style StyleOblique Flag for olique font style StyleUpright Flag for upright font style WeightBold Flag for bold font weight WeightMask Mask for font weight WeightMedium Flag for medium font weight"
  },
  "api/PLplot.EopHandler.html": {
    "href": "api/PLplot.EopHandler.html",
    "title": "Delegate EopHandler | PLplot for .NET",
    "keywords": "Delegate EopHandler Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void EopHandler(IntPtr eop_data, out Boolean skip_driver_eop); Parameters Type Name Description IntPtr eop_data Boolean skip_driver_eop"
  },
  "api/PLplot.DefinedFunc.html": {
    "href": "api/PLplot.DefinedFunc.html",
    "title": "Delegate DefinedFunc | PLplot for .NET",
    "keywords": "Delegate DefinedFunc Callback function specifying the region that should be plotted in the shade plot Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate Boolean DefinedFunc(Double x, Double y); Parameters Type Name Description Double x x-coordinate to be tested for whether it is in the defined region. Double y y-coordinate to be tested for whether it is in the defined region. Returns Type Description Boolean"
  },
  "api/PLplot.ColorbarLabel.html": {
    "href": "api/PLplot.ColorbarLabel.html",
    "title": "Enum ColorbarLabel | PLplot for .NET",
    "keywords": "Enum ColorbarLabel Option flags for colorbar label. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum ColorbarLabel : int Fields Name Description Bottom Label is at bottom Left Label is left None Label is ignored Right Label is right Top Label is at top"
  },
  "api/PLplot.BopHandler.html": {
    "href": "api/PLplot.BopHandler.html",
    "title": "Delegate BopHandler | PLplot for .NET",
    "keywords": "Delegate BopHandler Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void BopHandler(IntPtr bop_data, out Boolean skip_driver_bop); Parameters Type Name Description IntPtr bop_data Boolean skip_driver_bop"
  },
  "api/PLplot.AxesScale.html": {
    "href": "api/PLplot.AxesScale.html",
    "title": "Enum AxesScale | PLplot for .NET",
    "keywords": "Enum AxesScale Controls how the axes will be scaled Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum AxesScale : int Fields Name Description Equal The scales of the x and y axes are made equal. Independent The x and y axes are scaled independently to use as much of the screen as possible. NotSet The scales will not be set, the user must set up the scale before calling plenv using plsvpa, plvasp or other. Square The axis of the x and y axes are made equal, and the plot box will be square."
  },
  "api/PLplot.ZAxisOpt.html": {
    "href": "api/PLplot.ZAxisOpt.html",
    "title": "Class ZAxisOpt | PLplot for .NET",
    "keywords": "Class ZAxisOpt Options for an Z-axis. Inheritance System.Object ZAxisOpt Namespace : PLplot Assembly : PLplotNet.dll Syntax public static class ZAxisOpt : object Fields Name Description CustomLabels Use custom labelling function to generate axis label text. The custom labelling function can be defined with the plslabelfunc command. DateTime Plot labels as date / time. Values are assumed to be seconds since the epoch (as used by gmtime). DrawLeft Draws z axis to the left of the surface plot. DrawRight Draws z axis to the right of the surface plot. FixedPoint Always use fixed point numeric labels. Grid Draws grid lines parallel to the x-y plane behind the figure. These lines are not drawn until after plot3d or plmesh are called because of the need for hidden line removal. InvertTickMarks Inverts tick marks, so they are drawn outwards, rather than inwards. LabelLeft If this is specified, the text label is written beside the left-hand axis. LabelRight If this is specified, the text label is written beside the right-hand axis. LeftHandLabels Writes numeric labels at major tick intervals on the left-hand z axis. Log Labels axis logarithmically. This only affects the labels, not the data, and so it is necessary to compute the logarithms of data points before passing them to any of the drawing routines. MajorTicks Draws major ticks. None No options. RightHandLabels Writes numeric labels at major tick intervals on the right-hand z axis. SubTicks Enables subticks between major ticks, only valid if t is also specified."
  },
  "api/PLplot.html": {
    "href": "api/PLplot.html",
    "title": "Namespace PLplot | PLplot for .NET",
    "keywords": "Namespace PLplot Classes Color Predefined colors on default color map. Native Native PLplot functions PLStream A PLplot stream. Side The side of the viewport along which the text is to be written. Side3 The side of the viewport along which the text is to be written. Symbol Symbols of plpoin, plsym and plstring. XYAxisOpt Options for an X-axis or Y-axis. ZAxisOpt Options for an Z-axis. Structs GraphicsIn PLplot Graphics Input structure Enums AxesScale Controls how the axes will be scaled Axis Axis label tags AxisBox Controls drawing of the box around the plot: Bin Option flags for plbin() Colorbar Option flags for colorbar. ColorbarLabel Option flags for colorbar label. ColorSpace Color space DrawMode Drawing mode FCI Font characterization integer flags and masks. FontFamily Font family FontFlag Font flag FontStyle Font style FontWeight Font weight Grid Type of gridding algorithm for plgriddata() Hist Option flags for histogram KeyButtonMask Graphics input event state flags Legend Option flags for a legend. LegendEntry Option flags for a legend entry. LineStyle Line style Mesh Determines the way in which the surface is represented MeshContour Determines the way in which the surface is represented. Orientation Page orientation ParseOpts Command line parsing mode. Pattern standard fill patterns Pen Pen for strip chart Position Position flags for legend and colorbar. RunLevel Run level of PLplot. Surf Determines the way in which the surface is represented. Delegates AbortHandler BopHandler ButtonHandler DefinedFunc Callback function specifying the region that should be plotted in the shade plot EopHandler ExitHandler FillFunc A callback function that fills a region. KeyHandler LabelFunc Custom label generation function LocateHandler MapFunc A user supplied function to transform the original map data coordinates to a new coordinate system. TransformFunc A callback function that defines the transformation between the zero-based indices of the matrix f and the world coordinates."
  },
  "api/PLplot.Symbol.html": {
    "href": "api/PLplot.Symbol.html",
    "title": "Class Symbol | PLplot for .NET",
    "keywords": "Class Symbol Symbols of plpoin, plsym and plstring. Inheritance System.Object Symbol Namespace : PLplot Assembly : PLplotNet.dll Syntax public static class Symbol : object Fields Name Description Box Box Bullet Bullet Circle Circle Dot Dot DotCircle Dot within circle DownArrow Down arrow FilledBox Filled box LeftArrow Left arrow Multiply Multiply Plus Plus PlusCircle Plus within circle RightArrow Right arrow Star Star Times Times Triangle Triangle UpArrow Up arrow"
  },
  "api/PLplot.Surf.html": {
    "href": "api/PLplot.Surf.html",
    "title": "Enum Surf | PLplot for .NET",
    "keywords": "Enum Surf Determines the way in which the surface is represented. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Surf : int Fields Name Description BaseCont A contour plot is drawn at the base XY plane using parameters nlevel and clevel. DrawSides draws a curtain between the base XY plane and the borders of the plotted function. Faceted Network of lines is drawn connecting points at which function is defined. MagColor The surface is colored according to the value of Z; if MAG_COLOR is not used, then the surface is colored according to the intensity of the reflected light in the surface from a light source whose position is set using pllightsource. SurfCont A contour plot is drawn at the surface plane using parameters nlevel and clevel."
  },
  "api/PLplot.RunLevel.html": {
    "href": "api/PLplot.RunLevel.html",
    "title": "Enum RunLevel | PLplot for .NET",
    "keywords": "Enum RunLevel Run level of PLplot. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum RunLevel : int Fields Name Description Initialized Initialized Uninitialized Uninitialized ViewportDefined Viewport has been defined WorldCoordinatesDefined Viewport and world coordinates have been defined defined"
  },
  "api/PLplot.Position.html": {
    "href": "api/PLplot.Position.html",
    "title": "Enum Position | PLplot for .NET",
    "keywords": "Enum Position Position flags for legend and colorbar. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Position : int Fields Name Description Bottom Bottom Inside Inside plot Left Left Outside Outside plot Right Right Subpage The adopted coordinates are normalized subpage coordinates. Top Top Viewport The adopted coordinates are normalized viewport coordinates."
  },
  "api/PLplot.Pattern.html": {
    "href": "api/PLplot.Pattern.html",
    "title": "Enum Pattern | PLplot for .NET",
    "keywords": "Enum Pattern standard fill patterns Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Pattern : int Fields Name Description Deg30 lines at 30 degrees Deg45 lines at 45 degrees Deg45AndMinus45 lines at both 45 degrees and -45 degrees DegMinus30 lines at -30 degrees DegMinus45 lines at -45 degrees Horizontal horizontal lines HorizontalAndVertical both vertical and horizontal lines Vertical vertical lines"
  },
  "api/PLplot.ParseOpts.html": {
    "href": "api/PLplot.ParseOpts.html",
    "title": "Enum ParseOpts | PLplot for .NET",
    "keywords": "Enum ParseOpts Command line parsing mode. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum ParseOpts : int Fields Name Description Full Full parsing of command line and all error messages enabled, including program exit when an error occurs. Anything on the command line that isn't recognized as a valid option or option argument is flagged as an error. NoDash Set if leading dash NOT required NoDelete Turns off deletion of processed arguments. NoProgram Specified if argv[0] is NOT a pointer to the program name. Quiet Turns off all output except in the case of errors. ShowAll Show invisible options Skip Set to quietly skip over any unrecognized arguments."
  },
  "api/PLplot.MeshContour.html": {
    "href": "api/PLplot.MeshContour.html",
    "title": "Enum MeshContour | PLplot for .NET",
    "keywords": "Enum MeshContour Determines the way in which the surface is represented. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum MeshContour : int Fields Name Description BaseCont A contour plot is drawn at the base XY plane using parameters nlevel and clevel. DrawSides Draws a curtain between the base XY plane and the borders of the plotted function. LineX Lines are drawn showing z as a function of x for each value of y[j]. LineXY Network of lines is drawn connecting points at which function is defined. LineY Lines are drawn showing z as a function of y for each value of x[i]. MagColor Each line in the mesh is colored according to the z value being plotted. The color is used from the current cmap1."
  },
  "api/PLplot.Mesh.html": {
    "href": "api/PLplot.Mesh.html",
    "title": "Enum Mesh | PLplot for .NET",
    "keywords": "Enum Mesh Determines the way in which the surface is represented Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Mesh : int Fields Name Description LineX Lines are drawn showing z as a function of x for each value of y[j]. LineXY Network of lines is drawn connecting points at which function is defined. LineY Lines are drawn showing z as a function of y for each value of x[i]."
  },
  "api/PLplot.LineStyle.html": {
    "href": "api/PLplot.LineStyle.html",
    "title": "Enum LineStyle | PLplot for .NET",
    "keywords": "Enum LineStyle Line style Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum LineStyle : int Fields Name Description Continuous Continous line LongDashesLongGaps long dashes followed by long gaps LongDashesShortGaps long dashes followed by short gaps ShortDashesLongGaps short dashes followed by long gaps ShortDashesShortGaps short dashes followed by short gaps Style6 line style 6 Style7 line style 7 Style8 line style 8"
  },
  "api/PLplot.LegendEntry.html": {
    "href": "api/PLplot.LegendEntry.html",
    "title": "Enum LegendEntry | PLplot for .NET",
    "keywords": "Enum LegendEntry Option flags for a legend entry. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum LegendEntry : int Fields Name Description ColorBox Entry is plotted with colored box. Line Entry is plotted with a line. None Entry is plotted with nothing in the plotted area. Symbol Entry is plotted with a symbol."
  },
  "api/PLplot.KeyHandler.html": {
    "href": "api/PLplot.KeyHandler.html",
    "title": "Delegate KeyHandler | PLplot for .NET",
    "keywords": "Delegate KeyHandler Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void KeyHandler(GraphicsIn evnt, IntPtr data, out Boolean exit_eventloop); Parameters Type Name Description GraphicsIn evnt IntPtr data Boolean exit_eventloop"
  },
  "api/PLplot.KeyButtonMask.html": {
    "href": "api/PLplot.KeyButtonMask.html",
    "title": "Enum KeyButtonMask | PLplot for .NET",
    "keywords": "Enum KeyButtonMask Graphics input event state flags Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum KeyButtonMask : uint Fields Name Description Alt alt key AltGr alt gr key Button1 mouse button 1 Button2 mouse button 2 Button3 mouse button 3 Button4 mouse button 4 Button5 mouse button 5 Caps caps lock Control control key Num num lock Scroll scroll lock Shift shift key Win windows key"
  },
  "api/PLplot.GraphicsIn.html": {
    "href": "api/PLplot.GraphicsIn.html",
    "title": "Struct GraphicsIn | PLplot for .NET",
    "keywords": "Struct GraphicsIn PLplot Graphics Input structure Namespace : PLplot Assembly : PLplotNet.dll Syntax public struct GraphicsIn"
  },
  "api/PLplot.FontWeight.html": {
    "href": "api/PLplot.FontWeight.html",
    "title": "Enum FontWeight | PLplot for .NET",
    "keywords": "Enum FontWeight Font weight Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum FontWeight : int Fields Name Description Bold Bold Medium Medium"
  },
  "api/PLplot.FontFamily.html": {
    "href": "api/PLplot.FontFamily.html",
    "title": "Enum FontFamily | PLplot for .NET",
    "keywords": "Enum FontFamily Font family Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum FontFamily : int Fields Name Description Mono Monospaced Sans Sans-serif Script Script Serif Serif Symbol Symbol"
  },
  "api/PLplot.FillFunc.html": {
    "href": "api/PLplot.FillFunc.html",
    "title": "Delegate FillFunc | PLplot for .NET",
    "keywords": "Delegate FillFunc A callback function that fills a region. Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void FillFunc(Int32 n, Double[] x, Double[] y); Parameters Type Name Description Int32 n Number of elements in the x and y vectors. Double [] x Vector of x-coordinates of vertices. Double [] y Vector of y-coordinates of vertices."
  },
  "api/PLplot.ExitHandler.html": {
    "href": "api/PLplot.ExitHandler.html",
    "title": "Delegate ExitHandler | PLplot for .NET",
    "keywords": "Delegate ExitHandler Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate int ExitHandler(string msg); Parameters Type Name Description System.String msg Returns Type Description System.Int32"
  },
  "api/PLplot.DrawMode.html": {
    "href": "api/PLplot.DrawMode.html",
    "title": "Enum DrawMode | PLplot for .NET",
    "keywords": "Enum DrawMode Drawing mode Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum DrawMode : int Fields Name Description Default Default Replace Replace Unknown Unknown Xor Xor"
  },
  "api/PLplot.ColorSpace.html": {
    "href": "api/PLplot.ColorSpace.html",
    "title": "Enum ColorSpace | PLplot for .NET",
    "keywords": "Enum ColorSpace Color space Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum ColorSpace : int Fields Name Description HLS HLS color space RGB RGB color space"
  },
  "api/PLplot.Colorbar.html": {
    "href": "api/PLplot.Colorbar.html",
    "title": "Enum Colorbar | PLplot for .NET",
    "keywords": "Enum Colorbar Option flags for colorbar. Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Colorbar : int Fields Name Description Background Plot a (semitransparent) background for the color bar. BoundingBox Plot a bounding box for the color bar. CapHigh High end-cap CapLow Low end-cap CapNone No end-cap Gradient Colorbar type is gradient Image Colorbar type is image OrientBottom Direction of maximum value is bottom OrientLeft Direction of maximum value is left OrientRight Direction of maximum value is right OrientTop Direction of maximum value is top Shade Colorbar type is shade ShadeLabel Any tick marks and tick labels will be placed at the breaks between shaded segments. TitleBottom Title is at bottom TitleLeft Title is left TitleRight Title is right TitleTop Title is at top"
  },
  "api/PLplot.ButtonHandler.html": {
    "href": "api/PLplot.ButtonHandler.html",
    "title": "Delegate ButtonHandler | PLplot for .NET",
    "keywords": "Delegate ButtonHandler Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void ButtonHandler(GraphicsIn evnt, IntPtr data, out Boolean exit_eventloop); Parameters Type Name Description GraphicsIn evnt IntPtr data Boolean exit_eventloop"
  },
  "api/PLplot.Bin.html": {
    "href": "api/PLplot.Bin.html",
    "title": "Enum Bin | PLplot for .NET",
    "keywords": "Enum Bin Option flags for plbin() Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Bin : int Fields Name Description Centred The bin boundaries are to be midway between the x values. If the values in x are equally spaced, the values are the center values of the bins. Default The x represent the lower bin boundaries, the outer bins are expanded to fill up the entire x-axis and bins of zero height are simply drawn. NoEmpty Bins with zero height are not drawn (there is a gap for such bins). NoExpand The outer bins are drawn with equal size as the ones inside."
  },
  "api/PLplot.Axis.html": {
    "href": "api/PLplot.Axis.html",
    "title": "Enum Axis | PLplot for .NET",
    "keywords": "Enum Axis Axis label tags Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Axis : int Fields Name Description X X axis Y Y axis Z Z axis"
  },
  "api/PLplot.AbortHandler.html": {
    "href": "api/PLplot.AbortHandler.html",
    "title": "Delegate AbortHandler | PLplot for .NET",
    "keywords": "Delegate AbortHandler Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void AbortHandler(string msg); Parameters Type Name Description System.String msg"
  },
  "api/PLplot.XYAxisOpt.html": {
    "href": "api/PLplot.XYAxisOpt.html",
    "title": "Class XYAxisOpt | PLplot for .NET",
    "keywords": "Class XYAxisOpt Options for an X-axis or Y-axis. Inheritance System.Object XYAxisOpt Namespace : PLplot Assembly : PLplotNet.dll Syntax public static class XYAxisOpt : object Fields Name Description BaseParallelLabels Write numeric labels for the y axis parallel to the base of the graph, rather than parallel to the axis. ConventionalLabels Writes numeric labels at major tick intervals in the conventional location (below box for X, left of box for Y). CustomLabels Use custom labelling function to generate axis label text. The custom labelling function can be defined with the plslabelfunc command. DateTime Plot labels as date / time. Values are assumed to be seconds since the epoch (as used by gmtime). DrawAxis Draws axis, X-axis is horizontal line (y=0), and Y-axis is vertical line (x=0). DrawBottom Draws bottom (for X-axis) edge of frame. DrawBottomWithoutEdgeLine Draws bottom (for X-axis) edge of frame without edge line. DrawLeft Draws left (for Y-axis) edge of frame. DrawLeftWithoutEdgeLine Draws left (for Y-axis) edge of frame without edge line. DrawRight Draws right (for Y-axis) edge of frame. DrawRightWithoutEdgeLine Draws right (for Y-axis) edge of frame without edge line. DrawTop Draws top (for X-axis) edge of frame. DrawTopWithoutEdgeLine Draws top (for X-axis) edge of frame without edge line. FixedPoint Always use fixed point numeric labels. InvertTickMarks Inverts tick marks, so they are drawn outwards, rather than inwards. Log Labels axis logarithmically. This only affects the labels, not the data, and so it is necessary to compute the logarithms of data points before passing them to any of the drawing routines. MajorGrid Draws a grid at the major tick interval. MajorTicks Draws major ticks. MajorTicksWithoutMarks Draws major ticks (including the side effect of the numerical labels for the major ticks) except exclude drawing the major and minor tick marks. MinorGrid Draws a grid at the minor tick interval. None No options. SubTicks Enables subticks between major ticks, only valid if t is also specified. UnconventionalLabels Writes numeric labels at major tick intervals in the unconventional location (above box for X, right of box for Y)."
  },
  "api/PLplot.TransformFunc.html": {
    "href": "api/PLplot.TransformFunc.html",
    "title": "Delegate TransformFunc | PLplot for .NET",
    "keywords": "Delegate TransformFunc A callback function that defines the transformation between the zero-based indices of the matrix f and the world coordinates. Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void TransformFunc(Double x, Double y, out Double xp, out Double yp, IntPtr data); Parameters Type Name Description Double x x-position to be transformed. Double y y-position to be transformed. Double xp transformed x-position Double yp transformed y-position IntPtr data Generic pointer to additional input data that may be required by the callback routine in order to implement the transformation."
  },
  "api/PLplot.Side3.html": {
    "href": "api/PLplot.Side3.html",
    "title": "Class Side3 | PLplot for .NET",
    "keywords": "Class Side3 The side of the viewport along which the text is to be written. Inheritance System.Object Side3 Namespace : PLplot Assembly : PLplotNet.dll Syntax public static class Side3 : object Fields Name Description Perpendicular Draw the text perpendicular to the axis. PrimaryAxis Label the “primary” axis. For Z this is the leftmost Z axis. For X it is the axis that starts at y-min. For Y it is the axis that starts at x-min. SecondaryAxis Label the “secondary” axis. XAxis Label the X axis. YAxis Label the Y axis. ZAxis Label the Z axis."
  },
  "api/PLplot.Side.html": {
    "href": "api/PLplot.Side.html",
    "title": "Class Side | PLplot for .NET",
    "keywords": "Class Side The side of the viewport along which the text is to be written. Inheritance System.Object Side Namespace : PLplot Assembly : PLplotNet.dll Syntax public static class Side : object Fields Name Description BottomParallel Bottom of viewport, text written parallel to edge. BottomPerpendicular Bottom of viewport, text written at right angles to edge. LeftParallel Left of viewport, text written parallel to edge. LeftPerpendicular Left of viewport, text written at right angles to edge. RightParallel Right of viewport, text written parallel to edge. RightPerpendicular Right of viewport, text written at right angles to edge. TopParallel Top of viewport, text written parallel to edge. TopPerpendicular Top of viewport, text written at right angles to edge."
  },
  "api/PLplot.MapFunc.html": {
    "href": "api/PLplot.MapFunc.html",
    "title": "Delegate MapFunc | PLplot for .NET",
    "keywords": "Delegate MapFunc A user supplied function to transform the original map data coordinates to a new coordinate system. Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void MapFunc(Int32 n, Double[] x, Double[] y); Parameters Type Name Description Int32 n Number of elements in the x and y vectors. Double [] x original X coordinates that should be replaced by the corresponding plot X coordinates Double [] y original Y coordinates that should be replaced by the corresponding plot Y coordinates"
  },
  "api/PLplot.LocateHandler.html": {
    "href": "api/PLplot.LocateHandler.html",
    "title": "Delegate LocateHandler | PLplot for .NET",
    "keywords": "Delegate LocateHandler Namespace : PLplot Assembly : PLplotNet.dll Syntax public delegate void LocateHandler(GraphicsIn evnt, IntPtr data, out Boolean locate_mode); Parameters Type Name Description GraphicsIn evnt IntPtr data Boolean locate_mode"
  },
  "api/PLplot.Hist.html": {
    "href": "api/PLplot.Hist.html",
    "title": "Enum Hist | PLplot for .NET",
    "keywords": "Enum Hist Option flags for histogram Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Hist : int Fields Name Description Default The axes are automatically rescaled to fit the histogram data, the outer bins are expanded to fill up the entire x-axis, data outside the given extremes are assigned to the outer bins and bins of zero height are simply drawn. IgnoreOutliers Data outside the given extremes are not taken into account. This option should probably be combined with opt=PL_HIST_NOEXPAND|..., so as to properly present the data. NoEmpty Bins with zero height are not drawn (there is a gap for such bins). NoExpand The outer bins are drawn with equal size as the ones inside. NoScaling The existing axes are not rescaled to fit the histogram data, without this flag, plenv is called to set the world coordinates."
  },
  "api/PLplot.Grid.html": {
    "href": "api/PLplot.Grid.html",
    "title": "Enum Grid | PLplot for .NET",
    "keywords": "Enum Grid Type of gridding algorithm for plgriddata() Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum Grid : int Fields Name Description CSA Bivariate Cubic Spline approximation DTLI Delaunay Triangulation Linear Interpolation NNAIDW Nearest Neighbors Around Inverse Distance Weighted NNI Natural Neighbors Interpolation NNIDW Nearest Neighbors Inverse Distance Weighted NNLI Nearest Neighbors Linear Interpolation"
  },
  "api/PLplot.FontStyle.html": {
    "href": "api/PLplot.FontStyle.html",
    "title": "Enum FontStyle | PLplot for .NET",
    "keywords": "Enum FontStyle Font style Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum FontStyle : int Fields Name Description Italic Italic Oblique Olique Upright Upright"
  },
  "api/PLplot.Color.html": {
    "href": "api/PLplot.Color.html",
    "title": "Class Color | PLplot for .NET",
    "keywords": "Class Color Predefined colors on default color map. Inheritance System.Object Color Namespace : PLplot Assembly : PLplotNet.dll Syntax public static class Color : object Fields Name Description Aquamarine Aquamarine Black Black Blue Blue BlueViolet BlueViolet Brown Brown Cyan Cyan Green Green Grey Grey Magenta Magenta Pink Pink Red Red Salmon Salmon Turquoise Turquoise Wheat Wheat White White Yellow Yellow"
  },
  "api/PLplot.AxisBox.html": {
    "href": "api/PLplot.AxisBox.html",
    "title": "Enum AxisBox | PLplot for .NET",
    "keywords": "Enum AxisBox Controls drawing of the box around the plot: Namespace : PLplot Assembly : PLplotNet.dll Syntax public enum AxisBox : int Fields Name Description Box Draw box only. BoxTicksLabels Draw box, ticks, and numeric tick labels. BoxTicksLabelsAxes Draw box, ticks, and numeric tick labels, also draw coordinate axes at x=0 and y=0. BoxTicksLabelsAxesMajorGrid Draw box, ticks, and numeric tick labels, also draw a grid at major tick positions in both coordinates. BoxTicksLabelsAxesMinorGrid Draw box, ticks, and numeric tick labels, also draw a grid at minor tick positions in both coordinates. CustomXYBoxTicksLabels Draw box, ticks, and numeric tick labels with custom x and y labels. CustomXYBoxTicksLabelsAxes Draw box, ticks, and numeric tick labels, also draw coordinate axes at x=0 and y=0 with custom x and y labels CustomXYBoxTicksLabelsAxesMajorGrid Draw box, ticks, and numeric tick labels, also draw a grid at major tick positions in both coordinates with custom x and y labels. CustomXYBoxTicksLabelsAxesMinorGrid Draw box, ticks, and numeric tick labels, also draw a grid at minor tick positions in both coordinates with custom x and y labels. DateTimeXBoxTicksLabels Draw box, ticks, and numeric tick labels with date/time x labels. DateTimeXBoxTicksLabelsAxes Draw box, ticks, and numeric tick labels, also draw coordinate axes at x=0 and y=0 with date/time x labels DateTimeXBoxTicksLabelsAxesMajorGrid Draw box, ticks, and numeric tick labels, also draw a grid at major tick positions in both coordinates with date/time x labels. DateTimeXBoxTicksLabelsAxesMinorGrid Draw box, ticks, and numeric tick labels, also draw a grid at minor tick positions in both coordinates with date/time x labels. DateTimeXYBoxTicksLabels Draw box, ticks, and numeric tick labels with date/time x and y labels. DateTimeXYBoxTicksLabelsAxes Draw box, ticks, and numeric tick labels, also draw coordinate axes at x=0 and y=0 with date/time x and y labels DateTimeXYBoxTicksLabelsAxesMajorGrid Draw box, ticks, and numeric tick labels, also draw a grid at major tick positions in both coordinates with date/time x and y labels. DateTimeXYBoxTicksLabelsAxesMinorGrid Draw box, ticks, and numeric tick labels, also draw a grid at minor tick positions in both coordinates with date/time x and y labels. DateTimeYBoxTicksLabels Draw box, ticks, and numeric tick labels with date/time y labels. DateTimeYBoxTicksLabelsAxes Draw box, ticks, and numeric tick labels, also draw coordinate axes at x=0 and y=0 with date/time y labels DateTimeYBoxTicksLabelsAxesMajorGrid Draw box, ticks, and numeric tick labels, also draw a grid at major tick positions in both coordinates with date/time y labels. DateTimeYBoxTicksLabelsAxesMinorGrid Draw box, ticks, and numeric tick labels, also draw a grid at minor tick positions in both coordinates with date/time y labels. LogXBoxTicksLabels Draw box, ticks, and numeric tick labels with logarithmic x tick marks. LogXBoxTicksLabelsAxes Draw box, ticks, and numeric tick labels, also draw coordinate axes at x=0 and y=0 with logarithmic x tick marks LogXBoxTicksLabelsAxesMajorGrid Draw box, ticks, and numeric tick labels, also draw a grid at major tick positions in both coordinates with logarithmic x tick marks. LogXBoxTicksLabelsAxesMinorGrid Draw box, ticks, and numeric tick labels, also draw a grid at minor tick positions in both coordinates with logarithmic x tick marks. LogXYBoxTicksLabels Draw box, ticks, and numeric tick labels with logarithmic x and y tick marks. LogXYBoxTicksLabelsAxes Draw box, ticks, and numeric tick labels, also draw coordinate axes at x=0 and y=0 with logarithmic x and y tick marks LogXYBoxTicksLabelsAxesMajorGrid Draw box, ticks, and numeric tick labels, also draw a grid at major tick positions in both coordinates with logarithmic x and y tick marks. LogXYBoxTicksLabelsAxesMinorGrid Draw box, ticks, and numeric tick labels, also draw a grid at minor tick positions in both coordinates with logarithmic x and y tick marks. LogYBoxTicksLabels Draw box, ticks, and numeric tick labels with logarithmic y tick marks. LogYBoxTicksLabelsAxes Draw box, ticks, and numeric tick labels, also draw coordinate axes at x=0 and y=0 with logarithmic y tick marks LogYBoxTicksLabelsAxesMajorGrid Draw box, ticks, and numeric tick labels, also draw a grid at major tick positions in both coordinates with logarithmic y tick marks. LogYBoxTicksLabelsAxesMinorGrid Draw box, ticks, and numeric tick labels, also draw a grid at minor tick positions in both coordinates with logarithmic y tick marks. Off Draw no box, no tick marks, no numeric tick labels, no axes."
  },
  "api/PLplot.PLStream.-ctor.html": {
    "href": "api/PLplot.PLStream.-ctor.html",
    "title": "Constructor PLStream | PLplot for .NET",
    "keywords": "Constructor PLStream | Improve this Doc View Source PLStream() Creates a new PLplot stream. Declaration public PLStream()"
  },
  "api/PLplot.PLStream.Finalize.html": {
    "href": "api/PLplot.PLStream.Finalize.html",
    "title": "Method Finalize | PLplot for .NET",
    "keywords": "Method Finalize | Improve this Doc View Source Finalize() Ends the PLplot stream. Declaration protected void Finalize()"
  },
  "api/PLplot.PLStream.Id.html": {
    "href": "api/PLplot.PLStream.Id.html",
    "title": "Property Id | PLplot for .NET",
    "keywords": "Property Id | Improve this Doc View Source Id The stream id of this stream as returned by plgstrm(). Declaration public int Id { get; } Property Value Type Description System.Int32"
  },
  "api/PLplot.PLStream.ToString.html": {
    "href": "api/PLplot.PLStream.ToString.html",
    "title": "Method ToString | PLplot for .NET",
    "keywords": "Method ToString | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String"
  },
  "api/PLplot.PLStream.cpstrm.html": {
    "href": "api/PLplot.PLStream.cpstrm.html",
    "title": "Method cpstrm | PLplot for .NET",
    "keywords": "Method cpstrm | Improve this Doc View Source cpstrm(PLStream, Boolean) plcpstrm: Copy state parameters from the reference stream to the current stream Declaration public void cpstrm(PLStream iplsr, bool flags) Parameters Type Name Description PLStream iplsr Reference stream. System.Boolean flags If flags is set to true the device coordinates are not copied from the reference to current stream. Remarks Copies state parameters from the reference stream to the current stream. Tell driver interface to map device coordinates unless flags == 1. This function is used for making save files of selected plots (e.g. from the TK driver). After initializing, you can get a copy of the current plot to the specified device by switching to this stream and issuing a plcpstrm and a plreplot, with calls to plbop and pleop as appropriate. The plot buffer must have previously been enabled (done automatically by some display drivers, such as X)."
  },
  "api/PLplot.PLStream.setcontlabelformat.html": {
    "href": "api/PLplot.PLStream.setcontlabelformat.html",
    "title": "Method setcontlabelformat | PLplot for .NET",
    "keywords": "Method setcontlabelformat | Improve this Doc View Source setcontlabelformat(Int32, Int32) pl_setcontlabelformat: Set format of numerical label for contours Declaration public void setcontlabelformat(Int32 lexp, Int32 sigdig) Parameters Type Name Description Int32 lexp If the contour numerical label is greater than 10^(lexp) or less than 10^(-lexp), then the exponential format is used. Default value of lexp is 4. Int32 sigdig Number of significant digits. Default value is 2. Remarks Set format of numerical label for contours."
  },
  "api/PLplot.PLStream.setcontlabelparam.html": {
    "href": "api/PLplot.PLStream.setcontlabelparam.html",
    "title": "Method setcontlabelparam | PLplot for .NET",
    "keywords": "Method setcontlabelparam | Improve this Doc View Source setcontlabelparam(Double, Double, Double, Int32) pl_setcontlabelparam: Set parameters of contour labelling other than format of numerical label Declaration public void setcontlabelparam(Double offset, Double size, Double spacing, Int32 active) Parameters Type Name Description Double offset Offset of label from contour line (if set to 0.0, labels are printed on the lines). Default value is 0.006. Double size Font height for contour labels (normalized). Default value is 0.3. Double spacing Spacing parameter for contour labels. Default value is 0.1. Int32 active Activate labels. Set to 1 if you want contour labels on. Default is off (0). Remarks Set parameters of contour labelling other than those handled by pl_setcontlabelformat."
  },
  "api/PLplot.PLStream.adv.html": {
    "href": "api/PLplot.PLStream.adv.html",
    "title": "Method adv | PLplot for .NET",
    "keywords": "Method adv | Improve this Doc View Source adv(Int32) pladv: Advance the (sub-)page Declaration public void adv(Int32 page) Parameters Type Name Description Int32 page Specifies the subpage number (starting from 1 in the top left corner and increasing along the rows) to which to advance. Set to zero to advance to the next subpage (or to the next page if subpages are not being used). Remarks Advances to the next subpage if sub=0, performing a page advance if there are no remaining subpages on the current page. If subpages aren't being used, pladv(0) will always advance the page. If pagegt0, PLplot switches to the specified subpage. Note that this allows you to overwrite a plot on the specified subpage; if this is not what you intended, use pleop followed by plbop to first advance the page. This routine is called automatically (with page=0) by plenv, but if plenv is not used, pladv must be called after initializing PLplot but before defining the viewport."
  },
  "api/PLplot.PLStream.arc.html": {
    "href": "api/PLplot.PLStream.arc.html",
    "title": "Method arc | PLplot for .NET",
    "keywords": "Method arc | Improve this Doc View Source arc(Double, Double, Double, Double, Double, Double, Double, Boolean) plarc: Draw a circular or elliptical arc Declaration public void arc(Double x, Double y, Double a, Double b, Double angle1, Double angle2, Double rotate, Boolean fill) Parameters Type Name Description Double x X coordinate of arc center. Double y Y coordinate of arc center. Double a Length of the semimajor axis of the arc. Double b Length of the semiminor axis of the arc. Double angle1 Starting angle of the arc relative to the semimajor axis. Double angle2 Ending angle of the arc relative to the semimajor axis. Double rotate Angle of the semimajor axis relative to the X-axis. Boolean fill Draw a filled arc. Remarks Draw a possibly filled arc centered at x, y with semimajor axis a and semiminor axis b, starting at angle1 and ending at angle2."
  },
  "api/PLplot.PLStream.axes.html": {
    "href": "api/PLplot.PLStream.axes.html",
    "title": "Method axes | PLplot for .NET",
    "keywords": "Method axes | Improve this Doc View Source axes(Double, Double, String, Double, Int32, String, Double, Int32) plaxes: Draw a box with axes, etc. with arbitrary origin Declaration public void axes(Double x0, Double y0, string xopt, Double xtick, Int32 nxsub, string yopt, Double ytick, Int32 nysub) Parameters Type Name Description Double x0 World X coordinate of origin. Double y0 World Y coordinate of origin. System.String xopt One or more string concatenated from XYAxisOpt . Double xtick World coordinate interval between major ticks on the x axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nxsub Number of subintervals between major x axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. System.String yopt One or more string concatenated from XYAxisOpt . Double ytick World coordinate interval between major ticks on the y axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nysub Number of subintervals between major y axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. Remarks Draws a box around the currently defined viewport with arbitrary world-coordinate origin specified by x0 and y0 and labels it with world coordinate values appropriate to the window. Thus plaxes should only be called after defining both viewport and window. The ascii character strings xopt and yopt specify how the box should be drawn as described below. If ticks and/or subticks are to be drawn for a particular axis, the tick intervals and number of subintervals may be specified explicitly, or they may be defaulted by setting the appropriate arguments to zero."
  },
  "api/PLplot.PLStream.bin.html": {
    "href": "api/PLplot.PLStream.bin.html",
    "title": "Method bin | PLplot for .NET",
    "keywords": "Method bin | Improve this Doc View Source bin(Double[], Double[], Bin) plbin: Plot a histogram from binned data Declaration public void bin(Double[] x, Double[] y, Bin opt) Parameters Type Name Description Double [] x A vector containing values associated with bins. These must form a strictly increasing sequence. Double [] y A vector containing a number which is proportional to the number of points in each bin. This is a PLFLT (instead of PLINT) vector so as to allow histograms of probabilities, etc. Bin opt Is a combination of several flags: opt=PL_BIN_DEFAULT: The x represent the lower bin boundaries, the outer bins are expanded to fill up the entire x-axis and bins of zero height are simply drawn. opt=PL_BIN_CENTRED|...: The bin boundaries are to be midway between the x values. If the values in x are equally spaced, the values are the center values of the bins. opt=PL_BIN_NOEXPAND|...: The outer bins are drawn with equal size as the ones inside. opt=PL_BIN_NOEMPTY|...: Bins with zero height are not drawn (there is a gap for such bins). Remarks Plots a histogram consisting of nbin bins. The value associated with the i'th bin is placed in x[i], and the number of points in the bin is placed in y[i]. For proper operation, the values in x[i] must form a strictly increasing sequence. By default, x[i] is the left-hand edge of the i'th bin. If opt=PL_BIN_CENTRED is used, the bin boundaries are placed midway between the values in the x vector. Also see plhist for drawing histograms from unbinned data."
  },
  "api/PLplot.PLStream.btime.html": {
    "href": "api/PLplot.PLStream.btime.html",
    "title": "Method btime | PLplot for .NET",
    "keywords": "Method btime | Improve this Doc View Source btime(out Int32, out Int32, out Int32, out Int32, out Int32, out Double, Double) plbtime: Calculate broken-down time from continuous time for the current stream Declaration public void btime(out Int32 year, out Int32 month, out Int32 day, out Int32 hour, out Int32 min, out Double sec, Double ctime) Parameters Type Name Description Int32 year Returned value of years with positive values corresponding to CE (i.e., 1 = 1 CE, etc.) and non-negative values corresponding to BCE (e.g., 0 = 1 BCE, -1 = 2 BCE, etc.) Int32 month Returned value of month within the year in the range from 0 (January) to 11 (December). Int32 day Returned value of day within the month in the range from 1 to 31. Int32 hour Returned value of hour within the day in the range from 0 to 23. Int32 min Returned value of minute within the hour in the range from 0 to 59 Double sec Returned value of second within the minute in range from 0. to 60. Double ctime Continuous time from which the broken-down time is calculated. Remarks Calculate broken-down time; year, month, day, hour, min, sec; from continuous time, ctime for the current stream. This function is the inverse of plctime."
  },
  "api/PLplot.PLStream.bop.html": {
    "href": "api/PLplot.PLStream.bop.html",
    "title": "Method bop | PLplot for .NET",
    "keywords": "Method bop | Improve this Doc View Source bop() plbop: Begin a new page Declaration public void bop() Remarks Begins a new page. For a file driver, the output file is opened if necessary. Advancing the page via pleop and plbop is useful when a page break is desired at a particular point when plotting to subpages. Another use for pleop and plbop is when plotting pages to different files, since you can manually set the file name by calling plsfnam after the call to pleop. (In fact some drivers may only support a single page per file, making this a necessity.) One way to handle this case automatically is to page advance via pladv, but enable familying (see plsfam) with a small limit on the file size so that a new family member file will be created on each page break."
  },
  "api/PLplot.PLStream.box.html": {
    "href": "api/PLplot.PLStream.box.html",
    "title": "Method box | PLplot for .NET",
    "keywords": "Method box | Improve this Doc View Source box(String, Double, Int32, String, Double, Int32) plbox: Draw a box with axes, etc Declaration public void box(string xopt, Double xtick, Int32 nxsub, string yopt, Double ytick, Int32 nysub) Parameters Type Name Description System.String xopt One or more string concatenated from XYAxisOpt . Double xtick World coordinate interval between major ticks on the x axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nxsub Number of subintervals between major x axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. System.String yopt One or more string concatenated from XYAxisOpt . Double ytick World coordinate interval between major ticks on the y axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nysub Number of subintervals between major y axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. Remarks Draws a box around the currently defined viewport, and labels it with world coordinate values appropriate to the window. Thus plbox should only be called after defining both viewport and window. The ascii character strings xopt and yopt specify how the box should be drawn as described below. If ticks and/or subticks are to be drawn for a particular axis, the tick intervals and number of subintervals may be specified explicitly, or they may be defaulted by setting the appropriate arguments to zero."
  },
  "api/PLplot.PLStream.box3.html": {
    "href": "api/PLplot.PLStream.box3.html",
    "title": "Method box3 | PLplot for .NET",
    "keywords": "Method box3 | Improve this Doc View Source box3(String, String, Double, Int32, String, String, Double, Int32, String, String, Double, Int32) plbox3: Draw a box with axes, etc, in 3-d Declaration public void box3(string xopt, string xlabel, Double xtick, Int32 nxsub, string yopt, string ylabel, Double ytick, Int32 nysub, string zopt, string zlabel, Double ztick, Int32 nzsub) Parameters Type Name Description System.String xopt One or more string concatenated from XYAxisOpt . System.String xlabel A UTF-8 character string specifying the text label for the x axis. It is only drawn if u is in the xopt string. Double xtick World coordinate interval between major ticks on the x axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nxsub Number of subintervals between major x axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. System.String yopt One or more string concatenated from XYAxisOpt . System.String ylabel A UTF-8 character string specifying the text label for the y axis. It is only drawn if u is in the yopt string. Double ytick World coordinate interval between major ticks on the y axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nysub Number of subintervals between major y axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. System.String zopt One or more string concatenated from ZAxisOpt . System.String zlabel A UTF-8 character string specifying the text label for the z axis. It is only drawn if u or v are in the zopt string. Double ztick World coordinate interval between major ticks on the z axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nzsub Number of subintervals between major z axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. Remarks Draws axes, numeric and text labels for a three-dimensional surface plot. For a more complete description of three-dimensional plotting see ."
  },
  "api/PLplot.PLStream.calc_world.html": {
    "href": "api/PLplot.PLStream.calc_world.html",
    "title": "Method calc_world | PLplot for .NET",
    "keywords": "Method calc_world | Improve this Doc View Source calc_world(Double, Double, out Double, out Double, out Int32) plcalc_world: Calculate world coordinates and corresponding window index from relative device coordinates Declaration public void calc_world(Double rx, Double ry, out Double wx, out Double wy, out Int32 window) Parameters Type Name Description Double rx Input relative device coordinate (0.0-1.0) for the x coordinate. Double ry Input relative device coordinate (0.0-1.0) for the y coordinate. Double wx Returned value of the x world coordinate corresponding to the relative device coordinates rx and ry. Double wy Returned value of the y world coordinate corresponding to the relative device coordinates rx and ry. Int32 window Returned value of the last defined window index that corresponds to the input relative device coordinates (and the returned world coordinates). To give some background on the window index, for each page the initial window index is set to zero, and each time plwind is called within the page, world and device coordinates are stored for the window and the window index is incremented. Thus, for a simple page layout with non-overlapping viewports and one window per viewport, window corresponds to the viewport index (in the order which the viewport/windows were created) of the only viewport/window corresponding to rx and ry. However, for more complicated layouts with potentially overlapping viewports and possibly more than one window (set of world coordinates) per viewport, window and the corresponding output world coordinates corresponds to the last window created that fulfills the criterion that the relative device coordinates are inside it. Finally, in all cases where the input relative device coordinates are not inside any viewport/window, then the returned value of the last defined window index is set to -1. Remarks Calculate world coordinates, wx and wy, and corresponding window index from relative device coordinates, rx and ry."
  },
  "api/PLplot.PLStream.clear.html": {
    "href": "api/PLplot.PLStream.clear.html",
    "title": "Method clear | PLplot for .NET",
    "keywords": "Method clear | Improve this Doc View Source clear() plclear: Clear current (sub)page Declaration public void clear() Remarks Clears the current page, effectively erasing everything that have been drawn. This command only works with interactive drivers; if the driver does not support this, the page is filled with the background color in use. If the current page is divided into subpages, only the current subpage is erased. The nth subpage can be selected with pladv(n)."
  },
  "api/PLplot.PLStream.col0.html": {
    "href": "api/PLplot.PLStream.col0.html",
    "title": "Method col0 | PLplot for .NET",
    "keywords": "Method col0 | Improve this Doc View Source col0(Int32) plcol0: Set color, cmap0 Declaration public void col0(Int32 icol0) Parameters Type Name Description Int32 icol0 Integer representing the color. The defaults at present are (these may change): 0 black (default background) 1 red (default foreground) 2 yellow 3 green 4 aquamarine 5 pink 6 wheat 7 grey 8 brown 9 blue10 BlueViolet11 cyan12 turquoise13 magenta14 salmon15 white Use plscmap0 to change the entire cmap0 color palette and plscol0 to change an individual color in the cmap0 color palette. Remarks Sets the color index for cmap0 (see )."
  },
  "api/PLplot.PLStream.col1.html": {
    "href": "api/PLplot.PLStream.col1.html",
    "title": "Method col1 | PLplot for .NET",
    "keywords": "Method col1 | Improve this Doc View Source col1(Double) plcol1: Set color, cmap1 Declaration public void col1(Double col1) Parameters Type Name Description Double col1 This value must be in the range (0.0-1.0) and is mapped to color using the continuous cmap1 palette which by default ranges from blue to the background color to red. The cmap1 palette can also be straightforwardly changed by the user with plscmap1 or plscmap1l. Remarks Sets the color for cmap1 (see )."
  },
  "api/PLplot.PLStream.configtime.html": {
    "href": "api/PLplot.PLStream.configtime.html",
    "title": "Method configtime | PLplot for .NET",
    "keywords": "Method configtime | Improve this Doc View Source configtime(Double, Double, Double, Int32, Boolean, Int32, Int32, Int32, Int32, Int32, Double) plconfigtime: Configure the transformation between continuous and broken-down time for the current stream Declaration public void configtime(Double scale, Double offset1, Double offset2, Int32 ccontrol, Boolean ifbtime_offset, Int32 year, Int32 month, Int32 day, Int32 hour, Int32 min, Double sec) Parameters Type Name Description Double scale The number of days per continuous time unit. As a special case, if scale is 0., then all other arguments are ignored, and the result (the default used by PLplot) is the equivalent of a call to plconfigtime(1./86400., 0., 0., 0x0, 1, 1970, 0, 1, 0, 0, 0.). That is, for this special case broken-down time is calculated with the proleptic Gregorian calendar with no leap seconds inserted, and the continuous time is defined as the number of seconds since the Unix epoch of 1970-01-01T00:00:00Z. Double offset1 If ifbtime_offset is true, the parameters offset1 and offset2 are completely ignored. Otherwise, the sum of these parameters (with units in days) specify the epoch of the continuous time relative to the MJD epoch corresponding to the Gregorian calendar date of 1858-11-17T00:00:00Z or JD = 2400000.5. Two PLFLT numbers are used to specify the origin to allow users (by specifying offset1 as an integer that can be exactly represented by a floating-point variable and specifying offset2 as a number in the range from 0. to 1) the chance to minimize the numerical errors of the continuous time representation. Double offset2 See documentation of offset1. Int32 ccontrol ccontrol contains bits controlling the transformation. If the 0x1 bit is set, then the proleptic Julian calendar is used for broken-down time rather than the proleptic Gregorian calendar. If the 0x2 bit is set, then leap seconds that have been historically used to define UTC are inserted into the broken-down time. Other possibilities for additional control bits for ccontrol exist such as making the historical time corrections in the broken-down time corresponding to ET (ephemeris time) or making the (slightly non-constant) corrections from international atomic time (TAI) to what astronomers define as terrestrial time (TT). But those additional possibilities have not been implemented yet in the qsastime library (one of the PLplot utility libraries). Boolean ifbtime_offset ifbtime_offset controls how the epoch of the continuous time scale is specified by the user. If ifbtime_offset is false, then offset1 and offset2 are used to specify the epoch, and the following broken-down time parameters are completely ignored. If ifbtime_offset is true, then offset1 and offset2 are completely ignored, and the following broken-down time parameters are used to specify the epoch. Int32 year Year of epoch. Int32 month Month of epoch in range from 0 (January) to 11 (December). Int32 day Day of epoch in range from 1 to 31. Int32 hour Hour of epoch in range from 0 to 23 Int32 min Minute of epoch in range from 0 to 59. Double sec Second of epoch in range from 0. to 60. Remarks Configure the transformation between continuous and broken-down time for the current stream. This transformation is used by both plbtime and plctime."
  },
  "api/PLplot.PLStream.cont.html": {
    "href": "api/PLplot.PLStream.cont.html",
    "title": "Method cont | PLplot for .NET",
    "keywords": "Method cont | Improve this Doc View Source cont(Double[,], Int32, Int32, Int32, Int32, Double[], TransformFunc) plcont: Contour plot Declaration public void cont(Double[, ] f, Int32 kx, Int32 lx, Int32 ky, Int32 ly, Double[] clevel, TransformFunc pltr) Parameters Type Name Description Double [,] f A matrix containing data to be contoured. Int32 kx Start of x indices to consider Int32 lx End (exclusive) of x indices to consider Int32 ky Start of y indices to consider Int32 ly End (exclusive) of y indices to consider Double [] clevel A vector specifying the levels at which to draw contours. TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrix f and the world coordinates.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Draws a contour plot of the data in f[nx][ny], using the nlevel contour levels specified by clevel. Only the region of the matrix from kx to lx and from ky to ly is plotted out where all these index ranges are interpreted as one-based for historical reasons. A transformation routine pointed to by pltr with a generic pointer pltr_data for additional data required by the transformation routine is used to map indices within the matrix to the world coordinates."
  },
  "api/PLplot.PLStream.ctime.html": {
    "href": "api/PLplot.PLStream.ctime.html",
    "title": "Method ctime | PLplot for .NET",
    "keywords": "Method ctime | Improve this Doc View Source ctime(Int32, Int32, Int32, Int32, Int32, Double, out Double) plctime: Calculate continuous time from broken-down time for the current stream Declaration public void ctime(Int32 year, Int32 month, Int32 day, Int32 hour, Int32 min, Double sec, out Double ctime) Parameters Type Name Description Int32 year Input year. Int32 month Input month in range from 0 (January) to 11 (December). Int32 day Input day in range from 1 to 31. Int32 hour Input hour in range from 0 to 23 Int32 min Input minute in range from 0 to 59. Double sec Input second in range from 0. to 60. Double ctime Returned value of the continuous time calculated from the broken-down time specified by the previous parameters. Remarks Calculate continuous time, ctime, from broken-down time for the current stream. The broken-down time is specified by the following parameters: year, month, day, hour, min, and sec. This function is the inverse of plbtime."
  },
  "api/PLplot.PLStream.did2pc.html": {
    "href": "api/PLplot.PLStream.did2pc.html",
    "title": "Method did2pc | PLplot for .NET",
    "keywords": "Method did2pc | Improve this Doc View Source did2pc(out Double, out Double, out Double, out Double) Converts input values from relative device coordinates to relative plot coordinates. Declaration public void did2pc(out Double xmin, out Double ymin, out Double xmax, out Double ymax) Parameters Type Name Description Double xmin Double ymin Double xmax Double ymax"
  },
  "api/PLplot.PLStream.dip2dc.html": {
    "href": "api/PLplot.PLStream.dip2dc.html",
    "title": "Method dip2dc | PLplot for .NET",
    "keywords": "Method dip2dc | Improve this Doc View Source dip2dc(out Double, out Double, out Double, out Double) Converts input values from relative plot coordinates to relative device coordinates. Declaration public void dip2dc(out Double xmin, out Double ymin, out Double xmax, out Double ymax) Parameters Type Name Description Double xmin Double ymin Double xmax Double ymax"
  },
  "api/PLplot.PLStream.env.html": {
    "href": "api/PLplot.PLStream.env.html",
    "title": "Method env | PLplot for .NET",
    "keywords": "Method env | Improve this Doc View Source env(Double, Double, Double, Double, AxesScale, AxisBox) plenv: Set up standard window and draw box Declaration public void env(Double xmin, Double xmax, Double ymin, Double ymax, AxesScale just, AxisBox axis) Parameters Type Name Description Double xmin Value of x at left-hand edge of window (in world coordinates). Double xmax Value of x at right-hand edge of window (in world coordinates). Double ymin Value of y at bottom edge of window (in world coordinates). Double ymax Value of y at top edge of window (in world coordinates). AxesScale just Controls how the axes will be scaled: -1: the scales will not be set, the user must set up the scale before calling plenv using plsvpa, plvasp or other. 0: the x and y axes are scaled independently to use as much of the screen as possible. 1: the scales of the x and y axes are made equal. 2: the axis of the x and y axes are made equal, and the plot box will be square. AxisBox axis Controls drawing of the box around the plot: -2: draw no box, no tick marks, no numeric tick labels, no axes. -1: draw box only. 0: draw box, ticks, and numeric tick labels. 1: also draw coordinate axes at x=0 and y=0. 2: also draw a grid at major tick positions in both coordinates. 3: also draw a grid at minor tick positions in both coordinates. 10: same as 0 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 11: same as 1 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 12: same as 2 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 13: same as 3 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 20: same as 0 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 21: same as 1 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 22: same as 2 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 23: same as 3 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 30: same as 0 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 31: same as 1 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 32: same as 2 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 33: same as 3 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 40: same as 0 except date / time x labels. 41: same as 1 except date / time x labels. 42: same as 2 except date / time x labels. 43: same as 3 except date / time x labels. 50: same as 0 except date / time y labels. 51: same as 1 except date / time y labels. 52: same as 2 except date / time y labels. 53: same as 3 except date / time y labels. 60: same as 0 except date / time x and y labels. 61: same as 1 except date / time x and y labels. 62: same as 2 except date / time x and y labels. 63: same as 3 except date / time x and y labels. 70: same as 0 except custom x and y labels. 71: same as 1 except custom x and y labels. 72: same as 2 except custom x and y labels. 73: same as 3 except custom x and y labels. Remarks Sets up plotter environment for simple graphs by calling pladv and setting up viewport and window to sensible default values. plenv leaves a standard margin (left-hand margin of eight character heights, and a margin around the other three sides of five character heights) around most graphs for axis labels and a title. When these defaults are not suitable, use the individual routines plvpas, plvpor, or plvasp for setting up the viewport, plwind for defining the window, and plbox for drawing the box."
  },
  "api/PLplot.PLStream.env0.html": {
    "href": "api/PLplot.PLStream.env0.html",
    "title": "Method env0 | PLplot for .NET",
    "keywords": "Method env0 | Improve this Doc View Source env0(Double, Double, Double, Double, AxesScale, AxisBox) plenv0: Same as plenv but if in multiplot mode does not advance the subpage, instead clears it Declaration public void env0(Double xmin, Double xmax, Double ymin, Double ymax, AxesScale just, AxisBox axis) Parameters Type Name Description Double xmin Value of x at left-hand edge of window (in world coordinates). Double xmax Value of x at right-hand edge of window (in world coordinates). Double ymin Value of y at bottom edge of window (in world coordinates). Double ymax Value of y at top edge of window (in world coordinates). AxesScale just Controls how the axes will be scaled: -1: the scales will not be set, the user must set up the scale before calling plenv0 using plsvpa, plvasp or other. 0: the x and y axes are scaled independently to use as much of the screen as possible. 1: the scales of the x and y axes are made equal. 2: the axis of the x and y axes are made equal, and the plot box will be square. AxisBox axis Controls drawing of the box around the plot: -2: draw no box, no tick marks, no numeric tick labels, no axes. -1: draw box only. 0: draw box, ticks, and numeric tick labels. 1: also draw coordinate axes at x=0 and y=0. 2: also draw a grid at major tick positions in both coordinates. 3: also draw a grid at minor tick positions in both coordinates. 10: same as 0 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 11: same as 1 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 12: same as 2 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 13: same as 3 except logarithmic x tick marks. (The x data have to be converted to logarithms separately.) 20: same as 0 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 21: same as 1 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 22: same as 2 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 23: same as 3 except logarithmic y tick marks. (The y data have to be converted to logarithms separately.) 30: same as 0 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 31: same as 1 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 32: same as 2 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 33: same as 3 except logarithmic x and y tick marks. (The x and y data have to be converted to logarithms separately.) 40: same as 0 except date / time x labels. 41: same as 1 except date / time x labels. 42: same as 2 except date / time x labels. 43: same as 3 except date / time x labels. 50: same as 0 except date / time y labels. 51: same as 1 except date / time y labels. 52: same as 2 except date / time y labels. 53: same as 3 except date / time y labels. 60: same as 0 except date / time x and y labels. 61: same as 1 except date / time x and y labels. 62: same as 2 except date / time x and y labels. 63: same as 3 except date / time x and y labels. 70: same as 0 except custom x and y labels. 71: same as 1 except custom x and y labels. 72: same as 2 except custom x and y labels. 73: same as 3 except custom x and y labels. Remarks Sets up plotter environment for simple graphs by calling pladv and setting up viewport and window to sensible default values. plenv0 leaves a standard margin (left-hand margin of eight character heights, and a margin around the other three sides of five character heights) around most graphs for axis labels and a title. When these defaults are not suitable, use the individual routines plvpas, plvpor, or plvasp for setting up the viewport, plwind for defining the window, and plbox for drawing the box."
  },
  "api/PLplot.PLStream.eop.html": {
    "href": "api/PLplot.PLStream.eop.html",
    "title": "Method eop | PLplot for .NET",
    "keywords": "Method eop | Improve this Doc View Source eop() pleop: Eject current page Declaration public void eop() Remarks Clears the graphics screen of an interactive device, or ejects a page on a plotter. See plbop for more information."
  },
  "api/PLplot.PLStream.errx.html": {
    "href": "api/PLplot.PLStream.errx.html",
    "title": "Method errx | PLplot for .NET",
    "keywords": "Method errx | Improve this Doc View Source errx(Double[], Double[], Double[]) plerrx: Draw error bars in x direction Declaration public void errx(Double[] xmin, Double[] xmax, Double[] y) Parameters Type Name Description Double [] xmin A vector containing the x coordinates of the left-hand endpoints of the error bars. Double [] xmax A vector containing the x coordinates of the right-hand endpoints of the error bars. Double [] y A vector containing the y coordinates of the error bars. Remarks Draws a set of n error bars in x direction, the i'th error bar extending from xmin[i] to xmax[i] at y coordinate y[i]. The terminals of the error bars are of length equal to the minor tick length (settable using plsmin)."
  },
  "api/PLplot.PLStream.erry.html": {
    "href": "api/PLplot.PLStream.erry.html",
    "title": "Method erry | PLplot for .NET",
    "keywords": "Method erry | Improve this Doc View Source erry(Double[], Double[], Double[]) plerry: Draw error bars in the y direction Declaration public void erry(Double[] x, Double[] ymin, Double[] ymax) Parameters Type Name Description Double [] x A vector containing the x coordinates of the error bars. Double [] ymin A vector containing the y coordinates of the lower endpoints of the error bars. Double [] ymax A vector containing the y coordinates of the upper endpoints of the error bars. Remarks Draws a set of n error bars in the y direction, the i'th error bar extending from ymin[i] to ymax[i] at x coordinate x[i]. The terminals of the error bars are of length equal to the minor tick length (settable using plsmin)."
  },
  "api/PLplot.PLStream.famadv.html": {
    "href": "api/PLplot.PLStream.famadv.html",
    "title": "Method famadv | PLplot for .NET",
    "keywords": "Method famadv | Improve this Doc View Source famadv() plfamadv: Advance to the next family file on the next new page Declaration public void famadv() Remarks Advance to the next family file on the next new page."
  },
  "api/PLplot.PLStream.fill.html": {
    "href": "api/PLplot.PLStream.fill.html",
    "title": "Method fill | PLplot for .NET",
    "keywords": "Method fill | Improve this Doc View Source fill(Double[], Double[]) plfill: Draw filled polygon Declaration public void fill(Double[] x, Double[] y) Parameters Type Name Description Double [] x A vector containing the x coordinates of vertices. Double [] y A vector containing the y coordinates of vertices. Remarks Fills the polygon defined by the n points (x[i], y[i]) using the pattern defined by plpsty or plpat. The default fill style is a solid fill. The routine will automatically close the polygon between the last and first vertices. If multiple closed polygons are passed in x and y then plfill will fill in between them."
  },
  "api/PLplot.PLStream.fill3.html": {
    "href": "api/PLplot.PLStream.fill3.html",
    "title": "Method fill3 | PLplot for .NET",
    "keywords": "Method fill3 | Improve this Doc View Source fill3(Double[], Double[], Double[]) plfill3: Draw filled polygon in 3D Declaration public void fill3(Double[] x, Double[] y, Double[] z) Parameters Type Name Description Double [] x A vector containing the x coordinates of vertices. Double [] y A vector containing the y coordinates of vertices. Double [] z A vector containing the z coordinates of vertices. Remarks Fills the 3D polygon defined by the n points in the x, y, and z vectors using the pattern defined by plpsty or plpat. The routine will automatically close the polygon between the last and first vertices. If multiple closed polygons are passed in x, y, and z then plfill3 will fill in between them."
  },
  "api/PLplot.PLStream.flush.html": {
    "href": "api/PLplot.PLStream.flush.html",
    "title": "Method flush | PLplot for .NET",
    "keywords": "Method flush | Improve this Doc View Source flush() plflush: Flushes the output stream Declaration public void flush() Remarks Flushes the output stream. Use sparingly, if at all."
  },
  "api/PLplot.PLStream.font.html": {
    "href": "api/PLplot.PLStream.font.html",
    "title": "Method font | PLplot for .NET",
    "keywords": "Method font | Improve this Doc View Source font(FontFlag) plfont: Set font Declaration public void font(FontFlag ifont) Parameters Type Name Description FontFlag ifont Specifies the font: 1: Sans serif font (simplest and fastest) 2: Serif font 3: Italic font 4: Script font Remarks Sets the font used for subsequent text and symbols. For devices that still use Hershey fonts this routine has no effect unless the Hershey fonts with extended character set are loaded (see plfontld). For unicode-aware devices that use system fonts instead of Hershey fonts, this routine calls the plsfci routine with argument set up appropriately for the various cases below. However, this method of specifying the font for unicode-aware devices is deprecated, and the much more flexible method of calling plsfont directly is recommended instead (where plsfont provides a user-friendly interface to plsfci),"
  },
  "api/PLplot.PLStream.fontld.html": {
    "href": "api/PLplot.PLStream.fontld.html",
    "title": "Method fontld | PLplot for .NET",
    "keywords": "Method fontld | Improve this Doc View Source fontld(Int32) plfontld: Load Hershey fonts Declaration public void fontld(Int32 fnt) Parameters Type Name Description Int32 fnt Specifies the type of Hershey fonts to load. A zero value specifies Hershey fonts with the standard character set and a non-zero value (the default assumed if plfontld is never called) specifies Hershey fonts with the extended character set. Remarks Loads the Hershey fonts used for text and symbols. This routine may be called before or after initializing PLplot. If not explicitly called before PLplot initialization, then by default that initialization loads Hershey fonts with the extended character set. This routine only has a practical effect for devices that still use Hershey fonts (as opposed to modern devices that use unicode-aware system fonts instead of Hershey fonts)."
  },
  "api/PLplot.PLStream.gchr.html": {
    "href": "api/PLplot.PLStream.gchr.html",
    "title": "Method gchr | PLplot for .NET",
    "keywords": "Method gchr | Improve this Doc View Source gchr(out Double, out Double) plgchr: Get character default height and current (scaled) height Declaration public void gchr(out Double p_def, out Double p_ht) Parameters Type Name Description Double p_def Returned value of the default character height (mm). Double p_ht Returned value of the scaled character height (mm). Remarks Get character default height and current (scaled) height."
  },
  "api/PLplot.PLStream.gcol0.html": {
    "href": "api/PLplot.PLStream.gcol0.html",
    "title": "Method gcol0 | PLplot for .NET",
    "keywords": "Method gcol0 | Improve this Doc View Source gcol0(Int32, out Int32, out Int32, out Int32) plgcol0: Returns 8-bit RGB values for given color index from cmap0 Declaration public void gcol0(Int32 icol0, out Int32 r, out Int32 g, out Int32 b) Parameters Type Name Description Int32 icol0 Index of desired cmap0 color. Int32 r Returned value of the 8-bit red value. Int32 g Returned value of the 8-bit green value. Int32 b Returned value of the 8-bit blue value. Remarks Returns 8-bit RGB values (0-255) for given color from cmap0 (see ). Values are negative if an invalid color id is given."
  },
  "api/PLplot.PLStream.gcol0a.html": {
    "href": "api/PLplot.PLStream.gcol0a.html",
    "title": "Method gcol0a | PLplot for .NET",
    "keywords": "Method gcol0a | Improve this Doc View Source gcol0a(Int32, out Int32, out Int32, out Int32, out Double) plgcol0a: Returns 8-bit RGB values and PLFLT alpha transparency value for given color index from cmap0 Declaration public void gcol0a(Int32 icol0, out Int32 r, out Int32 g, out Int32 b, out Double alpha) Parameters Type Name Description Int32 icol0 Index of desired cmap0 color. Int32 r Returned value of the red intensity in the range from 0 to 255. Int32 g Returned value of the green intensity in the range from 0 to 255. Int32 b Returned value of the blue intensity in the range from 0 to 255. Double alpha Returned value of the alpha transparency in the range from (0.0-1.0). Remarks Returns 8-bit RGB values (0-255) and PLFLT alpha transparency value (0.0-1.0) for given color from cmap0 (see ). Values are negative if an invalid color id is given."
  },
  "api/PLplot.PLStream.gcolbg.html": {
    "href": "api/PLplot.PLStream.gcolbg.html",
    "title": "Method gcolbg | PLplot for .NET",
    "keywords": "Method gcolbg | Improve this Doc View Source gcolbg(out Int32, out Int32, out Int32) plgcolbg: Returns the background color (cmap0[0]) by 8-bit RGB value Declaration public void gcolbg(out Int32 r, out Int32 g, out Int32 b) Parameters Type Name Description Int32 r Returned value of the red intensity in the range from 0 to 255. Int32 g Returned value of the green intensity in the range from 0 to 255. Int32 b Returned value of the blue intensity in the range from 0 to 255. Remarks Returns the background color (cmap0[0]) by 8-bit RGB value."
  },
  "api/PLplot.PLStream.gcolbga.html": {
    "href": "api/PLplot.PLStream.gcolbga.html",
    "title": "Method gcolbga | PLplot for .NET",
    "keywords": "Method gcolbga | Improve this Doc View Source gcolbga(out Int32, out Int32, out Int32, out Double) plgcolbga: Returns the background color (cmap0[0]) by 8-bit RGB value and PLFLT alpha transparency value Declaration public void gcolbga(out Int32 r, out Int32 g, out Int32 b, out Double alpha) Parameters Type Name Description Int32 r Returned value of the red intensity in the range from 0 to 255. Int32 g Returned value of the green intensity in the range from 0 to 255. Int32 b Returned value of the blue intensity in the range from 0 to 255. Double alpha Returned value of the alpha transparency in the range (0.0-1.0). Remarks Returns the background color (cmap0[0]) by 8-bit RGB value and PLFLT alpha transparency value."
  },
  "api/PLplot.PLStream.gcompression.html": {
    "href": "api/PLplot.PLStream.gcompression.html",
    "title": "Method gcompression | PLplot for .NET",
    "keywords": "Method gcompression | Improve this Doc View Source gcompression(out Int32) plgcompression: Get the current device-compression setting Declaration public void gcompression(out Int32 compression) Parameters Type Name Description Int32 compression Returned value of the compression setting for the current device. Remarks Get the current device-compression setting. This parameter is only used for drivers that provide compression."
  },
  "api/PLplot.PLStream.gdev.html": {
    "href": "api/PLplot.PLStream.gdev.html",
    "title": "Method gdev | PLplot for .NET",
    "keywords": "Method gdev | Improve this Doc View Source gdev(out String) plgdev: Get the current device (keyword) name Declaration public void gdev(out string p_dev) Parameters Type Name Description System.String p_dev Returned ascii character string (with preallocated length of 80 characters or more) containing the device (keyword) name. Remarks Get the current device (keyword) name. Note: you must have allocated space for this (80 characters is safe)."
  },
  "api/PLplot.PLStream.gdidev.html": {
    "href": "api/PLplot.PLStream.gdidev.html",
    "title": "Method gdidev | PLplot for .NET",
    "keywords": "Method gdidev | Improve this Doc View Source gdidev(out Double, out Double, out Double, out Double) plgdidev: Get parameters that define current device-space window Declaration public void gdidev(out Double p_mar, out Double p_aspect, out Double p_jx, out Double p_jy) Parameters Type Name Description Double p_mar Returned value of the relative margin width. Double p_aspect Returned value of the aspect ratio. Double p_jx Returned value of the relative justification in x. Double p_jy Returned value of the relative justification in y. Remarks Get relative margin width, aspect ratio, and relative justification that define current device-space window. If plsdidev has not been called the default values pointed to by p_mar, p_aspect, p_jx, and p_jy will all be 0."
  },
  "api/PLplot.PLStream.gdiori.html": {
    "href": "api/PLplot.PLStream.gdiori.html",
    "title": "Method gdiori | PLplot for .NET",
    "keywords": "Method gdiori | Improve this Doc View Source gdiori(out Double) plgdiori: Get plot orientation Declaration public void gdiori(out Double p_rot) Parameters Type Name Description Double p_rot Returned value of the orientation parameter. Remarks Get plot orientation parameter which is multiplied by 90deg to obtain the angle of rotation. Note, arbitrary rotation parameters such as 0.2 (corresponding to 18deg) are possible, but the usual values for the rotation parameter are 0., 1., 2., and 3. corresponding to 0deg (landscape mode), 90deg (portrait mode), 180deg (seascape mode), and 270deg (upside-down mode). If plsdiori has not been called the default value pointed to by p_rot will be 0."
  },
  "api/PLplot.PLStream.gdiplt.html": {
    "href": "api/PLplot.PLStream.gdiplt.html",
    "title": "Method gdiplt | PLplot for .NET",
    "keywords": "Method gdiplt | Improve this Doc View Source gdiplt(out Double, out Double, out Double, out Double) plgdiplt: Get parameters that define current plot-space window Declaration public void gdiplt(out Double p_xmin, out Double p_ymin, out Double p_xmax, out Double p_ymax) Parameters Type Name Description Double p_xmin Returned value of the relative minimum in x. Double p_ymin Returned value of the relative minimum in y. Double p_xmax Returned value of the relative maximum in x. Double p_ymax Returned value of the relative maximum in y. Remarks Get relative minima and maxima that define current plot-space window. If plsdiplt has not been called the default values pointed to by p_xmin, p_ymin, p_xmax, and p_ymax will be 0., 0., 1., and 1."
  },
  "api/PLplot.PLStream.gdrawmode.html": {
    "href": "api/PLplot.PLStream.gdrawmode.html",
    "title": "Method gdrawmode | PLplot for .NET",
    "keywords": "Method gdrawmode | Improve this Doc View Source gdrawmode() plgdrawmode: Get drawing mode (depends on device support!) Declaration public DrawMode gdrawmode() Returns Type Description DrawMode Remarks Get drawing mode. Note only one device driver (cairo) currently supports this at the moment, and for that case the PLINT value returned by this function is one of PL_DRAWMODE_DEFAULT, PL_DRAWMODE_REPLACE, PL_DRAWMODE_XOR, or PL_DRAWMODE_UNKNOWN. This function returns PL_DRAWMODE_UNKNOWN for the rest of the device drivers. See also plsdrawmode."
  },
  "api/PLplot.PLStream.gfci.html": {
    "href": "api/PLplot.PLStream.gfci.html",
    "title": "Method gfci | PLplot for .NET",
    "keywords": "Method gfci | Improve this Doc View Source gfci(out FCI) plgfci: Get FCI (font characterization integer) Declaration public void gfci(out FCI p_fci) Parameters Type Name Description FCI p_fci Returned value of the current FCI value. Remarks Gets information about the current font using the FCI approach. See for more information."
  },
  "api/PLplot.PLStream.gfam.html": {
    "href": "api/PLplot.PLStream.gfam.html",
    "title": "Method gfam | PLplot for .NET",
    "keywords": "Method gfam | Improve this Doc View Source gfam(out Int32, out Int32, out Int32) plgfam: Get family file parameters Declaration public void gfam(out Int32 p_fam, out Int32 p_num, out Int32 p_bmax) Parameters Type Name Description Int32 p_fam Returned value of the current family flag value. If nonzero, familying is enabled for the current device. Int32 p_num Returned value of the current family file number. Int32 p_bmax Returned value of the maximum file size (in bytes) for a family file. Remarks Gets information about current family file, if familying is enabled. See for more information."
  },
  "api/PLplot.PLStream.gfnam.html": {
    "href": "api/PLplot.PLStream.gfnam.html",
    "title": "Method gfnam | PLplot for .NET",
    "keywords": "Method gfnam | Improve this Doc View Source gfnam(out String) plgfnam: Get output file name Declaration public void gfnam(out string fnam) Parameters Type Name Description System.String fnam Returned ascii character string (with preallocated length of 80 characters or more) containing the file name. Remarks Gets the current output file name, if applicable."
  },
  "api/PLplot.PLStream.gfont.html": {
    "href": "api/PLplot.PLStream.gfont.html",
    "title": "Method gfont | PLplot for .NET",
    "keywords": "Method gfont | Improve this Doc View Source gfont(out FontFamily, out FontStyle, out FontWeight) plgfont: Get family, style and weight of the current font Declaration public void gfont(out FontFamily p_family, out FontStyle p_style, out FontWeight p_weight) Parameters Type Name Description FontFamily p_family Returned value of the current font family. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_SANS, PL_FCI_SERIF, PL_FCI_MONO, PL_FCI_SCRIPT and PL_FCI_SYMBOL. If p_family is NULL then the font family is not returned. FontStyle p_style Returned value of the current font style. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_UPRIGHT, PL_FCI_ITALIC and PL_FCI_OBLIQUE. If p_style is NULL then the font style is not returned. FontWeight p_weight Returned value of the current font weight. The available values are given by the PL_FCI_* constants in plplot.h. Current options are PL_FCI_MEDIUM and PL_FCI_BOLD. If p_weight is NULL then the font weight is not returned. Remarks Gets information about current font. See for more information on font selection."
  },
  "api/PLplot.PLStream.glevel.html": {
    "href": "api/PLplot.PLStream.glevel.html",
    "title": "Method glevel | PLplot for .NET",
    "keywords": "Method glevel | Improve this Doc View Source glevel(out RunLevel) plglevel: Get the (current) run level Declaration public void glevel(out RunLevel p_level) Parameters Type Name Description RunLevel p_level Returned value of the run level. Remarks Get the (current) run level. Valid settings are: 0, uninitialized 1, initialized 2, viewport defined 3, world coordinates defined"
  },
  "api/PLplot.PLStream.gpage.html": {
    "href": "api/PLplot.PLStream.gpage.html",
    "title": "Method gpage | PLplot for .NET",
    "keywords": "Method gpage | Improve this Doc View Source gpage(out Double, out Double, out Int32, out Int32, out Int32, out Int32) plgpage: Get page parameters Declaration public void gpage(out Double p_xp, out Double p_yp, out Int32 p_xleng, out Int32 p_yleng, out Int32 p_xoff, out Int32 p_yoff) Parameters Type Name Description Double p_xp Returned value of the number of pixels/inch (DPI) in x. Double p_yp Returned value of the number of pixels/inch (DPI) in y. Int32 p_xleng Returned value of the x page length. Int32 p_yleng Returned value of the y page length. Int32 p_xoff Returned value of the x page offset. Int32 p_yoff Returned value of the y page offset. Remarks Gets the current page configuration. The length and offset values are expressed in units that are specific to the current driver. For instance: screen drivers will usually interpret them as number of pixels, whereas printer drivers will usually use mm."
  },
  "api/PLplot.PLStream.gra.html": {
    "href": "api/PLplot.PLStream.gra.html",
    "title": "Method gra | PLplot for .NET",
    "keywords": "Method gra | Improve this Doc View Source gra() plgra: Switch to graphics screen Declaration public void gra() Remarks Sets an interactive device to graphics mode, used in conjunction with pltext to allow graphics and text to be interspersed. On a device which supports separate text and graphics windows, this command causes control to be switched to the graphics window. If already in graphics mode, this command is ignored. It is also ignored on devices which only support a single window or use a different method for shifting focus. See also pltext."
  },
  "api/PLplot.PLStream.gradient.html": {
    "href": "api/PLplot.PLStream.gradient.html",
    "title": "Method gradient | PLplot for .NET",
    "keywords": "Method gradient | Improve this Doc View Source gradient(Double[], Double[], Double) plgradient: Draw linear gradient inside polygon Declaration public void gradient(Double[] x, Double[] y, Double angle) Parameters Type Name Description Double [] x A vector containing the x coordinates of vertices. Double [] y A vector containing the y coordinates of vertices. Double angle Angle (degrees) of gradient vector from x axis. Remarks Draw a linear gradient using cmap1 inside the polygon defined by the n points (x[i], y[i]). Interpretation of the polygon is the same as for plfill. The polygon coordinates and the gradient angle are all expressed in world coordinates. The angle from the x axis for both the rotated coordinate system and the gradient vector is specified by angle. The magnitude of the gradient vector is the difference between the maximum and minimum values of x for the vertices in the rotated coordinate system. The origin of the gradient vector can be interpreted as being anywhere on the line corresponding to the minimum x value for the vertices in the rotated coordinate system. The distance along the gradient vector is linearly transformed to the independent variable of color map 1 which ranges from 0. at the tail of the gradient vector to 1. at the head of the gradient vector. What is drawn is the RGBA color corresponding to the independent variable of cmap1. For more information about cmap1 (see )."
  },
  "api/PLplot.PLStream.griddata.html": {
    "href": "api/PLplot.PLStream.griddata.html",
    "title": "Method griddata | PLplot for .NET",
    "keywords": "Method griddata | Improve this Doc View Source griddata(Double[], Double[], Double[], Double[], Double[], Double[,], Grid, Double) plgriddata: Grid data from irregularly sampled data Declaration public void griddata(Double[] x, Double[] y, Double[] z, Double[] xg, Double[] yg, Double[, ] zg, Grid type, Double data) Parameters Type Name Description Double [] x The input x vector. Double [] y The input y vector. Double [] z The input z vector. Each triple x[i], y[i], z[i] represents one data sample coordinate. Double [] xg A vector that specifies the grid spacing in the x direction. Usually xg has nptsx equally spaced values from the minimum to the maximum values of the x input vector. Double [] yg A vector that specifies the grid spacing in the y direction. Similar to the xg parameter. Double [,] zg The matrix of interpolated results where data lies in the grid specified by xg and yg. Therefore the zg matrix must be dimensioned nptsx by nptsy. Grid type The type of grid interpolation algorithm to use, which can be: GRID_CSA: Bivariate Cubic Spline approximation GRID_DTLI: Delaunay Triangulation Linear Interpolation GRID_NNI: Natural Neighbors Interpolation GRID_NNIDW: Nearest Neighbors Inverse Distance Weighted GRID_NNLI: Nearest Neighbors Linear Interpolation GRID_NNAIDW: Nearest Neighbors Around Inverse Distance Weighted For details of the algorithms read the source file plgridd.c. Double data Some gridding algorithms require extra data, which can be specified through this argument. Currently, for algorithm: GRID_NNIDW, data specifies the number of neighbors to use, the lower the value, the noisier (more local) the approximation is. GRID_NNLI, data specifies what a thin triangle is, in the range [1. .. 2.]. High values enable the usage of very thin triangles for interpolation, possibly resulting in error in the approximation. GRID_NNI, only weights greater than data will be accepted. If 0, all weights will be accepted. Remarks Real world data is frequently irregularly sampled, but PLplot 3D plots require data organized as a grid, i.e., with x sample point values independent of y coordinate and vice versa. This function takes irregularly sampled data from the x[npts], y[npts], and z[npts] vectors; reads the desired grid location from the input vectors xg[nptsx] and yg[nptsy]; and returns the interpolated result on that grid using the output matrix zg[nptsx][nptsy]. The algorithm used to interpolate the data to the grid is specified with the argument type which can have one parameter specified in argument data."
  },
  "api/PLplot.PLStream.gspa.html": {
    "href": "api/PLplot.PLStream.gspa.html",
    "title": "Method gspa | PLplot for .NET",
    "keywords": "Method gspa | Improve this Doc View Source gspa(out Double, out Double, out Double, out Double) plgspa: Get current subpage parameters Declaration public void gspa(out Double xmin, out Double xmax, out Double ymin, out Double ymax) Parameters Type Name Description Double xmin Returned value of the position of the left hand edge of the subpage in millimeters. Double xmax Returned value of the position of the right hand edge of the subpage in millimeters. Double ymin Returned value of the position of the bottom edge of the subpage in millimeters. Double ymax Returned value of the position of the top edge of the subpage in millimeters. Remarks Gets the size of the current subpage in millimeters measured from the bottom left hand corner of the output device page or screen. Can be used in conjunction with plsvpa for setting the size of a viewport in absolute coordinates (millimeters)."
  },
  "api/PLplot.PLStream.gstrm.html": {
    "href": "api/PLplot.PLStream.gstrm.html",
    "title": "Method gstrm | PLplot for .NET",
    "keywords": "Method gstrm | Improve this Doc View Source gstrm(out Int32) plgstrm: Get current stream number Declaration public void gstrm(out Int32 p_strm) Parameters Type Name Description Int32 p_strm Returned value of the current stream value. Remarks Gets the number of the current output stream. See also plsstrm."
  },
  "api/PLplot.PLStream.gver.html": {
    "href": "api/PLplot.PLStream.gver.html",
    "title": "Method gver | PLplot for .NET",
    "keywords": "Method gver | Improve this Doc View Source gver(out String) plgver: Get the current library version number Declaration public void gver(out string p_ver) Parameters Type Name Description System.String p_ver Returned ascii character string (with preallocated length of 80 characters or more) containing the PLplot version number. Remarks Get the current library version number. Note: you must have allocated space for this (80 characters is safe)."
  },
  "api/PLplot.PLStream.gvpd.html": {
    "href": "api/PLplot.PLStream.gvpd.html",
    "title": "Method gvpd | PLplot for .NET",
    "keywords": "Method gvpd | Improve this Doc View Source gvpd(out Double, out Double, out Double, out Double) plgvpd: Get viewport limits in normalized device coordinates Declaration public void gvpd(out Double p_xmin, out Double p_xmax, out Double p_ymin, out Double p_ymax) Parameters Type Name Description Double p_xmin Returned value of the lower viewport limit of the normalized device coordinate in x. Double p_xmax Returned value of the upper viewport limit of the normalized device coordinate in x. Double p_ymin Returned value of the lower viewport limit of the normalized device coordinate in y. Double p_ymax Returned value of the upper viewport limit of the normalized device coordinate in y. Remarks Get viewport limits in normalized device coordinates."
  },
  "api/PLplot.PLStream.gvpw.html": {
    "href": "api/PLplot.PLStream.gvpw.html",
    "title": "Method gvpw | PLplot for .NET",
    "keywords": "Method gvpw | Improve this Doc View Source gvpw(out Double, out Double, out Double, out Double) plgvpw: Get viewport limits in world coordinates Declaration public void gvpw(out Double p_xmin, out Double p_xmax, out Double p_ymin, out Double p_ymax) Parameters Type Name Description Double p_xmin Returned value of the lower viewport limit of the world coordinate in x. Double p_xmax Returned value of the upper viewport limit of the world coordinate in x. Double p_ymin Returned value of the lower viewport limit of the world coordinate in y. Double p_ymax Returned value of the upper viewport limit of the world coordinate in y. Remarks Get viewport limits in world coordinates."
  },
  "api/PLplot.PLStream.gxax.html": {
    "href": "api/PLplot.PLStream.gxax.html",
    "title": "Method gxax | PLplot for .NET",
    "keywords": "Method gxax | Improve this Doc View Source gxax(out Int32, out Int32) plgxax: Get x axis parameters Declaration public void gxax(out Int32 p_digmax, out Int32 p_digits) Parameters Type Name Description Int32 p_digmax Returned value of the maximum number of digits for the x axis. If nonzero, the printed label has been switched to a floating-point representation when the number of digits exceeds this value. Int32 p_digits Returned value of the actual number of digits for the numeric labels (x axis) from the last plot. Remarks Returns current values of the p_digmax and p_digits flags for the x axis. p_digits is updated after the plot is drawn, so this routine should only be called after the call to plbox (or plbox3) is complete. See for more information."
  },
  "api/PLplot.PLStream.gyax.html": {
    "href": "api/PLplot.PLStream.gyax.html",
    "title": "Method gyax | PLplot for .NET",
    "keywords": "Method gyax | Improve this Doc View Source gyax(out Int32, out Int32) plgyax: Get y axis parameters Declaration public void gyax(out Int32 p_digmax, out Int32 p_digits) Parameters Type Name Description Int32 p_digmax Returned value of the maximum number of digits for the y axis. If nonzero, the printed label has been switched to a floating-point representation when the number of digits exceeds this value. Int32 p_digits Returned value of the actual number of digits for the numeric labels (y axis) from the last plot. Remarks Identical to plgxax, except that arguments are flags for y axis. See the description of plgxax for more detail."
  },
  "api/PLplot.PLStream.gzax.html": {
    "href": "api/PLplot.PLStream.gzax.html",
    "title": "Method gzax | PLplot for .NET",
    "keywords": "Method gzax | Improve this Doc View Source gzax(out Int32, out Int32) plgzax: Get z axis parameters Declaration public void gzax(out Int32 p_digmax, out Int32 p_digits) Parameters Type Name Description Int32 p_digmax Returned value of the maximum number of digits for the z axis. If nonzero, the printed label has been switched to a floating-point representation when the number of digits exceeds this value. Int32 p_digits Returned value of the actual number of digits for the numeric labels (z axis) from the last plot. Remarks Identical to plgxax, except that arguments are flags for z axis. See the description of plgxax for more detail."
  },
  "api/PLplot.PLStream.hist.html": {
    "href": "api/PLplot.PLStream.hist.html",
    "title": "Method hist | PLplot for .NET",
    "keywords": "Method hist | Improve this Doc View Source hist(Double[], Double, Double, Int32, Hist) plhist: Plot a histogram from unbinned data Declaration public void hist(Double[] data, Double datmin, Double datmax, Int32 nbin, Hist opt) Parameters Type Name Description Double [] data A vector containing the values of the n data points. Double datmin Left-hand edge of lowest-valued bin. Double datmax Right-hand edge of highest-valued bin. Int32 nbin Number of (equal-sized) bins into which to divide the interval xmin to xmax. Hist opt Is a combination of several flags: opt=PL_HIST_DEFAULT: The axes are automatically rescaled to fit the histogram data, the outer bins are expanded to fill up the entire x-axis, data outside the given extremes are assigned to the outer bins and bins of zero height are simply drawn. opt=PL_HIST_NOSCALING|...: The existing axes are not rescaled to fit the histogram data, without this flag, plenv is called to set the world coordinates. opt=PL_HIST_IGNORE_OUTLIERS|...: Data outside the given extremes are not taken into account. This option should probably be combined with opt=PL_HIST_NOEXPAND|..., so as to properly present the data. opt=PL_HIST_NOEXPAND|...: The outer bins are drawn with equal size as the ones inside. opt=PL_HIST_NOEMPTY|...: Bins with zero height are not drawn (there is a gap for such bins). Remarks Plots a histogram from n data points stored in the data vector. This routine bins the data into nbin bins equally spaced between datmin and datmax, and calls plbin to draw the resulting histogram. Parameter opt allows, among other things, the histogram either to be plotted in an existing window or causes plhist to call plenv with suitable limits before plotting the histogram."
  },
  "api/PLplot.PLStream.hlsrgb.html": {
    "href": "api/PLplot.PLStream.hlsrgb.html",
    "title": "Method hlsrgb | PLplot for .NET",
    "keywords": "Method hlsrgb | Improve this Doc View Source hlsrgb(Double, Double, Double, out Double, out Double, out Double) plhlsrgb: Convert HLS color to RGB Declaration public void hlsrgb(Double h, Double l, Double s, out Double p_r, out Double p_g, out Double p_b) Parameters Type Name Description Double h Hue in degrees (0.0-360.0) on the color cylinder. Double l Lightness expressed as a fraction (0.0-1.0) of the axis of the color cylinder. Double s Saturation expressed as a fraction (0.0-1.0) of the radius of the color cylinder. Double p_r Returned value of the red intensity (0.0-1.0) of the color. Double p_g Returned value of the green intensity (0.0-1.0) of the color. Double p_b Returned value of the blue intensity (0.0-1.0) of the color. Remarks Convert HLS color coordinates to RGB."
  },
  "api/PLplot.PLStream.init.html": {
    "href": "api/PLplot.PLStream.init.html",
    "title": "Method init | PLplot for .NET",
    "keywords": "Method init | Improve this Doc View Source init() plinit: Initialize PLplot Declaration public void init() Remarks Initializing the plotting package. The program prompts for the device keyword or number of the desired output device. Hitting a RETURN in response to the prompt is the same as selecting the first device. plinit will issue no prompt if either the device was specified previously (via command line flag, the plsetopt function, or the plsdev function), or if only one device is enabled when PLplot is installed. If subpages have been specified, the output device is divided into nx by ny subpages, each of which may be used independently. If plinit is called again during a program, the previously opened file will be closed. The subroutine pladv is used to advance from one subpage to the next."
  },
  "api/PLplot.PLStream.join.html": {
    "href": "api/PLplot.PLStream.join.html",
    "title": "Method join | PLplot for .NET",
    "keywords": "Method join | Improve this Doc View Source join(Double, Double, Double, Double) pljoin: Draw a line between two points Declaration public void join(Double x1, Double y1, Double x2, Double y2) Parameters Type Name Description Double x1 x coordinate of first point. Double y1 y coordinate of first point. Double x2 x coordinate of second point. Double y2 y coordinate of second point. Remarks Joins the point (x1, y1) to (x2, y2)."
  },
  "api/PLplot.PLStream.lab.html": {
    "href": "api/PLplot.PLStream.lab.html",
    "title": "Method lab | PLplot for .NET",
    "keywords": "Method lab | Improve this Doc View Source lab(String, String, String) pllab: Simple routine to write labels Declaration public void lab(string xlabel, string ylabel, string tlabel) Parameters Type Name Description System.String xlabel A UTF-8 character string specifying the label for the x axis. System.String ylabel A UTF-8 character string specifying the label for the y axis. System.String tlabel A UTF-8 character string specifying the title of the plot. Remarks Routine for writing simple labels. Use plmtex for more complex labels."
  },
  "api/PLplot.PLStream.legend.html": {
    "href": "api/PLplot.PLStream.legend.html",
    "title": "Method legend | PLplot for .NET",
    "keywords": "Method legend | Improve this Doc View Source legend(out Double, out Double, Legend, Position, Double, Double, Double, Int32, Int32, LineStyle, Int32, Int32, LegendEntry[], Double, Double, Double, Double, Int32[], String[], Int32[], Pattern[], Double[], Double[], Int32[], LineStyle[], Double[], Int32[], Double[], Int32[], String[]) pllegend: Plot legend using discretely annotated filled boxes, lines, and/or lines of symbols Declaration public void legend(out Double p_legend_width, out Double p_legend_height, Legend opt, Position position, Double x, Double y, Double plot_width, Int32 bg_color, Int32 bb_color, LineStyle bb_style, Int32 nrow, Int32 ncolumn, LegendEntry[] opt_array, Double text_offset, Double text_scale, Double text_spacing, Double text_justification, Int32[] text_colors, String[] text, Int32[] box_colors, Pattern[] box_patterns, Double[] box_scales, Double[] box_line_widths, Int32[] line_colors, LineStyle[] line_styles, Double[] line_widths, Int32[] symbol_colors, Double[] symbol_scales, Int32[] symbol_numbers, String[] symbols) Parameters Type Name Description Double p_legend_width Returned value of the legend width in adopted coordinates. This quantity is calculated from plot_width, text_offset, ncolumn (possibly modified inside the routine depending on nlegend and nrow), and the length (calculated internally) of the longest text string. Double p_legend_height Returned value of the legend height in adopted coordinates. This quantity is calculated from text_scale, text_spacing, and nrow (possibly modified inside the routine depending on nlegend and nrow). Legend opt opt contains bits controlling the overall legend. If the PL_LEGEND_TEXT_LEFT bit is set, put the text area on the left of the legend and the plotted area on the right. Otherwise, put the text area on the right of the legend and the plotted area on the left. If the PL_LEGEND_BACKGROUND bit is set, plot a (semitransparent) background for the legend. If the PL_LEGEND_BOUNDING_BOX bit is set, plot a bounding box for the legend. If the PL_LEGEND_ROW_MAJOR bit is set and (both of the possibly internally transformed) nrow gt 1 and ncolumn gt 1, then plot the resulting array of legend entries in row-major order. Otherwise, plot the legend entries in column-major order. Position position position contains bits which control the overall position of the legend and the definition of the adopted coordinates used for positions just like what is done for the position argument for plcolorbar. However, note that the defaults for the position bits (see below) are different than the plcolorbar case. The combination of the PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, PL_POSITION_BOTTOM, PL_POSITION_INSIDE, and PL_POSITION_OUTSIDE bits specifies one of the 16 possible standard positions (the 4 corners and centers of the 4 sides for both the inside and outside cases) of the legend relative to the adopted coordinate system. The corner positions are specified by the appropriate combination of two of the PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, and PL_POSITION_BOTTOM bits while the sides are specified by a single value of one of those bits. The adopted coordinates are normalized viewport coordinates if the PL_POSITION_VIEWPORT bit is set or normalized subpage coordinates if the PL_POSITION_SUBPAGE bit is set. Default position bits: If none of PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, or PL_POSITION_BOTTOM are set, then use the combination of PL_POSITION_RIGHT and PL_POSITION_TOP. If neither of PL_POSITION_INSIDE or PL_POSITION_OUTSIDE is set, use PL_POSITION_INSIDE. If neither of PL_POSITION_VIEWPORT or PL_POSITION_SUBPAGE is set, use PL_POSITION_VIEWPORT. Double x X offset of the legend position in adopted coordinates from the specified standard position of the legend. For positive x, the direction of motion away from the standard position is inward/outward from the standard corner positions or standard left or right positions if the PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position. For the standard top or bottom positions, the direction of motion is toward positive X. Double y Y offset of the legend position in adopted coordinates from the specified standard position of the legend. For positive y, the direction of motion away from the standard position is inward/outward from the standard corner positions or standard top or bottom positions if the PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position. For the standard left or right positions, the direction of motion is toward positive Y. Double plot_width Horizontal width in adopted coordinates of the plot area (where the colored boxes, lines, and/or lines of symbols are drawn) of the legend. Int32 bg_color The cmap0 color of the background for the legend (PL_LEGEND_BACKGROUND). Int32 bb_color The cmap0 color of the bounding-box line for the legend (PL_LEGEND_BOUNDING_BOX). LineStyle bb_style The pllsty style number for the bounding-box line for the legend (PL_LEGEND_BACKGROUND). Int32 nrow The cmap0 index of the background color for the legend (PL_LEGEND_BACKGROUND). Int32 ncolumn The cmap0 index of the background color for the legend (PL_LEGEND_BACKGROUND). LegendEntry [] opt_array A vector of nlegend values of options to control each individual plotted area corresponding to a legend entry. If the PL_LEGEND_NONE bit is set, then nothing is plotted in the plotted area. If the PL_LEGEND_COLOR_BOX, PL_LEGEND_LINE, and/or PL_LEGEND_SYMBOL bits are set, the area corresponding to a legend entry is plotted with a colored box; a line; and/or a line of symbols. Double text_offset Offset of the text area from the plot area in units of character width. N.B. The total horizontal width of the legend in adopted coordinates is calculated internally from plot_width (see above), text_offset, and length (calculated internally) of the longest text string. Double text_scale Character height scale for text annotations. N.B. The total vertical height of the legend in adopted coordinates is calculated internally from nlegend (see above), text_scale, and text_spacing (see below). Double text_spacing Vertical spacing in units of the character height from one legend entry to the next. N.B. The total vertical height of the legend in adopted coordinates is calculated internally from nlegend (see above), text_scale (see above), and text_spacing. Double text_justification Justification parameter used for text justification. The most common values of text_justification are 0., 0.5, or 1. corresponding to a text that is left justified, centred, or right justified within the text area, but other values are allowed as well. Int32 [] text_colors A vector containing nlegend cmap0 text colors. String [] text A vector of nlegend UTF-8 character strings containing the legend annotations. Int32 [] box_colors A vector containing nlegend cmap0 colors for the discrete colored boxes (PL_LEGEND_COLOR_BOX). Pattern [] box_patterns A vector containing nlegend patterns (plpsty indices) for the discrete colored boxes (PL_LEGEND_COLOR_BOX). Double [] box_scales A vector containing nlegend scales (units of fraction of character height) for the height of the discrete colored boxes (PL_LEGEND_COLOR_BOX). Double [] box_line_widths A vector containing nlegend line widths for the patterns specified by box_patterns (PL_LEGEND_COLOR_BOX). Int32 [] line_colors A vector containing nlegend cmap0 line colors (PL_LEGEND_LINE). LineStyle [] line_styles A vector containing nlegend line styles (plsty indices) (PL_LEGEND_LINE). Double [] line_widths A vector containing nlegend line widths (PL_LEGEND_LINE). Int32 [] symbol_colors A vector containing nlegend cmap0 symbol colors (PL_LEGEND_SYMBOL). Double [] symbol_scales A vector containing nlegend scale values for the symbol height (PL_LEGEND_SYMBOL). Int32 [] symbol_numbers A vector containing nlegend numbers of symbols to be drawn across the width of the plotted area (PL_LEGEND_SYMBOL). String [] symbols A vector of nlegend UTF-8 character strings containing the legend symbols. (PL_LEGEND_SYMBOL). Remarks Routine for creating a discrete plot legend with a plotted filled box, line, and/or line of symbols for each annotated legend entry. (See plcolorbar for similar functionality for creating continuous color bars.) The arguments of pllegend provide control over the location and size of the legend as well as the location and characteristics of the elements (most of which are optional) within that legend. The resulting legend is clipped at the boundaries of the current subpage. (N.B. the adopted coordinate system used for some of the parameters is defined in the documentation of the position parameter.)"
  },
  "api/PLplot.PLStream.colorbar.html": {
    "href": "api/PLplot.PLStream.colorbar.html",
    "title": "Method colorbar | PLplot for .NET",
    "keywords": "Method colorbar | Improve this Doc View Source colorbar(out Double, out Double, Colorbar, Position, Double, Double, Double, Double, Int32, Int32, Int32, Double, Double, Int32, Double, ColorbarLabel[], String[], String[], Double[], Int32[], Double[,]) plcolorbar: Plot color bar for image, shade or gradient plots Declaration public void colorbar(out Double p_colorbar_width, out Double p_colorbar_height, Colorbar opt, Position position, Double x, Double y, Double x_length, Double y_length, Int32 bg_color, Int32 bb_color, Int32 bb_style, Double low_cap_color, Double high_cap_color, Int32 cont_color, Double cont_width, ColorbarLabel[] label_opts, String[] labels, String[] axis_opts, Double[] ticks, Int32[] sub_ticks, Double[, ] values) Parameters Type Name Description Double p_colorbar_width Returned value of the labelled and decorated color bar width in adopted coordinates. Double p_colorbar_height Returned value of the labelled and decorated color bar height in adopted coordinates. Colorbar opt opt contains bits controlling the overall color bar. The orientation (direction of the maximum value) of the color bar is specified with PL_ORIENT_RIGHT, PL_ORIENT_TOP, PL_ORIENT_LEFT, or PL_ORIENT_BOTTOM. If none of these bits are specified, the default orientation is toward the top if the colorbar is placed on the left or right of the viewport or toward the right if the colorbar is placed on the top or bottom of the viewport. If the PL_COLORBAR_BACKGROUND bit is set, plot a (semitransparent) background for the color bar. If the PL_COLORBAR_BOUNDING_BOX bit is set, plot a bounding box for the color bar. The type of color bar must be specified with one of PL_COLORBAR_IMAGE, PL_COLORBAR_SHADE, or PL_COLORBAR_GRADIENT. If more than one of those bits is set only the first one in the above list is honored. The position of the (optional) label/title can be specified with PL_LABEL_RIGHT, PL_LABEL_TOP, PL_LABEL_LEFT, or PL_LABEL_BOTTOM. If no label position bit is set then no label will be drawn. If more than one of this list of bits is specified, only the first one on the list is honored. End-caps for the color bar can added with PL_COLORBAR_CAP_LOW and PL_COLORBAR_CAP_HIGH. If a particular color bar cap option is not specified then no cap will be drawn for that end. As a special case for PL_COLORBAR_SHADE, the option PL_COLORBAR_SHADE_LABEL can be specified. If this option is provided then any tick marks and tick labels will be placed at the breaks between shaded segments. TODO: This should be expanded to support custom placement of tick marks and tick labels at custom value locations for any color bar type. Position position position contains bits which control the overall position of the color bar and the definition of the adopted coordinates used for positions just like what is done for the position argument for pllegend. However, note that the defaults for the position bits (see below) are different than the pllegend case. The combination of the PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, PL_POSITION_BOTTOM, PL_POSITION_INSIDE, and PL_POSITION_OUTSIDE bits specifies one of the 16 possible standard positions (the 4 corners and centers of the 4 sides for both the inside and outside cases) of the color bar relative to the adopted coordinate system. The corner positions are specified by the appropriate combination of two of the PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, and PL_POSITION_BOTTOM bits while the sides are specified by a single value of one of those bits. The adopted coordinates are normalized viewport coordinates if the PL_POSITION_VIEWPORT bit is set or normalized subpage coordinates if the PL_POSITION_SUBPAGE bit is set. Default position bits: If none of PL_POSITION_LEFT, PL_POSITION_RIGHT, PL_POSITION_TOP, or PL_POSITION_BOTTOM are set, then use PL_POSITION_RIGHT. If neither of PL_POSITION_INSIDE or PL_POSITION_OUTSIDE is set, use PL_POSITION_OUTSIDE. If neither of PL_POSITION_VIEWPORT or PL_POSITION_SUBPAGE is set, use PL_POSITION_VIEWPORT. Double x X offset of the color bar position in adopted coordinates from the specified standard position of the color bar. For positive x, the direction of motion away from the standard position is inward/outward from the standard corner positions or standard left or right positions if the PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position. For the standard top or bottom positions, the direction of motion is toward positive X. Double y Y offset of the color bar position in adopted coordinates from the specified standard position of the color bar. For positive y, the direction of motion away from the standard position is inward/outward from the standard corner positions or standard top or bottom positions if the PL_POSITION_INSIDE/PL_POSITION_OUTSIDE bit is set in position. For the standard left or right positions, the direction of motion is toward positive Y. Double x_length Length of the body of the color bar in the X direction in adopted coordinates. Double y_length Length of the body of the color bar in the Y direction in adopted coordinates. Int32 bg_color The cmap0 color of the background for the color bar (PL_COLORBAR_BACKGROUND). Int32 bb_color The cmap0 color of the bounding-box line for the color bar (PL_COLORBAR_BOUNDING_BOX). Int32 bb_style The pllsty style number for the bounding-box line for the color bar (PL_COLORBAR_BACKGROUND). Double low_cap_color The cmap1 color of the low-end color bar cap, if it is drawn (PL_COLORBAR_CAP_LOW). Double high_cap_color The cmap1 color of the high-end color bar cap, if it is drawn (PL_COLORBAR_CAP_HIGH). Int32 cont_color The cmap0 contour color for PL_COLORBAR_SHADE plots. This is passed directly to plshades, so it will be interpreted according to the design of plshades. Double cont_width Contour width for PL_COLORBAR_SHADE plots. This is passed directly to plshades, so it will be interpreted according to the design of plshades. ColorbarLabel [] label_opts A vector of options for each of n_labels labels. String [] labels A vector of n_labels UTF-8 character strings containing the labels for the color bar. Ignored if no label position is specified with one of the PL_COLORBAR_LABEL_RIGHT, PL_COLORBAR_LABEL_TOP, PL_COLORBAR_LABEL_LEFT, or PL_COLORBAR_LABEL_BOTTOM bits in the corresponding label_opts field. String [] axis_opts A vector of n_axes ascii character strings containing options (interpreted as for plbox) for the color bar's axis definitions. Double [] ticks A vector of n_axes values of the spacing of the major tick marks (interpreted as for plbox) for the color bar's axis definitions. Int32 [] sub_ticks A vector of n_axes values of the number of subticks (interpreted as for plbox) for the color bar's axis definitions. Double [,] values A matrix containing the numeric values for the data range represented by the color bar. For a row index of i_axis (where 0 lt i_axis lt n_axes), the number of elements in the row is specified by n_values[i_axis]. For PL_COLORBAR_IMAGE and PL_COLORBAR_GRADIENT the number of elements is 2, and the corresponding row elements of the values matrix are the minimum and maximum value represented by the colorbar. For PL_COLORBAR_SHADE, the number and values of the elements of a row of the values matrix is interpreted the same as the nlevel and clevel arguments of plshades. Remarks Routine for creating a continuous color bar for image, shade, or gradient plots. (See pllegend for similar functionality for creating legends with discrete elements). The arguments of plcolorbar provide control over the location and size of the color bar as well as the location and characteristics of the elements (most of which are optional) within that color bar. The resulting color bar is clipped at the boundaries of the current subpage. (N.B. the adopted coordinate system used for some of the parameters is defined in the documentation of the position parameter.)"
  },
  "api/PLplot.PLStream.lightsource.html": {
    "href": "api/PLplot.PLStream.lightsource.html",
    "title": "Method lightsource | PLplot for .NET",
    "keywords": "Method lightsource | Improve this Doc View Source lightsource(Double, Double, Double) pllightsource: Sets the 3D position of the light source Declaration public void lightsource(Double x, Double y, Double z) Parameters Type Name Description Double x X-coordinate of the light source. Double y Y-coordinate of the light source. Double z Z-coordinate of the light source. Remarks Sets the 3D position of the light source for use with plsurf3d and plsurf3dl"
  },
  "api/PLplot.PLStream.line.html": {
    "href": "api/PLplot.PLStream.line.html",
    "title": "Method line | PLplot for .NET",
    "keywords": "Method line | Improve this Doc View Source line(Double[], Double[]) plline: Draw a line Declaration public void line(Double[] x, Double[] y) Parameters Type Name Description Double [] x A vector containing the x coordinates of points. Double [] y A vector containing the y coordinates of points. Remarks Draws line defined by n points in x and y."
  },
  "api/PLplot.PLStream.line3.html": {
    "href": "api/PLplot.PLStream.line3.html",
    "title": "Method line3 | PLplot for .NET",
    "keywords": "Method line3 | Improve this Doc View Source line3(Double[], Double[], Double[]) plline3: Draw a line in 3 space Declaration public void line3(Double[] x, Double[] y, Double[] z) Parameters Type Name Description Double [] x A vector containing the x coordinates of points. Double [] y A vector containing the y coordinates of points. Double [] z A vector containing the z coordinates of points. Remarks Draws line in 3 space defined by n points in x, y, and z. You must first set up the viewport, the 2d viewing window (in world coordinates), and the 3d normalized coordinate box. See x18c.c for more info."
  },
  "api/PLplot.PLStream.lsty.html": {
    "href": "api/PLplot.PLStream.lsty.html",
    "title": "Method lsty | PLplot for .NET",
    "keywords": "Method lsty | Improve this Doc View Source lsty(LineStyle) pllsty: Select line style Declaration public void lsty(LineStyle lin) Parameters Type Name Description LineStyle lin Integer value between 1 and 8. Line style 1 is a continuous line, line style 2 is a line with short dashes and gaps, line style 3 is a line with long dashes and gaps, line style 4 has long dashes and short gaps and so on. Remarks This sets the line style according to one of eight predefined patterns (also see plstyl)."
  },
  "api/PLplot.PLStream.map.html": {
    "href": "api/PLplot.PLStream.map.html",
    "title": "Method map | PLplot for .NET",
    "keywords": "Method map | Improve this Doc View Source map(MapFunc, String, Double, Double, Double, Double) plmap: Plot continental outline or shapefile data in world coordinates Declaration public void map(MapFunc mapform, string name, Double minx, Double maxx, Double miny, Double maxy) Parameters Type Name Description MapFunc mapform A user supplied function to transform the original map data coordinates to a new coordinate system. The PLplot-supplied map data is provided as latitudes and longitudes; other Shapefile data may be provided in other coordinate systems as can be found in their .prj plain text files. For example, by using this transform we can change from a longitude, latitude coordinate to a polar stereographic projection. Initially, x[0]..[n-1] are the original x coordinates (longitudes for the PLplot-supplied data) and y[0]..y[n-1] are the corresponding y coordinates (latitudes for the PLplot supplied data). After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the type of map plotted. This is either one of the PLplot built-in maps or the file name of a set of Shapefile files without the file extensions. For the PLplot built-in maps the possible values are: \"globe\" -- continental outlines \"usa\" -- USA and state boundaries \"cglobe\" -- continental outlines and countries \"usaglobe\" -- USA, state boundaries and continental outlines Double minx The minimum x value of map elements to be drawn. For the built in maps this is a measure of longitude. For Shapefiles the units must match the projection. The value of minx must be less than the value of maxx. Specifying a useful limit for these limits provides a useful optimization for complex or detailed maps. Double maxx The maximum x value of map elements to be drawn Double miny The minimum y value of map elements to be drawn. For the built in maps this is a measure of latitude. For Shapefiles the units must match the projection. The value of miny must be less than the value of maxy. Double maxy The maximum y value of map elements to be drawn. Remarks Plots continental outlines or shapefile data in world coordinates. A demonstration of how to use this function to create different projections can be found in examples/c/x19c. PLplot is provided with basic coastal outlines and USA state borders. These can be used irrespective of whether Shapefile support is built into PLplot. With Shapefile support this function can also be used with user Shapefiles, in which case it will plot the entire contents of a Shapefile joining each point of each Shapefile element with a line. Shapefiles have become a popular standard for geographical data and data in this format can be easily found from a number of online sources. Shapefile data is actually provided as three or more files with the same filename, but different extensions. The .shp and .shx files are required for plotting Shapefile data with PLplot."
  },
  "api/PLplot.PLStream.mapline.html": {
    "href": "api/PLplot.PLStream.mapline.html",
    "title": "Method mapline | PLplot for .NET",
    "keywords": "Method mapline | Improve this Doc View Source mapline(MapFunc, String, Double, Double, Double, Double, Int32[]) plmapline: Plot all or a subset of Shapefile data using lines in world coordinates Declaration public void mapline(MapFunc mapform, string name, Double minx, Double maxx, Double miny, Double maxy, Int32[] plotentries) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinates given in the shapefile into a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the file name of a set of Shapefile files without the file extension. Double minx The minimum x value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example longitude or distance. The value of minx must be less than the value of maxx. Double maxx The maximum x value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Double miny The minimum y value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example latitude or distance. The value of miny must be less than the value of maxy. Double maxy The maximum y value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Int32 [] plotentries A vector containing the zero-based indices of the Shapefile elements which will be drawn. Setting plotentries to NULL will plot all elements of the Shapefile. Remarks Plot all or a subset of Shapefile data using lines in world coordinates. Our 19th standard example demonstrates how to use this function. This function plots data from a Shapefile using lines as in plmap, however it also has the option of also only drawing specified elements from the Shapefile. The vector of indices of the required elements are passed as a function argument. The Shapefile data should include a metadata file (extension.dbf) listing all items within the Shapefile. This file can be opened by most popular spreadsheet programs and can be used to decide which indices to pass to this function."
  },
  "api/PLplot.PLStream.mapstring.html": {
    "href": "api/PLplot.PLStream.mapstring.html",
    "title": "Method mapstring | PLplot for .NET",
    "keywords": "Method mapstring | Improve this Doc View Source mapstring(MapFunc, String, String, Double, Double, Double, Double, Int32[]) plmapstring: Plot all or a subset of Shapefile data using strings or points in world coordinates Declaration public void mapstring(MapFunc mapform, string name, string str, Double minx, Double maxx, Double miny, Double maxy, Int32[] plotentries) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinates given in the shapefile into a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the file name of a set of Shapefile files without the file extension. System.String str Double minx The minimum x value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example longitude or distance. The value of minx must be less than the value of maxx. Double maxx The maximum x value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Double miny The minimum y value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example latitude or distance. The value of miny must be less than the value of maxy. Double maxy The maximum y value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Int32 [] plotentries A vector containing the zero-based indices of the Shapefile elements which will be drawn. Setting plotentries to NULL will plot all elements of the Shapefile. Remarks As per plmapline, however the items are plotted as strings or points in the same way as plstring."
  },
  "api/PLplot.PLStream.maptex.html": {
    "href": "api/PLplot.PLStream.maptex.html",
    "title": "Method maptex | PLplot for .NET",
    "keywords": "Method maptex | Improve this Doc View Source maptex(MapFunc, String, Double, Double, Double, String, Double, Double, Double, Double, Int32) plmaptex: Draw text at points defined by Shapefile data in world coordinates Declaration public void maptex(MapFunc mapform, string name, Double dx, Double dy, Double just, string text, Double minx, Double maxx, Double miny, Double maxy, Int32 plotentry) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinates given in the shapefile into a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the file name of a set of Shapefile files without the file extension. Double dx Used to define the slope of the texts which is dy/dx. Double dy Used to define the slope of the texts which is dy/dx. Double just Set the justification of the text. The value given will be the fraction of the distance along the string that sits at the given point. 0.0 gives left aligned text, 0.5 gives centralized text and 1.0 gives right aligned text. System.String text A UTF-8 character string to be drawn. Double minx The minimum x value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example longitude or distance. The value of minx must be less than the value of maxx. Double maxx The maximum x value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Double miny The minimum y value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example latitude or distance. The value of miny must be less than the value of maxy. Double maxy The maximum y value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Int32 plotentry An integer indicating which text string of the Shapefile (zero indexed) will be drawn. Remarks As per plmapline, however the items are plotted as text in the same way as plptex."
  },
  "api/PLplot.PLStream.mapfill.html": {
    "href": "api/PLplot.PLStream.mapfill.html",
    "title": "Method mapfill | PLplot for .NET",
    "keywords": "Method mapfill | Improve this Doc View Source mapfill(MapFunc, String, Double, Double, Double, Double, Int32[]) plmapfill: Plot all or a subset of Shapefile data, filling the polygons Declaration public void mapfill(MapFunc mapform, string name, Double minx, Double maxx, Double miny, Double maxy, Int32[] plotentries) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinates given in the shapefile into a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. System.String name An ascii character string specifying the file name of a set of Shapefile files without the file extension. Double minx The minimum x value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example longitude or distance. The value of minx must be less than the value of maxx. Double maxx The maximum x value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Double miny The minimum y value to be plotted. This must be in the same units as used by the Shapefile. You could use a very large negative number to plot everything, but you can improve performance by limiting the area drawn. The units must match those of the Shapefile projection, which may be for example latitude or distance. The value of miny must be less than the value of maxy. Double maxy The maximum y value to be plotted. You could use a very large number to plot everything, but you can improve performance by limiting the area drawn. Int32 [] plotentries A vector containing the zero-based indices of the Shapefile elements which will be drawn. Setting plotentries to NULL will plot all elements of the Shapefile. Remarks As per plmapline, however the items are filled in the same way as plfill."
  },
  "api/PLplot.PLStream.meridians.html": {
    "href": "api/PLplot.PLStream.meridians.html",
    "title": "Method meridians | PLplot for .NET",
    "keywords": "Method meridians | Improve this Doc View Source meridians(MapFunc, Double, Double, Double, Double, Double, Double) plmeridians: Plot latitude and longitude lines Declaration public void meridians(MapFunc mapform, Double dlong, Double dlat, Double minlong, Double maxlong, Double minlat, Double maxlat) Parameters Type Name Description MapFunc mapform A user supplied function to transform the coordinate longitudes and latitudes to a plot coordinate system. By using this transform, we can change from a longitude, latitude coordinate to a polar stereographic project, for example. Initially, x[0]..[n-1] are the longitudes and y[0]..y[n-1] are the corresponding latitudes. After the call to mapform(), x[] and y[] should be replaced by the corresponding plot coordinates. If no transform is desired, mapform can be replaced by NULL. Double dlong The interval in degrees at which the longitude lines are to be plotted. Double dlat The interval in degrees at which the latitude lines are to be plotted. Double minlong The value of the longitude on the left side of the plot. The value of minlong must be less than the value of maxlong, and the quantity maxlong-minlong must be less than or equal to 360. Double maxlong The value of the longitude on the right side of the plot. Double minlat The minimum latitude to be plotted on the background. One can always use -90.0 as the boundary outside the plot window will be automatically eliminated. However, the program will be faster if one can reduce the size of the background plotted. Double maxlat The maximum latitudes to be plotted on the background. One can always use 90.0 as the boundary outside the plot window will be automatically eliminated. Remarks Displays latitude and longitude on the current plot. The lines are plotted in the current color and line style."
  },
  "api/PLplot.PLStream.mesh.html": {
    "href": "api/PLplot.PLStream.mesh.html",
    "title": "Method mesh | PLplot for .NET",
    "keywords": "Method mesh | Improve this Doc View Source mesh(Double[], Double[], Double[,], Mesh) plmesh: Plot surface mesh Declaration public void mesh(Double[] x, Double[] y, Double[, ] z, Mesh opt) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. Mesh opt Determines the way in which the surface is represented: opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. Remarks Plots a surface mesh within the environment set up by plw3d. The surface is defined by the matrix z[nx][ny] , the point z[i][j] being the value of the function at (x[i], y[j]). Note that the points in vectors x and y do not need to be equally spaced, but must be stored in ascending order. The parameter opt controls the way in which the surface is displayed. For further details see ."
  },
  "api/PLplot.PLStream.meshc.html": {
    "href": "api/PLplot.PLStream.meshc.html",
    "title": "Method meshc | PLplot for .NET",
    "keywords": "Method meshc | Improve this Doc View Source meshc(Double[], Double[], Double[,], MeshContour, Double[]) plmeshc: Magnitude colored plot surface mesh with contour Declaration public void meshc(Double[] x, Double[] y, Double[, ] z, MeshContour opt, Double[] clevel) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. MeshContour opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. DRAW_LINEXY + MAG_COLOR opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. opt=MAG_COLOR : Each line in the mesh is colored according to the z value being plotted. The color is used from the current cmap1. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. Double [] clevel A vector containing the contour levels. Remarks A more powerful form of plmesh: the surface mesh can be colored accordingly to the current z value being plotted, a contour plot can be drawn at the base XY plane, and a curtain can be drawn between the plotted function border and the base XY plane."
  },
  "api/PLplot.PLStream.mtex.html": {
    "href": "api/PLplot.PLStream.mtex.html",
    "title": "Method mtex | PLplot for .NET",
    "keywords": "Method mtex | Improve this Doc View Source mtex(String, Double, Double, Double, String) plmtex: Write text relative to viewport boundaries Declaration public void mtex(string side, Double disp, Double pos, Double just, string text) Parameters Type Name Description System.String side One string from Side . Double disp Position of the reference point of string, measured outwards from the specified viewport edge in units of the current character height. Use negative disp to write within the viewport. Double pos Position of the reference point of string along the specified edge, expressed as a fraction of the length of the edge. Double just Specifies the position of the string relative to its reference point. If just=0. , the reference point is at the left and if just=1. , it is at the right of the string. Other values of just give intermediate justifications. System.String text A UTF-8 character string to be written out. Remarks Writes text at a specified position relative to the viewport boundaries. Text may be written inside or outside the viewport, but is clipped at the subpage boundaries. The reference point of a string lies along a line passing through the string at half the height of a capital letter. The position of the reference point along this line is determined by just, and the position of the reference point relative to the viewport is set by disp and pos."
  },
  "api/PLplot.PLStream.mtex3.html": {
    "href": "api/PLplot.PLStream.mtex3.html",
    "title": "Method mtex3 | PLplot for .NET",
    "keywords": "Method mtex3 | Improve this Doc View Source mtex3(String, Double, Double, Double, String) plmtex3: Write text relative to viewport boundaries in 3D plots Declaration public void mtex3(string side, Double disp, Double pos, Double just, string text) Parameters Type Name Description System.String side One or more strings concatenated from Side3 . Double disp Position of the reference point of string, measured outwards from the specified viewport edge in units of the current character height. Use negative disp to write within the viewport. Double pos Position of the reference point of string along the specified edge, expressed as a fraction of the length of the edge. Double just Specifies the position of the string relative to its reference point. If just=0. , the reference point is at the left and if just=1. , it is at the right of the string. Other values of just give intermediate justifications. System.String text A UTF-8 character string to be written out. Remarks Writes text at a specified position relative to the viewport boundaries. Text may be written inside or outside the viewport, but is clipped at the subpage boundaries. The reference point of a string lies along a line passing through the string at half the height of a capital letter. The position of the reference point along this line is determined by just, and the position of the reference point relative to the viewport is set by disp and pos."
  },
  "api/PLplot.PLStream.plot3d.html": {
    "href": "api/PLplot.PLStream.plot3d.html",
    "title": "Method plot3d | PLplot for .NET",
    "keywords": "Method plot3d | Improve this Doc View Source plot3d(Double[], Double[], Double[,], Mesh, Boolean) plot3d: Plot 3-d surface plot Declaration public void plot3d(Double[] x, Double[] y, Double[, ] z, Mesh opt, Boolean side) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. Mesh opt Determines the way in which the surface is represented: opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. Boolean side Flag to indicate whether or not ``sides'' should be draw on the figure. If side is true sides are drawn, otherwise no sides are drawn. Remarks Plots a three-dimensional surface plot within the environment set up by plw3d. The surface is defined by the matrix z[nx][ny] , the point z[i][j] being the value of the function at (x[i],y[j]). Note that the points in vectors x and y do not need to be equally spaced, but must be stored in ascending order. The parameter opt controls the way in which the surface is displayed. For further details see . The only difference between plmesh and plot3d is that plmesh draws the bottom side of the surface, while plot3d only draws the surface as viewed from the top."
  },
  "api/PLplot.PLStream.plot3dc.html": {
    "href": "api/PLplot.PLStream.plot3dc.html",
    "title": "Method plot3dc | PLplot for .NET",
    "keywords": "Method plot3dc | Improve this Doc View Source plot3dc(Double[], Double[], Double[,], MeshContour, Double[]) plot3dc: Magnitude colored plot surface with contour Declaration public void plot3dc(Double[] x, Double[] y, Double[, ] z, MeshContour opt, Double[] clevel) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. MeshContour opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. DRAW_LINEXY + MAG_COLOR opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. opt=MAG_COLOR : Each line in the mesh is colored according to the z value being plotted. The color is used from the current cmap1. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. Double [] clevel A vector containing the contour levels. Remarks Aside from dropping the side functionality this is a more powerful form of plot3d: the surface mesh can be colored accordingly to the current z value being plotted, a contour plot can be drawn at the base XY plane, and a curtain can be drawn between the plotted function border and the base XY plane. The arguments are identical to those of plmeshc. The only difference between plmeshc and plot3dc is that plmeshc draws the bottom side of the surface, while plot3dc only draws the surface as viewed from the top."
  },
  "api/PLplot.PLStream.plot3dcl.html": {
    "href": "api/PLplot.PLStream.plot3dcl.html",
    "title": "Method plot3dcl | PLplot for .NET",
    "keywords": "Method plot3dcl | Improve this Doc View Source plot3dcl(Double[], Double[], Double[,], MeshContour, Double[], Int32, Int32[], Int32[]) plot3dcl: Magnitude colored plot surface with contour for z[x][y] with y index limits Declaration public void plot3dcl(Double[] x, Double[] y, Double[, ] z, MeshContour opt, Double[] clevel, Int32 indexxmin, Int32[] indexymin, Int32[] indexymax) Parameters Type Name Description Double [] x A vector containing the x coordinates at which the function is evaluated. Double [] y A vector containing the y coordinates at which the function is evaluated. Double [,] z A matrix containing function values to plot. Should have dimensions of nx by ny. MeshContour opt Determines the way in which the surface is represented. To specify more than one option just add the options, e.g. DRAW_LINEXY + MAG_COLOR opt=DRAW_LINEX : Lines are drawn showing z as a function of x for each value of y[j] . opt=DRAW_LINEY : Lines are drawn showing z as a function of y for each value of x[i] . opt=DRAW_LINEXY : Network of lines is drawn connecting points at which function is defined. opt=MAG_COLOR : Each line in the mesh is colored according to the z value being plotted. The color is used from the current cmap1. opt=BASE_CONT : A contour plot is drawn at the base XY plane using parameters nlevel and clevel. opt=DRAW_SIDES : draws a curtain between the base XY plane and the borders of the plotted function. Double [] clevel A vector containing the contour levels. Int32 indexxmin The index value (which must be ≥ 0) that corresponds to the first x index where z is defined. Int32 [] indexymin A vector containing y index values which all must be ≥ 0. These values are the first y index where z is defined for a particular x index in the range from indexxmin to indexxmax - 1. The dimension of indexymin is indexxmax. Int32 [] indexymax A vector containing y index values which all must be ≤ ny. These values correspond (by convention) to one more than the last y index where z is defined for a particular x index in the range from indexxmin to indexxmax - 1. The dimension of indexymax is indexxmax. Remarks When the implementation is completed this variant of plot3dc (see that function's documentation for more details) should be suitable for the case where the area of the x, y coordinate grid where z is defined can be non-rectangular. The implementation is incomplete so the last 4 parameters of plot3dcl; indexxmin, indexxmax, indexymin, and indexymax; are currently ignored and the functionality is otherwise identical to that of plot3dc."
  },
  "api/PLplot.PLStream.pat.html": {
    "href": "api/PLplot.PLStream.pat.html",
    "title": "Method pat | PLplot for .NET",
    "keywords": "Method pat | Improve this Doc View Source pat(Int32[], Int32[]) plpat: Set area line fill pattern Declaration public void pat(Int32[] inc, Int32[] del) Parameters Type Name Description Int32 [] inc A vector containing nlin values of the inclination in tenths of a degree. (Should be between -900 and 900). Int32 [] del A vector containing nlin values of the spacing in micrometers between the lines making up the pattern. Remarks Sets the area line fill pattern to be used, e.g., for calls to plfill. The pattern consists of 1 or 2 sets of parallel lines with specified inclinations and spacings. The arguments to this routine are the number of sets to use (1 or 2) followed by two vectors (with 1 or 2 elements) specifying the inclinations in tenths of a degree and the spacing in micrometers. (See also plpsty)"
  },
  "api/PLplot.PLStream.path.html": {
    "href": "api/PLplot.PLStream.path.html",
    "title": "Method path | PLplot for .NET",
    "keywords": "Method path | Improve this Doc View Source path(Int32, Double, Double, Double, Double) plpath: Draw a line between two points, accounting for coordinate transforms Declaration public void path(Int32 n, Double x1, Double y1, Double x2, Double y2) Parameters Type Name Description Int32 n number of points to use to approximate the path. Double x1 x coordinate of first point. Double y1 y coordinate of first point. Double x2 x coordinate of second point. Double y2 y coordinate of second point. Remarks Joins the point (x1, y1) to (x2, y2) . If a global coordinate transform is defined then the line is broken in to n segments to approximate the path. If no transform is defined then this simply acts like a call to pljoin."
  },
  "api/PLplot.PLStream.poin.html": {
    "href": "api/PLplot.PLStream.poin.html",
    "title": "Method poin | PLplot for .NET",
    "keywords": "Method poin | Improve this Doc View Source poin(Double[], Double[], Char) plpoin: Plot a glyph at the specified points Declaration public void poin(Double[] x, Double[] y, char code) Parameters Type Name Description Double [] x A vector containing the x coordinates of points. Double [] y A vector containing the y coordinates of points. System.Char code Hershey symbol code (in \"ascii-indexed\" form with -1 lt= code lt= 127) corresponding to a glyph to be plotted at each of the n points. Remarks Plot a glyph at the specified points. (This function is largely superseded by plstring which gives access to many[!] more glyphs.) code=-1 means try to just draw a point. Right now it's just a move and a draw at the same place. Not ideal, since a sufficiently intelligent output device may optimize it away, or there may be faster ways of doing it. This is OK for now, though, and offers a 4X speedup over drawing a Hershey font \"point\" (which is actually diamond shaped and therefore takes 4 strokes to draw). If 0 lt code lt 32, then a useful (but small subset) of Hershey symbols is plotted. If 32 lt= code lt= 127 the corresponding printable ASCII character is plotted."
  },
  "api/PLplot.PLStream.poin3.html": {
    "href": "api/PLplot.PLStream.poin3.html",
    "title": "Method poin3 | PLplot for .NET",
    "keywords": "Method poin3 | Improve this Doc View Source poin3(Double[], Double[], Double[], Char) plpoin3: Plot a glyph at the specified 3D points Declaration public void poin3(Double[] x, Double[] y, Double[] z, char code) Parameters Type Name Description Double [] x A vector containing the x coordinates of points. Double [] y A vector containing the y coordinates of points. Double [] z A vector containing the z coordinates of points. System.Char code Hershey symbol code (in \"ascii-indexed\" form with -1 lt= code lt= 127) corresponding to a glyph to be plotted at each of the n points. Remarks Plot a glyph at the specified 3D points. (This function is largely superseded by plstring3 which gives access to many[!] more glyphs.) Set up the call to this function similar to what is done for plline3. code=-1 means try to just draw a point. Right now it's just a move and a draw at the same place. Not ideal, since a sufficiently intelligent output device may optimize it away, or there may be faster ways of doing it. This is OK for now, though, and offers a 4X speedup over drawing a Hershey font \"point\" (which is actually diamond shaped and therefore takes 4 strokes to draw). If 0 lt code lt 32, then a useful (but small subset) of Hershey symbols is plotted. If 32 lt= code lt= 127 the corresponding printable ASCII character is plotted."
  },
  "api/PLplot.PLStream.poly3.html": {
    "href": "api/PLplot.PLStream.poly3.html",
    "title": "Method poly3 | PLplot for .NET",
    "keywords": "Method poly3 | Improve this Doc View Source poly3(Double[], Double[], Double[], Boolean[], Boolean) plpoly3: Draw a polygon in 3 space Declaration public void poly3(Double[] x, Double[] y, Double[] z, Boolean[] draw, Boolean ifcc) Parameters Type Name Description Double [] x A vector containing n x coordinates of points. Double [] y A vector containing n y coordinates of points. Double [] z A vector containing n z coordinates of points. Boolean [] draw A vector containing n-1 Boolean values which control drawing the segments of the polygon. If draw[i] is true, then the polygon segment from index [i] to [i+1] is drawn, otherwise, not. Boolean ifcc If ifcc is true the directionality of the polygon is determined by assuming the points are laid out in a counter-clockwise order. Otherwise, the directionality of the polygon is determined by assuming the points are laid out in a clockwise order. Remarks Draws a polygon in 3 space defined by n points in x, y, and z. Setup like plline3, but differs from that function in that plpoly3 attempts to determine if the polygon is viewable depending on the order of the points within the vector and the value of ifcc. If the back of polygon is facing the viewer, then it isn't drawn. If this isn't what you want, then use plline3 instead."
  },
  "api/PLplot.PLStream.prec.html": {
    "href": "api/PLplot.PLStream.prec.html",
    "title": "Method prec | PLplot for .NET",
    "keywords": "Method prec | Improve this Doc View Source prec(Int32, Int32) plprec: Set precision in numeric labels Declaration public void prec(Int32 setp, Int32 prec) Parameters Type Name Description Int32 setp If setp is equal to 0 then PLplot automatically determines the number of places to use after the decimal point in numeric labels (like those used to label axes). If setp is 1 then prec sets the number of places. Int32 prec The number of characters to draw after the decimal point in numeric labels. Remarks Sets the number of places after the decimal point in numeric labels."
  },
  "api/PLplot.PLStream.psty.html": {
    "href": "api/PLplot.PLStream.psty.html",
    "title": "Method psty | PLplot for .NET",
    "keywords": "Method psty | Improve this Doc View Source psty(Pattern) plpsty: Select area fill pattern Declaration public void psty(Pattern patt) Parameters Type Name Description Pattern patt The desired pattern index. If patt is zero or less, then a solid fill is (normally, see qualifiers above) used. For patt in the range from 1 to 8 and assuming the driver has not supplied line fill capability itself (most deliberately do not so that line fill patterns look identical for those drivers), the patterns consist of (1) horizontal lines, (2) vertical lines, (3) lines at 45 degrees, (4) lines at -45 degrees, (5) lines at 30 degrees, (6) lines at -30 degrees, (7) both vertical and horizontal lines, and (8) lines at both 45 degrees and -45 degrees. Remarks If patt is zero or less use either a hardware solid fill if the drivers have that capability (virtually all do) or fall back to a software emulation of a solid fill using the eighth area line fill pattern. If 0 lt patt le 8, then select one of eight predefined area line fill patterns to use (see plpat if you desire other patterns)."
  },
  "api/PLplot.PLStream.ptex.html": {
    "href": "api/PLplot.PLStream.ptex.html",
    "title": "Method ptex | PLplot for .NET",
    "keywords": "Method ptex | Improve this Doc View Source ptex(Double, Double, Double, Double, Double, String) plptex: Write text inside the viewport Declaration public void ptex(Double x, Double y, Double dx, Double dy, Double just, string text) Parameters Type Name Description Double x x coordinate of reference point of string. Double y y coordinate of reference point of string. Double dx Together with dy, this specifies the inclination of the string. The baseline of the string is parallel to a line joining (x, y) to (x+dx, y+dy) . Double dy Together with dx, this specifies the inclination of the string. Double just Specifies the position of the string relative to its reference point. If just=0. , the reference point is at the left and if just=1. , it is at the right of the string. Other values of just give intermediate justifications. System.String text A UTF-8 character string to be written out. Remarks Writes text at a specified position and inclination within the viewport. Text is clipped at the viewport boundaries. The reference point of a string lies along a line passing through the string at half the height of a capital letter. The position of the reference point along this line is determined by just, the reference point is placed at world coordinates (x, y) within the viewport. The inclination of the string is specified in terms of differences of world coordinates making it easy to write text parallel to a line in a graph."
  },
  "api/PLplot.PLStream.ptex3.html": {
    "href": "api/PLplot.PLStream.ptex3.html",
    "title": "Method ptex3 | PLplot for .NET",
    "keywords": "Method ptex3 | Improve this Doc View Source ptex3(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, String) plptex3: Write text inside the viewport of a 3D plot Declaration public void ptex3(Double wx, Double wy, Double wz, Double dx, Double dy, Double dz, Double sx, Double sy, Double sz, Double just, string text) Parameters Type Name Description Double wx x world coordinate of reference point of string. Double wy y world coordinate of reference point of string. Double wz z world coordinate of reference point of string. Double dx Together with dy and dz , this specifies the inclination of the string. The baseline of the string is parallel to a line joining (x, y, z) to (x+dx, y+dy, z+dz) . Double dy Together with dx and dz, this specifies the inclination of the string. Double dz Together with dx and dy, this specifies the inclination of the string. Double sx Together with sy and sz , this specifies the shear of the string. The string is sheared so that the characters are vertically parallel to a line joining (x, y, z) to (x+sx, y+sy, z+sz) . If sx = sy = sz = 0.) then the text is not sheared. Double sy Together with sx and sz, this specifies shear of the string. Double sz Together with sx and sy, this specifies shear of the string. Double just Specifies the position of the string relative to its reference point. If just=0. , the reference point is at the left and if just=1. , it is at the right of the string. Other values of just give intermediate justifications. System.String text A UTF-8 character string to be written out. Remarks Writes text at a specified position and inclination and with a specified shear within the viewport. Text is clipped at the viewport boundaries. The reference point of a string lies along a line passing through the string at half the height of a capital letter. The position of the reference point along this line is determined by just, and the reference point is placed at world coordinates (wx, wy, wz) within the viewport. The inclination and shear of the string is specified in terms of differences of world coordinates making it easy to write text parallel to a line in a graph."
  },
  "api/PLplot.PLStream.randd.html": {
    "href": "api/PLplot.PLStream.randd.html",
    "title": "Method randd | PLplot for .NET",
    "keywords": "Method randd | Improve this Doc View Source randd() plrandd: Random number generator returning a real random number in the range [0,1] Declaration public Double randd() Returns Type Description Double Remarks Random number generator returning a real random number in the range [0,1]. The generator is based on the Mersenne Twister. Most languages / compilers provide their own random number generator, and so this is provided purely for convenience and to give a consistent random number generator across all languages supported by PLplot. This is particularly useful for comparing results from the test suite of examples."
  },
  "api/PLplot.PLStream.replot.html": {
    "href": "api/PLplot.PLStream.replot.html",
    "title": "Method replot | PLplot for .NET",
    "keywords": "Method replot | Improve this Doc View Source replot() plreplot: Replays contents of plot buffer to current device/file Declaration public void replot() Remarks Replays contents of plot buffer to current device/file."
  },
  "api/PLplot.PLStream.rgbhls.html": {
    "href": "api/PLplot.PLStream.rgbhls.html",
    "title": "Method rgbhls | PLplot for .NET",
    "keywords": "Method rgbhls | Improve this Doc View Source rgbhls(Double, Double, Double, out Double, out Double, out Double) plrgbhls: Convert RGB color to HLS Declaration public void rgbhls(Double r, Double g, Double b, out Double p_h, out Double p_l, out Double p_s) Parameters Type Name Description Double r Red intensity (0.0-1.0) of the color. Double g Green intensity (0.0-1.0) of the color. Double b Blue intensity (0.0-1.0) of the color. Double p_h Returned value of the hue in degrees (0.0-360.0) on the color cylinder. Double p_l Returned value of the lightness expressed as a fraction (0.0-1.0) of the axis of the color cylinder. Double p_s Returned value of the saturation expressed as a fraction (0.0-1.0) of the radius of the color cylinder. Remarks Convert RGB color coordinates to HLS"
  },
  "api/PLplot.PLStream.schr.html": {
    "href": "api/PLplot.PLStream.schr.html",
    "title": "Method schr | PLplot for .NET",
    "keywords": "Method schr | Improve this Doc View Source schr(Double, Double) plschr: Set character size Declaration public void schr(Double def, Double scale) Parameters Type Name Description Double def The default height of a character in millimeters, should be set to zero if the default height is to remain unchanged. For rasterized drivers the dx and dy values specified in plspage are used to convert from mm to pixels (note the different unit systems used). This dpi aware scaling is not implemented for all drivers yet. Double scale Scale factor to be applied to default to get actual character height. Remarks This sets up the size of all subsequent characters drawn. The actual height of a character is the product of the default character size and a scaling factor."
  },
  "api/PLplot.PLStream.scmap0.html": {
    "href": "api/PLplot.PLStream.scmap0.html",
    "title": "Method scmap0 | PLplot for .NET",
    "keywords": "Method scmap0 | Improve this Doc View Source scmap0(Int32[], Int32[], Int32[]) plscmap0: Set cmap0 colors by 8-bit RGB values Declaration public void scmap0(Int32[] r, Int32[] g, Int32[] b) Parameters Type Name Description Int32 [] r A vector containing unsigned 8-bit integers (0-255) representing the degree of red in the color. Int32 [] g A vector containing unsigned 8-bit integers (0-255) representing the degree of green in the color. Int32 [] b A vector containing unsigned 8-bit integers (0-255) representing the degree of blue in the color. Remarks Set cmap0 colors using 8-bit RGB values (see ). This sets the entire color map ndash only as many colors as specified will be allocated."
  },
  "api/PLplot.PLStream.scmap0a.html": {
    "href": "api/PLplot.PLStream.scmap0a.html",
    "title": "Method scmap0a | PLplot for .NET",
    "keywords": "Method scmap0a | Improve this Doc View Source scmap0a(Int32[], Int32[], Int32[], Double[]) plscmap0a: Set cmap0 colors by 8-bit RGB values and PLFLT alpha transparency value Declaration public void scmap0a(Int32[] r, Int32[] g, Int32[] b, Double[] alpha) Parameters Type Name Description Int32 [] r A vector containing unsigned 8-bit integers (0-255) representing the degree of red in the color. Int32 [] g A vector containing unsigned 8-bit integers (0-255) representing the degree of green in the color. Int32 [] b A vector containing unsigned 8-bit integers (0-255) representing the degree of blue in the color. Double [] alpha A vector containing values (0.0-1.0) representing the alpha transparency of the color. Remarks Set cmap0 colors using 8-bit RGB values (see ) and PLFLT alpha transparency value. This sets the entire color map ndash only as many colors as specified will be allocated."
  },
  "api/PLplot.PLStream.scmap0n.html": {
    "href": "api/PLplot.PLStream.scmap0n.html",
    "title": "Method scmap0n | PLplot for .NET",
    "keywords": "Method scmap0n | Improve this Doc View Source scmap0n(Int32) plscmap0n: Set number of colors in cmap0 Declaration public void scmap0n(Int32 ncol0) Parameters Type Name Description Int32 ncol0 Number of colors that will be allocated in the cmap0 palette. If this number is zero or less, then the value from the previous call to plscmap0n is used and if there is no previous call, then a default value is used. Remarks Set number of colors in cmap0 (see ). Allocate (or reallocate) cmap0, and fill with default values for those colors not previously allocated. The first 16 default colors are given in the plcol0 documentation. For larger indices the default color is red."
  },
  "api/PLplot.PLStream.scmap1.html": {
    "href": "api/PLplot.PLStream.scmap1.html",
    "title": "Method scmap1 | PLplot for .NET",
    "keywords": "Method scmap1 | Improve this Doc View Source scmap1(Int32[], Int32[], Int32[]) plscmap1: Set opaque RGB cmap1 colors values Declaration public void scmap1(Int32[] r, Int32[] g, Int32[] b) Parameters Type Name Description Int32 [] r A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of red in the color as a continuous function of the integer index of the vector. Int32 [] g A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of green in the color as a continuous function of the integer index of the vector. Int32 [] b A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of blue in the color as a continuous function of the integer index of the vector. Remarks Set opaque cmap1 colors (see ) using RGB vector values. This function also sets the number of cmap1 colors. N.B. Continuous cmap1 colors are indexed with a floating-point index in the range from 0.0-1.0 which is linearly transformed (e.g., by plcol1) to an integer index of these RGB vectors in the range from 0 to ncol1-1. So in order for this continuous color model to work properly, it is the responsibility of the user of plscmap1 to insure that these RGB vectors are continuous functions of their integer indices."
  },
  "api/PLplot.PLStream.scmap1a.html": {
    "href": "api/PLplot.PLStream.scmap1a.html",
    "title": "Method scmap1a | PLplot for .NET",
    "keywords": "Method scmap1a | Improve this Doc View Source scmap1a(Int32[], Int32[], Int32[], Double[]) plscmap1a: Set semitransparent cmap1 RGBA colors. Declaration public void scmap1a(Int32[] r, Int32[] g, Int32[] b, Double[] alpha) Parameters Type Name Description Int32 [] r A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of red in the color as a continuous function of the integer index of the vector. Int32 [] g A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of green in the color as a continuous function of the integer index of the vector. Int32 [] b A vector that represents (using unsigned 8-bit integers in the range from 0-255) the degree of blue in the color as a continuous function of the integer index of the vector. Double [] alpha A vector that represents (using PLFLT values in the range from 0.0-1.0 where 0.0 corresponds to completely transparent and 1.0 corresponds to completely opaque) the alpha transparency of the color as a continuous function of the integer index of the vector. Remarks Set semitransparent cmap1 colors (see ) using RGBA vector values. This function also sets the number of cmap1 colors. N.B. Continuous cmap1 colors are indexed with a floating-point index in the range from 0.0-1.0 which is linearly transformed (e.g., by plcol1) to an integer index of these RGBA vectors in the range from 0 to ncol1-1. So in order for this continuous color model to work properly, it is the responsibility of the user of plscmap1 to insure that these RGBA vectors are continuous functions of their integer indices."
  },
  "api/PLplot.PLStream.scmap1l.html": {
    "href": "api/PLplot.PLStream.scmap1l.html",
    "title": "Method scmap1l | PLplot for .NET",
    "keywords": "Method scmap1l | Improve this Doc View Source scmap1l(ColorSpace, Double[], Double[], Double[], Double[], Boolean[]) plscmap1l: Set cmap1 colors using a piece-wise linear relationship Declaration public void scmap1l(ColorSpace itype, Double[] intensity, Double[] coord1, Double[] coord2, Double[] coord3, Boolean[] alt_hue_path) Parameters Type Name Description ColorSpace itype true: RGB, false: HLS. Double [] intensity A vector containing the cmap1 intensity index (0.0-1.0) in ascending order for each control point. Double [] coord1 A vector containing the first coordinate (H or R) for each control point. Double [] coord2 A vector containing the second coordinate (L or G) for each control point. Double [] coord3 A vector containing the third coordinate (S or B) for each control point. Boolean [] alt_hue_path A vector (with npts - 1 elements) containing the alternative interpolation method Boolean value for each control point interval. (alt_hue_path[i] refers to the interpolation interval between the i and i + 1 control points). Remarks Set cmap1 colors using a piece-wise linear relationship between the cmap1 intensity index (0.0-1.0) and position in HLS or RGB color space (see ). May be called at any time."
  },
  "api/PLplot.PLStream.scmap1la.html": {
    "href": "api/PLplot.PLStream.scmap1la.html",
    "title": "Method scmap1la | PLplot for .NET",
    "keywords": "Method scmap1la | Improve this Doc View Source scmap1la(ColorSpace, Double[], Double[], Double[], Double[], Double[], Boolean[]) plscmap1la: Set cmap1 colors and alpha transparency using a piece-wise linear relationship Declaration public void scmap1la(ColorSpace itype, Double[] intensity, Double[] coord1, Double[] coord2, Double[] coord3, Double[] alpha, Boolean[] alt_hue_path) Parameters Type Name Description ColorSpace itype true: RGB, false: HLS. Double [] intensity A vector containing the cmap1 intensity index (0.0-1.0) in ascending order for each control point. Double [] coord1 A vector containing the first coordinate (H or R) for each control point. Double [] coord2 A vector containing the second coordinate (L or G) for each control point. Double [] coord3 A vector containing the third coordinate (S or B) for each control point. Double [] alpha A vector containing the alpha transparency value (0.0-1.0) for each control point. Boolean [] alt_hue_path A vector (with npts - 1 elements) containing the alternative interpolation method Boolean value for each control point interval. (alt_hue_path[i] refers to the interpolation interval between the i and i + 1 control points). Remarks This is a variant of plscmap1l that supports alpha channel transparency. It sets cmap1 colors using a piece-wise linear relationship between cmap1 intensity index (0.0-1.0) and position in HLS or RGB color space (see ) with alpha transparency value (0.0-1.0). It may be called at any time."
  },
  "api/PLplot.PLStream.scmap1n.html": {
    "href": "api/PLplot.PLStream.scmap1n.html",
    "title": "Method scmap1n | PLplot for .NET",
    "keywords": "Method scmap1n | Improve this Doc View Source scmap1n(Int32) plscmap1n: Set number of colors in cmap1 Declaration public void scmap1n(Int32 ncol1) Parameters Type Name Description Int32 ncol1 Number of colors that will be allocated in the cmap1 palette. If this number is zero or less, then the value from the previous call to plscmap1n is used and if there is no previous call, then a default value is used. Remarks Set number of colors in cmap1, (re-)allocate cmap1, and set default values if this is the first allocation (see )."
  },
  "api/PLplot.PLStream.scmap1_range.html": {
    "href": "api/PLplot.PLStream.scmap1_range.html",
    "title": "Method scmap1_range | PLplot for .NET",
    "keywords": "Method scmap1_range | Improve this Doc View Source scmap1_range(Double, Double) plscmap1_range: Set the cmap1 argument range for continuous color plots Declaration public void scmap1_range(Double min_color, Double max_color) Parameters Type Name Description Double min_color The minimum cmap1 argument. If less than 0.0, then 0.0 is used instead. Double max_color The maximum cmap1 argument. If greater than 1.0, then 1.0 is used instead. Remarks Set the cmap1 argument range for continuous color plots that corresponds to the range of data values. The maximum range corresponding to the entire cmap1 palette is 0.0-1.0, and the smaller the cmap1 argument range that is specified with this routine, the smaller the subset of the cmap1 color palette that is used to represent the continuous data being plotted. If min_color is greater than max_color or max_color is greater than 1.0 or min_color is less than 0.0 then no change is made to the cmap1 argument range. (Use plgcmap1_range to get the cmap1 argument range.)"
  },
  "api/PLplot.PLStream.gcmap1_range.html": {
    "href": "api/PLplot.PLStream.gcmap1_range.html",
    "title": "Method gcmap1_range | PLplot for .NET",
    "keywords": "Method gcmap1_range | Improve this Doc View Source gcmap1_range(out Double, out Double) plgcmap1_range: Get the cmap1 argument range for continuous color plots Declaration public void gcmap1_range(out Double min_color, out Double max_color) Parameters Type Name Description Double min_color Returned value of the current minimum cmap1 argument. Double max_color Returned value of the current maximum cmap1 argument. Remarks Get the cmap1 argument range for continuous color plots. (Use plscmap1_range to set the cmap1 argument range.)"
  },
  "api/PLplot.PLStream.scol0.html": {
    "href": "api/PLplot.PLStream.scol0.html",
    "title": "Method scol0 | PLplot for .NET",
    "keywords": "Method scol0 | Improve this Doc View Source scol0(Int32, Int32, Int32, Int32) plscol0: Set 8-bit RGB values for given cmap0 color index Declaration public void scol0(Int32 icol0, Int32 r, Int32 g, Int32 b) Parameters Type Name Description Int32 icol0 Color index. Must be less than the maximum number of colors (which is set by default, by plscmap0n, or even by plscmap0). Int32 r Unsigned 8-bit integer (0-255) representing the degree of red in the color. Int32 g Unsigned 8-bit integer (0-255) representing the degree of green in the color. Int32 b Unsigned 8-bit integer (0-255) representing the degree of blue in the color. Remarks Set 8-bit RGB values for given cmap0 (see ) index. Overwrites the previous color value for the given index and, thus, does not result in any additional allocation of space for colors."
  },
  "api/PLplot.PLStream.scol0a.html": {
    "href": "api/PLplot.PLStream.scol0a.html",
    "title": "Method scol0a | PLplot for .NET",
    "keywords": "Method scol0a | Improve this Doc View Source scol0a(Int32, Int32, Int32, Int32, Double) plscol0a: Set 8-bit RGB values and PLFLT alpha transparency value for given cmap0 color index Declaration public void scol0a(Int32 icol0, Int32 r, Int32 g, Int32 b, Double alpha) Parameters Type Name Description Int32 icol0 Color index. Must be less than the maximum number of colors (which is set by default, by plscmap0n, or even by plscmap0). Int32 r Unsigned 8-bit integer (0-255) representing the degree of red in the color. Int32 g Unsigned 8-bit integer (0-255) representing the degree of green in the color. Int32 b Unsigned 8-bit integer (0-255) representing the degree of blue in the color. Double alpha Value of the alpha transparency in the range (0.0-1.0). Remarks Set 8-bit RGB value and PLFLT alpha transparency value for given cmap0 (see ) index. Overwrites the previous color value for the given index and, thus, does not result in any additional allocation of space for colors."
  },
  "api/PLplot.PLStream.scolbg.html": {
    "href": "api/PLplot.PLStream.scolbg.html",
    "title": "Method scolbg | PLplot for .NET",
    "keywords": "Method scolbg | Improve this Doc View Source scolbg(Int32, Int32, Int32) plscolbg: Set the background color by 8-bit RGB value Declaration public void scolbg(Int32 r, Int32 g, Int32 b) Parameters Type Name Description Int32 r Unsigned 8-bit integer (0-255) representing the degree of red in the color. Int32 g Unsigned 8-bit integer (0-255) representing the degree of green in the color. Int32 b Unsigned 8-bit integer (0-255) representing the degree of blue in the color. Remarks Set the background color (color 0 in cmap0) by 8-bit RGB value (see )."
  },
  "api/PLplot.PLStream.scolbga.html": {
    "href": "api/PLplot.PLStream.scolbga.html",
    "title": "Method scolbga | PLplot for .NET",
    "keywords": "Method scolbga | Improve this Doc View Source scolbga(Int32, Int32, Int32, Double) plscolbga: Set the background color by 8-bit RGB value and PLFLT alpha transparency value. Declaration public void scolbga(Int32 r, Int32 g, Int32 b, Double alpha) Parameters Type Name Description Int32 r Unsigned 8-bit integer (0-255) representing the degree of red in the color. Int32 g Unsigned 8-bit integer (0-255) representing the degree of green in the color. Int32 b Unsigned 8-bit integer (0-255) representing the degree of blue in the color. Double alpha Value of the alpha transparency in the range (0.0-1.0). Remarks Set the background color (color 0 in cmap0) by 8-bit RGB value and PLFLT alpha transparency value (see )."
  },
  "api/PLplot.PLStream.scolor.html": {
    "href": "api/PLplot.PLStream.scolor.html",
    "title": "Method scolor | PLplot for .NET",
    "keywords": "Method scolor | Improve this Doc View Source scolor(Int32) plscolor: Used to globally turn color output on/off Declaration public void scolor(Int32 color) Parameters Type Name Description Int32 color Color flag (Boolean). If zero, color is turned off. If non-zero, color is turned on. Remarks Used to globally turn color output on/off for those drivers/devices that support it."
  },
  "api/PLplot.PLStream.scompression.html": {
    "href": "api/PLplot.PLStream.scompression.html",
    "title": "Method scompression | PLplot for .NET",
    "keywords": "Method scompression | Improve this Doc View Source scompression(Int32) plscompression: Set device-compression level Declaration public void scompression(Int32 compression) Parameters Type Name Description Int32 compression The desired compression level. This is a device-dependent value. Currently only the jpeg and png devices use these values. For jpeg value is the jpeg quality which should normally be in the range 0-95. Higher values denote higher quality and hence larger image sizes. For png values are in the range -1 to 99. Values of 0-9 are taken as the compression level for zlib. A value of -1 denotes the default zlib compression level. Values in the range 10-99 are divided by 10 and then used as the zlib compression level. Higher compression levels correspond to greater compression and small file sizes at the expense of more computation. Remarks Set device-compression level. Only used for drivers that provide compression. This function, if used, should be invoked before a call to plinit."
  },
  "api/PLplot.PLStream.sdev.html": {
    "href": "api/PLplot.PLStream.sdev.html",
    "title": "Method sdev | PLplot for .NET",
    "keywords": "Method sdev | Improve this Doc View Source sdev(String) plsdev: Set the device (keyword) name Declaration public void sdev(string devname) Parameters Type Name Description System.String devname An ascii character string containing the device name keyword of the required output device. If devname is NULL or if the first character of the string is a ``?'', the normal (prompted) start up is used. Remarks Set the device (keyword) name."
  },
  "api/PLplot.PLStream.sdidev.html": {
    "href": "api/PLplot.PLStream.sdidev.html",
    "title": "Method sdidev | PLplot for .NET",
    "keywords": "Method sdidev | Improve this Doc View Source sdidev(Double, Double, Double, Double) plsdidev: Set parameters that define current device-space window Declaration public void sdidev(Double mar, Double aspect, Double jx, Double jy) Parameters Type Name Description Double mar Relative margin width. Double aspect Aspect ratio. Double jx Relative justification in x. Value must lie in the range -0.5 to 0.5. Double jy Relative justification in y. Value must lie in the range -0.5 to 0.5. Remarks Set relative margin width, aspect ratio, and relative justification that define current device-space window. If you want to just use the previous value for any of these, just pass in the magic value PL_NOTSET. It is unlikely that one should ever need to change the aspect ratio but it's in there for completeness. If plsdidev is not called the default values of mar, jx, and jy are all 0. aspect is set to a device-specific value."
  },
  "api/PLplot.PLStream.sdimap.html": {
    "href": "api/PLplot.PLStream.sdimap.html",
    "title": "Method sdimap | PLplot for .NET",
    "keywords": "Method sdimap | Improve this Doc View Source sdimap(Int32, Int32, Int32, Int32, Double, Double) plsdimap: Set up transformation from metafile coordinates Declaration public void sdimap(Int32 dimxmin, Int32 dimxmax, Int32 dimymin, Int32 dimymax, Double dimxpmm, Double dimypmm) Parameters Type Name Description Int32 dimxmin NEEDS DOCUMENTATION Int32 dimxmax NEEDS DOCUMENTATION Int32 dimymin NEEDS DOCUMENTATION Int32 dimymax NEEDS DOCUMENTATION Double dimxpmm NEEDS DOCUMENTATION Double dimypmm NEEDS DOCUMENTATION Remarks Set up transformation from metafile coordinates. The size of the plot is scaled so as to preserve aspect ratio. This isn't intended to be a general-purpose facility just yet (not sure why the user would need it, for one)."
  },
  "api/PLplot.PLStream.sdiori.html": {
    "href": "api/PLplot.PLStream.sdiori.html",
    "title": "Method sdiori | PLplot for .NET",
    "keywords": "Method sdiori | Improve this Doc View Source sdiori(Double) plsdiori: Set plot orientation Declaration public void sdiori(Double rot) Parameters Type Name Description Double rot Plot orientation parameter. Remarks Set plot orientation parameter which is multiplied by 90deg to obtain the angle of rotation. Note, arbitrary rotation parameters such as 0.2 (corresponding to 18deg) are possible, but the usual values for the rotation parameter are 0., 1., 2., and 3. corresponding to 0deg (landscape mode), 90deg (portrait mode), 180deg (seascape mode), and 270deg (upside-down mode). If plsdiori is not called the default value of rot is 0."
  },
  "api/PLplot.PLStream.sori.html": {
    "href": "api/PLplot.PLStream.sori.html",
    "title": "Method sori | PLplot for .NET",
    "keywords": "Method sori | Improve this Doc View Source sori(Orientation) plsori: Set orientation Declaration public void sori(Orientation ori) Parameters Type Name Description Orientation ori Orientation value (0 for landscape, 1 for portrait, etc.) The value is multiplied by 90 degrees to get the angle. Remarks Set integer plot orientation parameter. This function is identical to plsdiori except for the type of the argument, and should be used in the same way. See the documentation of plsdiori for details."
  },
  "api/PLplot.PLStream.spage.html": {
    "href": "api/PLplot.PLStream.spage.html",
    "title": "Method spage | PLplot for .NET",
    "keywords": "Method spage | Improve this Doc View Source spage(Double, Double, Int32, Int32, Int32, Int32) plspage: Set page parameters Declaration public void spage(Double xp, Double yp, Int32 xleng, Int32 yleng, Int32 xoff, Int32 yoff) Parameters Type Name Description Double xp Number of pixels per inch (DPI), x. Used only by raster drivers, ignored by drivers which use \"real world\" units (e.g. mm). Double yp Number of pixels per inch (DPI), y. Used only by raster drivers, ignored by drivers which use \"real world\" units (e.g. mm). Int32 xleng Page length, x. Int32 yleng Page length, y. Int32 xoff Page offset, x. Int32 yoff Page offset, y. Remarks Sets the page configuration (optional). If an individual parameter is zero then that parameter value is not updated. Not all parameters are recognized by all drivers and the interpretation is device-dependent. The X-window driver uses the length and offset parameters to determine the window size and location. The length and offset values are expressed in units that are specific to the current driver. For instance: screen drivers will usually interpret them as number of pixels, whereas printer drivers will usually use mm."
  },
  "api/PLplot.PLStream.spal0.html": {
    "href": "api/PLplot.PLStream.spal0.html",
    "title": "Method spal0 | PLplot for .NET",
    "keywords": "Method spal0 | Improve this Doc View Source spal0(String) plspal0: Set the cmap0 palette using the specified cmap0*.pal format file Declaration public void spal0(string filename) Parameters Type Name Description System.String filename An ascii character string containing the name of the cmap0*.pal file. If this string is empty, use the default cmap0*.pal file. Remarks Set the cmap0 palette using the specified cmap0*.pal format file."
  },
  "api/PLplot.PLStream.spal1.html": {
    "href": "api/PLplot.PLStream.spal1.html",
    "title": "Method spal1 | PLplot for .NET",
    "keywords": "Method spal1 | Improve this Doc View Source spal1(String, Boolean) plspal1: Set the cmap1 palette using the specified cmap1*.pal format file Declaration public void spal1(string filename, Boolean interpolate) Parameters Type Name Description System.String filename An ascii character string containing the name of the cmap1*.pal file. If this string is empty, use the default cmap1*.pal file. Boolean interpolate If this parameter is true, the columns containing the intensity index, r, g, b, alpha and alt_hue_path in the cmap1*.pal file are used to set the cmap1 palette with a call to plscmap1la. (The cmap1*.pal header contains a flag which controls whether the r, g, b data sent to plscmap1la are interpreted as HLS or RGB.) If this parameter is false, the intensity index and alt_hue_path columns are ignored and the r, g, b (interpreted as RGB), and alpha columns of the cmap1*.pal file are used instead to set the cmap1 palette directly with a call to plscmap1a. Remarks Set the cmap1 palette using the specified cmap1*.pal format file."
  },
  "api/PLplot.PLStream.spause.html": {
    "href": "api/PLplot.PLStream.spause.html",
    "title": "Method spause | PLplot for .NET",
    "keywords": "Method spause | Improve this Doc View Source spause(Boolean) plspause: Set the pause (on end-of-page) status Declaration public void spause(Boolean pause) Parameters Type Name Description Boolean pause If pause is true there will be a pause on end-of-page for those drivers which support this. Otherwise there is no pause. Remarks Set the pause (on end-of-page) status."
  },
  "api/PLplot.PLStream.ssub.html": {
    "href": "api/PLplot.PLStream.ssub.html",
    "title": "Method ssub | PLplot for .NET",
    "keywords": "Method ssub | Improve this Doc View Source ssub(Int32, Int32) plssub: Set the number of subpages in x and y Declaration public void ssub(Int32 nx, Int32 ny) Parameters Type Name Description Int32 nx Number of windows in x direction (i.e., number of window columns). Int32 ny Number of windows in y direction (i.e., number of window rows). Remarks Set the number of subpages in x and y."
  },
  "api/PLplot.PLStream.ssym.html": {
    "href": "api/PLplot.PLStream.ssym.html",
    "title": "Method ssym | PLplot for .NET",
    "keywords": "Method ssym | Improve this Doc View Source ssym(Double, Double) plssym: Set symbol size Declaration public void ssym(Double def, Double scale) Parameters Type Name Description Double def The default height of a symbol in millimeters, should be set to zero if the default height is to remain unchanged. Double scale Scale factor to be applied to default to get actual symbol height. Remarks This sets up the size of all subsequent symbols drawn by plpoin and plsym. The actual height of a symbol is the product of the default symbol size and a scaling factor as for the character height."
  },
  "api/PLplot.PLStream.star.html": {
    "href": "api/PLplot.PLStream.star.html",
    "title": "Method star | PLplot for .NET",
    "keywords": "Method star | Improve this Doc View Source star(Int32, Int32) plstar: Initialization Declaration public void star(Int32 nx, Int32 ny) Parameters Type Name Description Int32 nx Number of subpages to divide output page in the x direction. Int32 ny Number of subpages to divide output page in the y direction. Remarks Initializing the plotting package. The program prompts for the device keyword or number of the desired output device. Hitting a RETURN in response to the prompt is the same as selecting the first device. If only one device is enabled when PLplot is installed, plstar will issue no prompt. The output device is divided into nx by ny subpages, each of which may be used independently. The subroutine pladv is used to advance from one subpage to the next."
  },
  "api/PLplot.PLStream.start.html": {
    "href": "api/PLplot.PLStream.start.html",
    "title": "Method start | PLplot for .NET",
    "keywords": "Method start | Improve this Doc View Source start(String, Int32, Int32) plstart: Initialization Declaration public void start(string devname, Int32 nx, Int32 ny) Parameters Type Name Description System.String devname An ascii character string containing the device name keyword of the required output device. If devname is NULL or if the first character of the string is a ``?'', the normal (prompted) start up is used. Int32 nx Number of subpages to divide output page in the x direction. Int32 ny Number of subpages to divide output page in the y direction. Remarks Alternative to plstar for initializing the plotting package. The device name keyword for the desired output device must be supplied as an argument. These keywords are the same as those printed out by plstar. If the requested device is not available, or if the input string is empty or begins with ``?'', the prompted start up of plstar is used. This routine also divides the output device page into nx by ny subpages, each of which may be used independently. The subroutine pladv is used to advance from one subpage to the next."
  },
  "api/PLplot.PLStream.stransform.html": {
    "href": "api/PLplot.PLStream.stransform.html",
    "title": "Method stransform | PLplot for .NET",
    "keywords": "Method stransform | Improve this Doc View Source stransform(TransformFunc) plstransform: Set a global coordinate transform function Declaration public void stransform(TransformFunc coordinate_transform) Parameters Type Name Description TransformFunc coordinate_transform A callback function that defines the transformation from the input (x, y) world coordinates to new PLplot world coordinates. If coordinate_transform is not supplied (e.g., is set to NULL in the C case), then no transform is applied. Remarks This function can be used to define a coordinate transformation which affects all elements drawn within the current plot window. The coordinate_transform callback function is similar to that provided for the plmap and plmeridians functions. The coordinate_transform_data parameter may be used to pass extra data to coordinate_transform."
  },
  "api/PLplot.PLStream.string2.html": {
    "href": "api/PLplot.PLStream.string2.html",
    "title": "Method string2 | PLplot for .NET",
    "keywords": "Method string2 | Improve this Doc View Source string2(Double[], Double[], String) Declaration public void string2(Double[] x, Double[] y, string str) Parameters Type Name Description Double [] x Double [] y System.String str"
  },
  "api/PLplot.PLStream.string3.html": {
    "href": "api/PLplot.PLStream.string3.html",
    "title": "Method string3 | PLplot for .NET",
    "keywords": "Method string3 | Improve this Doc View Source string3(Double[], Double[], Double[], String) plstring3: Plot a glyph at the specified 3D points Declaration public void string3(Double[] x, Double[] y, Double[] z, string str) Parameters Type Name Description Double [] x A vector containing the x coordinates of the points. Double [] y A vector containing the y coordinates of the points. Double [] z A vector containing the z coordinates of the points. System.String str Remarks Plot a glyph at the specified 3D points. (Supersedes plpoin3 because many[!] more glyphs are accessible with plstring3.) Set up the call to this function similar to what is done for plline3. The glyph is specified with a PLplot user string. Note that the user string is not actually limited to one glyph so it is possible (but not normally useful) to plot more than one glyph at the specified points with this function. As with plmtex and plptex, the user string can contain FCI escapes to determine the font, UTF-8 code to determine the glyph or else PLplot escapes for Hershey or unicode text to determine the glyph."
  },
  "api/PLplot.PLStream.stripa.html": {
    "href": "api/PLplot.PLStream.stripa.html",
    "title": "Method stripa | PLplot for .NET",
    "keywords": "Method stripa | Improve this Doc View Source stripa(Int32, Pen, Double, Double) plstripa: Add a point to a strip chart Declaration public void stripa(Int32 id, Pen pen, Double x, Double y) Parameters Type Name Description Int32 id Identification number of the strip chart (set up in plstripc). Pen pen Pen number (ranges from 0 to 3). Double x X coordinate of point to plot. Double y Y coordinate of point to plot. Remarks Add a point to a given pen of a given strip chart. There is no need for all pens to have the same number of points or to be equally sampled in the x coordinate. Allocates memory and rescales as necessary."
  },
  "api/PLplot.PLStream.stripc.html": {
    "href": "api/PLplot.PLStream.stripc.html",
    "title": "Method stripc | PLplot for .NET",
    "keywords": "Method stripc | Improve this Doc View Source stripc(out Int32, String, String, Double, Double, Double, Double, Double, Double, Double, Boolean, Boolean, Int32, Int32, Int32[], LineStyle[], String[], String, String, String) plstripc: Create a 4-pen strip chart Declaration public void stripc(out Int32 id, string xspec, string yspec, Double xmin, Double xmax, Double xjump, Double ymin, Double ymax, Double xlpos, Double ylpos, Boolean y_ascl, Boolean acc, Int32 colbox, Int32 collab, Int32[] colline, LineStyle[] styline, String[] legline, string labx, string laby, string labtop) Parameters Type Name Description Int32 id Returned value of the identification number of the strip chart to use on plstripa and plstripd. System.String xspec An ascii character string containing the x-axis specification as in plbox. System.String yspec An ascii character string containing the y-axis specification as in plbox. Double xmin Initial coordinates of plot box; they will change as data are added. Double xmax Initial coordinates of plot box; they will change as data are added. Double xjump When x attains xmax, the length of the plot is multiplied by the factor (1 + xjump) . Double ymin Initial coordinates of plot box; they will change as data are added. Double ymax Initial coordinates of plot box; they will change as data are added. Double xlpos X legend box position (range from 0 to 1). Double ylpos Y legend box position (range from 0 to 1). Boolean y_ascl Autoscale y between x jumps if y_ascl is true, otherwise not. Boolean acc Accumulate strip plot if acc is true, otherwise slide display. Int32 colbox Plot box color index (cmap0). Int32 collab Legend color index (cmap0). Int32 [] colline A vector containing the cmap0 color indices for the 4 pens. LineStyle [] styline A vector containing the line style indices for the 4 pens. String [] legline A vector of UTF-8 character strings containing legends for the 4 pens. System.String labx A UTF-8 character string containing the label for the x axis. System.String laby A UTF-8 character string containing the label for the y axis. System.String labtop A UTF-8 character string containing the plot title. Remarks Create a 4-pen strip chart, to be used afterwards by plstripa"
  },
  "api/PLplot.PLStream.stripd.html": {
    "href": "api/PLplot.PLStream.stripd.html",
    "title": "Method stripd | PLplot for .NET",
    "keywords": "Method stripd | Improve this Doc View Source stripd(Int32) plstripd: Deletes and releases memory used by a strip chart Declaration public void stripd(Int32 id) Parameters Type Name Description Int32 id Identification number of strip chart to delete. Remarks Deletes and releases memory used by a strip chart."
  },
  "api/PLplot.PLStream.imagefr.html": {
    "href": "api/PLplot.PLStream.imagefr.html",
    "title": "Method imagefr | PLplot for .NET",
    "keywords": "Method imagefr | Improve this Doc View Source imagefr(Double[,], Double, Double, Double, Double, Double, Double, Double, Double, TransformFunc) plimagefr: Plot a 2D matrix using cmap1 Declaration public void imagefr(Double[, ] idata, Double xmin, Double xmax, Double ymin, Double ymax, Double zmin, Double zmax, Double valuemin, Double valuemax, TransformFunc pltr) Parameters Type Name Description Double [,] idata A matrix of values (intensities) to plot. Should have dimensions of nx by ny. Double xmin Double xmax Double ymin Double ymax Double zmin Double zmax Double valuemin Double valuemax TransformFunc pltr A callback function that defines the transformation between the zero-based indices of the matrix idata and world coordinates. If pltr is not supplied (e.g., is set to NULL in the C case), then the x indices of idata are mapped to the range xmin through xmax and the y indices of idata are mapped to the range ymin through ymax.For the C case, transformation functions are provided in the PLplot library: pltr0 for the identity mapping, and pltr1 and pltr2 for arbitrary mappings respectively defined by vectors and matrices. In addition, C callback routines for the transformation can be supplied by the user such as the mypltr function in examples/c/x09c.c which provides a general linear transformation between index coordinates and world coordinates.For languages other than C you should consult for the details concerning how PLTRANSFORM_callback arguments are interfaced. However, in general, a particular pattern of callback-associated arguments such as a tr vector with 6 elements; xg and yg vectors; or xg and yg matrices are respectively interfaced to a linear-transformation routine similar to the above mypltr function; pltr1; and pltr2. Furthermore, some of our more sophisticated bindings (see, e.g., ) support native language callbacks for handling index to world-coordinate transformations. Examples of these various approaches are given in examples/ltlanguagegtx09*, examples/ltlanguagegtx16*, examples/ltlanguagegtx20*, examples/ltlanguagegtx21*, and examples/ltlanguagegtx22*, for all our supported languages. Remarks Plot a 2D matrix using cmap1."
  },
  "api/PLplot.PLStream.vpor.html": {
    "href": "api/PLplot.PLStream.vpor.html",
    "title": "Method vpor | PLplot for .NET",
    "keywords": "Method vpor | Improve this Doc View Source vpor(Double, Double, Double, Double) plvpor: Specify viewport using normalized subpage coordinates Declaration public void vpor(Double xmin, Double xmax, Double ymin, Double ymax) Parameters Type Name Description Double xmin The normalized subpage coordinate of the left-hand edge of the viewport. Double xmax The normalized subpage coordinate of the right-hand edge of the viewport. Double ymin The normalized subpage coordinate of the bottom edge of the viewport. Double ymax The normalized subpage coordinate of the top edge of the viewport. Remarks Device-independent routine for setting up the viewport. This defines the viewport in terms of normalized subpage coordinates which run from 0.0 to 1.0 (left to right and bottom to top) along each edge of the current subpage. Use the alternate routine plsvpa in order to create a viewport of a definite size."
  },
  "api/PLplot.PLStream.vsta.html": {
    "href": "api/PLplot.PLStream.vsta.html",
    "title": "Method vsta | PLplot for .NET",
    "keywords": "Method vsta | Improve this Doc View Source vsta() plvsta: Select standard viewport Declaration public void vsta() Remarks Selects the largest viewport within the subpage that leaves a standard margin (left-hand margin of eight character heights, and a margin around the other three sides of five character heights)."
  },
  "api/PLplot.PLStream.w3d.html": {
    "href": "api/PLplot.PLStream.w3d.html",
    "title": "Method w3d | PLplot for .NET",
    "keywords": "Method w3d | Improve this Doc View Source w3d(Double, Double, Double, Double, Double, Double, Double, Double, Double, Double, Double) plw3d: Configure the transformations required for projecting a 3D surface on a 2D window Declaration public void w3d(Double basex, Double basey, Double height, Double xmin, Double xmax, Double ymin, Double ymax, Double zmin, Double zmax, Double alt, Double az) Parameters Type Name Description Double basex The normalized x coordinate size of the rectangular cuboid. Double basey The normalized y coordinate size of the rectangular cuboid. Double height The normalized z coordinate size of the rectangular cuboid. Double xmin The minimum x world coordinate of the rectangular cuboid. Double xmax The maximum x world coordinate of the rectangular cuboid. Double ymin The minimum y world coordinate of the rectangular cuboid. Double ymax The maximum y world coordinate of the rectangular cuboid. Double zmin The minimum z world coordinate of the rectangular cuboid. Double zmax The maximum z world coordinate of the rectangular cuboid. Double alt The viewing altitude in degrees above the xy plane of the rectangular cuboid in normalized coordinates. Double az The viewing azimuth in degrees of the rectangular cuboid in normalized coordinates. When az=0, the observer is looking face onto the zx plane of the rectangular cuboid in normalized coordinates, and as az is increased, the observer moves clockwise around that cuboid when viewed from above the xy plane. Remarks Configure the transformations required for projecting a 3D surface on an existing 2D window. Those transformations (see ) are done to a rectangular cuboid enclosing the 3D surface which has its limits expressed in 3D world coordinates and also normalized 3D coordinates (used for interpreting the altitude and azimuth of the viewing angle). The transformations consist of the linear transform from 3D world coordinates to normalized 3D coordinates, and the 3D rotation of normalized coordinates required to align the pole of the new 3D coordinate system with the viewing direction specified by altitude and azimuth so that x and y of the surface elements in that transformed coordinate system are the projection of the 3D surface with given viewing direction on the 2D window."
  },
  "api/PLplot.PLStream.width.html": {
    "href": "api/PLplot.PLStream.width.html",
    "title": "Method width | PLplot for .NET",
    "keywords": "Method width | Improve this Doc View Source width(Double) plwidth: Set pen width Declaration public void width(Double width) Parameters Type Name Description Double width The desired pen width. If width is negative or the same as the previous value no action is taken. width = 0. should be interpreted as as the minimum valid pen width for the device. The interpretation of positive width values is also device dependent. Remarks Sets the pen width."
  },
  "api/PLplot.PLStream.wind.html": {
    "href": "api/PLplot.PLStream.wind.html",
    "title": "Method wind | PLplot for .NET",
    "keywords": "Method wind | Improve this Doc View Source wind(Double, Double, Double, Double) plwind: Specify window Declaration public void wind(Double xmin, Double xmax, Double ymin, Double ymax) Parameters Type Name Description Double xmin The world x coordinate of the left-hand edge of the viewport. Double xmax The world x coordinate of the right-hand edge of the viewport. Double ymin The world y coordinate of the bottom edge of the viewport. Double ymax The world y coordinate of the top edge of the viewport. Remarks Specify the window, i.e., the world coordinates of the edges of the viewport."
  },
  "api/PLplot.PLStream.xormod.html": {
    "href": "api/PLplot.PLStream.xormod.html",
    "title": "Method xormod | PLplot for .NET",
    "keywords": "Method xormod | Improve this Doc View Source xormod(Boolean, out Boolean) plxormod: Enter or leave xor mode Declaration public void xormod(Boolean mode, out Boolean status) Parameters Type Name Description Boolean mode mode is true means enter xor mode and mode is false means leave xor mode. Boolean status Returned value of the status. modestatus of true (false) means driver is capable (incapable) of xor mode. Remarks Enter (when mode is true) or leave (when mode is false) xor mode for those drivers (e.g., the xwin driver) that support it. Enables erasing plots by drawing twice the same line, symbol, etc. If driver is not capable of xor operation it returns a status of false."
  },
  "api/PLplot.PLStream.gFileDevs.html": {
    "href": "api/PLplot.PLStream.gFileDevs.html",
    "title": "Method gFileDevs | PLplot for .NET",
    "keywords": "Method gFileDevs | Improve this Doc View Source gFileDevs(out String[], out String[]) Returns a list of file-oriented device names and their menu strings Declaration public void gFileDevs(out string[] p_menustr, out string[] p_devname) Parameters Type Name Description System.String [] p_menustr human-readable name System.String [] p_devname device name"
  },
  "api/PLplot.PLStream.gDevs.html": {
    "href": "api/PLplot.PLStream.gDevs.html",
    "title": "Method gDevs | PLplot for .NET",
    "keywords": "Method gDevs | Improve this Doc View Source gDevs(out String[], out String[]) Returns a list of all device names and their menu strings Declaration public void gDevs(out string[] p_menustr, out string[] p_devname) Parameters Type Name Description System.String [] p_menustr human-readable name System.String [] p_devname device name"
  },
  "api/PLplot.PLStream.sKeyEH.html": {
    "href": "api/PLplot.PLStream.sKeyEH.html",
    "title": "Method sKeyEH | PLplot for .NET",
    "keywords": "Method sKeyEH | Improve this Doc View Source sKeyEH(KeyHandler, IntPtr) Set the function pointer for the keyboard event handler Declaration public void sKeyEH(KeyHandler keyEH, IntPtr KeyEH_data) Parameters Type Name Description KeyHandler keyEH IntPtr KeyEH_data"
  },
  "api/PLplot.PLStream.sButtonEH.html": {
    "href": "api/PLplot.PLStream.sButtonEH.html",
    "title": "Method sButtonEH | PLplot for .NET",
    "keywords": "Method sButtonEH | Improve this Doc View Source sButtonEH(ButtonHandler, IntPtr) Set the function pointer for the (mouse) button event handler Declaration public void sButtonEH(ButtonHandler buttonEH, IntPtr ButtonEH_data) Parameters Type Name Description ButtonHandler buttonEH IntPtr ButtonEH_data"
  },
  "api/PLplot.PLStream.sbopH.html": {
    "href": "api/PLplot.PLStream.sbopH.html",
    "title": "Method sbopH | PLplot for .NET",
    "keywords": "Method sbopH | Improve this Doc View Source sbopH(BopHandler, IntPtr) Sets an optional user bop handler Declaration public void sbopH(BopHandler handler, IntPtr handler_data) Parameters Type Name Description BopHandler handler IntPtr handler_data"
  },
  "api/PLplot.PLStream.seopH.html": {
    "href": "api/PLplot.PLStream.seopH.html",
    "title": "Method seopH | PLplot for .NET",
    "keywords": "Method seopH | Improve this Doc View Source seopH(EopHandler, IntPtr) Sets an optional user eop handler Declaration public void seopH(EopHandler handler, IntPtr handler_data) Parameters Type Name Description EopHandler handler IntPtr handler_data"
  },
  "api/PLplot.PLStream.sexit.html": {
    "href": "api/PLplot.PLStream.sexit.html",
    "title": "Method sexit | PLplot for .NET",
    "keywords": "Method sexit | Improve this Doc View Source sexit(ExitHandler) plsexit: Set exit handler Declaration public void sexit(ExitHandler handler) Parameters Type Name Description ExitHandler handler Error exit handler. Remarks Sets an optional user exit handler. See plexit for details."
  },
  "api/PLplot.PLStream.sabort.html": {
    "href": "api/PLplot.PLStream.sabort.html",
    "title": "Method sabort | PLplot for .NET",
    "keywords": "Method sabort | Improve this Doc View Source sabort(AbortHandler) plsabort: Set abort handler Declaration public void sabort(AbortHandler handler) Parameters Type Name Description AbortHandler handler Error abort handler. Remarks Sets an optional user abort handler. See plabort for details."
  },
  "api/PLplot.PLStream.tr0.html": {
    "href": "api/PLplot.PLStream.tr0.html",
    "title": "Method tr0 | PLplot for .NET",
    "keywords": "Method tr0 | Improve this Doc View Source tr0() Make a identity transformation for matrix index to world coordinate mapping. Declaration public TransformFunc tr0() Returns Type Description TransformFunc"
  },
  "api/PLplot.PLStream.tr1.html": {
    "href": "api/PLplot.PLStream.tr1.html",
    "title": "Method tr1 | PLplot for .NET",
    "keywords": "Method tr1 | Improve this Doc View Source tr1(Double[], Double[]) Make a linear interpolation transformation for matrix index to world coordinate mapping using singly dimensioned coordinate arrays. Declaration public TransformFunc tr1(Double[] xg, Double[] yg) Parameters Type Name Description Double [] xg x coordinates of grid Double [] yg y coordinates of grid Returns Type Description TransformFunc"
  },
  "api/PLplot.PLStream.tr2.html": {
    "href": "api/PLplot.PLStream.tr2.html",
    "title": "Method tr2 | PLplot for .NET",
    "keywords": "Method tr2 | Improve this Doc View Source tr2(Double[,], Double[,]) Make a linear interpolation transformation for grid to world mapping using doubly dimensioned coordinate arrays. Declaration public TransformFunc tr2(Double[, ] xg, Double[, ] yg) Parameters Type Name Description Double [,] xg x targets Double [,] yg y targets Returns Type Description TransformFunc"
  },
  "api/PLplot.PLStream.setopt.html": {
    "href": "api/PLplot.PLStream.setopt.html",
    "title": "Method setopt | PLplot for .NET",
    "keywords": "Method setopt | Improve this Doc View Source setopt(String, String) plsetopt: Set any command-line option Declaration public Int32 setopt(string opt, string optarg) Parameters Type Name Description System.String opt An ascii character string containing the command-line option. System.String optarg An ascii character string containing the argument of the command-line option. Returns Type Description Int32 Remarks Set any command-line option internally from a program before it invokes plinit. opt is the name of the command-line option and optarg is the corresponding command-line option argument."
  },
  "api/PLplot.PLStream.parseopts.html": {
    "href": "api/PLplot.PLStream.parseopts.html",
    "title": "Method parseopts | PLplot for .NET",
    "keywords": "Method parseopts | Improve this Doc View Source parseopts(ref String[], ParseOpts) plparseopts: Parse command-line arguments Declaration public Int32 parseopts(ref string[] argv, ParseOpts mode) Parameters Type Name Description System.String [] argv A vector of character strings containing *p_argc command-line arguments. ParseOpts mode Parsing mode with the following possibilities: PL_PARSE_FULL (1) -- Full parsing of command line and all error messages enabled, including program exit when an error occurs. Anything on the command line that isn't recognized as a valid option or option argument is flagged as an error. PL_PARSE_QUIET (2) -- Turns off all output except in the case of errors. PL_PARSE_NODELETE (4) -- Turns off deletion of processed arguments. PL_PARSE_SHOWALL (8) -- Show invisible options PL_PARSE_NOPROGRAM (32) -- Specified if argv[0] is NOT a pointer to the program name. PL_PARSE_NODASH (64) -- Set if leading dash is NOT required. PL_PARSE_SKIP (128) -- Set to quietly skip over any unrecognized arguments. Returns Type Description Int32 Remarks Parse command-line arguments."
  },
  "api/PLplot.PLStream.OptUsage.html": {
    "href": "api/PLplot.PLStream.OptUsage.html",
    "title": "Method OptUsage | PLplot for .NET",
    "keywords": "Method OptUsage | Improve this Doc View Source OptUsage() plOptUsage: Print usage and syntax message. Declaration public void OptUsage() Remarks Prints the usage and syntax message. The message can also be displayed using the -h command line option. There is a default message describing the default PLplot options. The usage message is also modified by plSetUsage and plMergeOpts."
  },
  "api/PLplot.PLStream.gesc.html": {
    "href": "api/PLplot.PLStream.gesc.html",
    "title": "Method gesc | PLplot for .NET",
    "keywords": "Method gesc | Improve this Doc View Source gesc(out Char) Get the escape character for text strings. Declaration public void gesc(out Char p_esc) Parameters Type Name Description Char p_esc"
  },
  "api/PLplot.PLStream.cmd.html": {
    "href": "api/PLplot.PLStream.cmd.html",
    "title": "Method cmd | PLplot for .NET",
    "keywords": "Method cmd | Improve this Doc View Source cmd(Int32, IntPtr) Front-end to driver escape function. Declaration public void cmd(Int32 op, IntPtr ptr) Parameters Type Name Description Int32 op IntPtr ptr"
  },
  "api/PLplot.PLStream.GetCursor.html": {
    "href": "api/PLplot.PLStream.GetCursor.html",
    "title": "Method GetCursor | PLplot for .NET",
    "keywords": "Method GetCursor | Improve this Doc View Source GetCursor(out GraphicsIn) plGetCursor: Wait for graphics input event and translate to world coordinates. Declaration public Int32 GetCursor(out GraphicsIn gin) Parameters Type Name Description GraphicsIn gin Pointer to PLGraphicsIn structure which will contain the output. The structure is not allocated by the routine and must exist before the function is called. Returns Type Description Int32 Remarks Wait for graphics input event and translate to world coordinates. Returns 0 if no translation to world coordinates is possible."
  },
  "api/PLplot.PLStream.TranslateCursor.html": {
    "href": "api/PLplot.PLStream.TranslateCursor.html",
    "title": "Method TranslateCursor | PLplot for .NET",
    "keywords": "Method TranslateCursor | Improve this Doc View Source TranslateCursor(ref GraphicsIn) plTranslateCursor: Convert device to world coordinates Declaration public Int32 TranslateCursor(ref GraphicsIn gin) Parameters Type Name Description GraphicsIn gin Pointer to a PLGraphicsIn structure to hold the input and output coordinates. Returns Type Description Int32 Remarks Convert from device to world coordinates. The variable gin must have members dX and dY set before the call.These represent the coordinates of the point as a fraction of the total drawing area. If the point passed in is on a window then the function returns 1, members wX and wY will be filled with the world coordinates of that point and the subwindow member will be filled with the index of the window on which the point falls. If the point falls on more than one window (because they overlap) then the window with the lowest index is used. If the point does not fall on a window then the function returns 0, wX and wY are set to 0 and subwindow remains unchanged."
  },
  "api/PLplot.PLStream.sdevdata.html": {
    "href": "api/PLplot.PLStream.sdevdata.html",
    "title": "Method sdevdata | PLplot for .NET",
    "keywords": "Method sdevdata | Improve this Doc View Source sdevdata(IntPtr) Set the pointer to the data used in driver initialisation Declaration public void sdevdata(IntPtr data) Parameters Type Name Description IntPtr data"
  },
  "api/PLplot.Native.setcontlabelformat.html": {
    "href": "api/PLplot.Native.setcontlabelformat.html",
    "title": "Method setcontlabelformat | PLplot for .NET",
    "keywords": "Method setcontlabelformat setcontlabelformat(Int32, Int32) pl_setcontlabelformat: Set format of numerical label for contours Declaration public static void setcontlabelformat(Int32 lexp, Int32 sigdig) Parameters Type Name Description Int32 lexp If the contour numerical label is greater than 10^(lexp) or less than 10^(-lexp), then the exponential format is used. Default value of lexp is 4. Int32 sigdig Number of significant digits. Default value is 2. Remarks Set format of numerical label for contours."
  },
  "api/PLplot.Native.setcontlabelparam.html": {
    "href": "api/PLplot.Native.setcontlabelparam.html",
    "title": "Method setcontlabelparam | PLplot for .NET",
    "keywords": "Method setcontlabelparam setcontlabelparam(Double, Double, Double, Int32) pl_setcontlabelparam: Set parameters of contour labelling other than format of numerical label Declaration public static void setcontlabelparam(Double offset, Double size, Double spacing, Int32 active) Parameters Type Name Description Double offset Offset of label from contour line (if set to 0.0, labels are printed on the lines). Default value is 0.006. Double size Font height for contour labels (normalized). Default value is 0.3. Double spacing Spacing parameter for contour labels. Default value is 0.1. Int32 active Activate labels. Set to 1 if you want contour labels on. Default is off (0). Remarks Set parameters of contour labelling other than those handled by pl_setcontlabelformat."
  },
  "api/PLplot.Native.adv.html": {
    "href": "api/PLplot.Native.adv.html",
    "title": "Method adv | PLplot for .NET",
    "keywords": "Method adv adv(Int32) pladv: Advance the (sub-)page Declaration public static void adv(Int32 page) Parameters Type Name Description Int32 page Specifies the subpage number (starting from 1 in the top left corner and increasing along the rows) to which to advance. Set to zero to advance to the next subpage (or to the next page if subpages are not being used). Remarks Advances to the next subpage if sub=0, performing a page advance if there are no remaining subpages on the current page. If subpages aren't being used, pladv(0) will always advance the page. If pagegt0, PLplot switches to the specified subpage. Note that this allows you to overwrite a plot on the specified subpage; if this is not what you intended, use pleop followed by plbop to first advance the page. This routine is called automatically (with page=0) by plenv, but if plenv is not used, pladv must be called after initializing PLplot but before defining the viewport."
  },
  "api/PLplot.Native.arc.html": {
    "href": "api/PLplot.Native.arc.html",
    "title": "Method arc | PLplot for .NET",
    "keywords": "Method arc arc(Double, Double, Double, Double, Double, Double, Double, Boolean) plarc: Draw a circular or elliptical arc Declaration public static void arc(Double x, Double y, Double a, Double b, Double angle1, Double angle2, Double rotate, Boolean fill) Parameters Type Name Description Double x X coordinate of arc center. Double y Y coordinate of arc center. Double a Length of the semimajor axis of the arc. Double b Length of the semiminor axis of the arc. Double angle1 Starting angle of the arc relative to the semimajor axis. Double angle2 Ending angle of the arc relative to the semimajor axis. Double rotate Angle of the semimajor axis relative to the X-axis. Boolean fill Draw a filled arc. Remarks Draw a possibly filled arc centered at x, y with semimajor axis a and semiminor axis b, starting at angle1 and ending at angle2."
  },
  "api/PLplot.Native.axes.html": {
    "href": "api/PLplot.Native.axes.html",
    "title": "Method axes | PLplot for .NET",
    "keywords": "Method axes axes(Double, Double, String, Double, Int32, String, Double, Int32) plaxes: Draw a box with axes, etc. with arbitrary origin Declaration public static void axes(Double x0, Double y0, string xopt, Double xtick, Int32 nxsub, string yopt, Double ytick, Int32 nysub) Parameters Type Name Description Double x0 World X coordinate of origin. Double y0 World Y coordinate of origin. System.String xopt One or more string concatenated from XYAxisOpt . Double xtick World coordinate interval between major ticks on the x axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nxsub Number of subintervals between major x axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. System.String yopt One or more string concatenated from XYAxisOpt . Double ytick World coordinate interval between major ticks on the y axis. If it is set to zero, PLplot automatically generates a suitable tick interval. Int32 nysub Number of subintervals between major y axis ticks for minor ticks. If it is set to zero, PLplot automatically generates a suitable minor tick interval. Remarks Draws a box around the currently defined viewport with arbitrary world-coordinate origin specified by x0 and y0 and labels it with world coordinate values appropriate to the window. Thus plaxes should only be called after defining both viewport and window. The ascii character strings xopt and yopt specify how the box should be drawn as described below. If ticks and/or subticks are to be drawn for a particular axis, the tick intervals and number of subintervals may be specified explicitly, or they may be defaulted by setting the appropriate arguments to zero."
  },
  "api/PLplot.Native.bin.html": {
    "href": "api/PLplot.Native.bin.html",
    "title": "Method bin | PLplot for .NET",
    "keywords": "Method bin | Improve this Doc View Source bin(Double[], Double[], Bin) plbin: Plot a histogram from binned data Declaration public static void bin(Double[] x, Double[] y, Bin opt) Parameters Type Name Description Double [] x A vector containing values associated with bins. These must form a strictly increasing sequence. Double [] y A vector containing a number which is proportional to the number of points in each bin. This is a PLFLT (instead of PLINT) vector so as to allow histograms of probabilities, etc. Bin opt Is a combination of several flags: opt=PL_BIN_DEFAULT: The x represent the lower bin boundaries, the outer bins are expanded to fill up the entire x-axis and bins of zero height are simply drawn. opt=PL_BIN_CENTRED|...: The bin boundaries are to be midway between the x values. If the values in x are equally spaced, the values are the center values of the bins. opt=PL_BIN_NOEXPAND|...: The outer bins are drawn with equal size as the ones inside. opt=PL_BIN_NOEMPTY|...: Bins with zero height are not drawn (there is a gap for such bins). Remarks Plots a histogram consisting of nbin bins. The value associated with the i'th bin is placed in x[i], and the number of points in the bin is placed in y[i]. For proper operation, the values in x[i] must form a strictly increasing sequence. By default, x[i] is the left-hand edge of the i'th bin. If opt=PL_BIN_CENTRED is used, the bin boundaries are placed midway between the values in the x vector. Also see plhist for drawing histograms from unbinned data."
  },
  "api/PLplot.Native.btime.html": {
    "href": "api/PLplot.Native.btime.html",
    "title": "Method btime | PLplot for .NET",
    "keywords": "Method btime btime(out Int32, out Int32, out Int32, out Int32, out Int32, out Double, Double) plbtime: Calculate broken-down time from continuous time for the current stream Declaration public static void btime(out Int32 year, out Int32 month, out Int32 day, out Int32 hour, out Int32 min, out Double sec, Double ctime) Parameters Type Name Description Int32 year Returned value of years with positive values corresponding to CE (i.e., 1 = 1 CE, etc.) and non-negative values corresponding to BCE (e.g., 0 = 1 BCE, -1 = 2 BCE, etc.) Int32 month Returned value of month within the year in the range from 0 (January) to 11 (December). Int32 day Returned value of day within the month in the range from 1 to 31. Int32 hour Returned value of hour within the day in the range from 0 to 23. Int32 min Returned value of minute within the hour in the range from 0 to 59 Double sec Returned value of second within the minute in range from 0. to 60. Double ctime Continuous time from which the broken-down time is calculated. Remarks Calculate broken-down time; year, month, day, hour, min, sec; from continuous time, ctime for the current stream. This function is the inverse of plctime."
  }
}